UCBTAPE  TITLE 'UCBTAPE - DISPLAY TAPE MOUNTS'
********************************************************************
*        'UCBTAPE' - DISPLAY ONLINE TAPE DRIVES AND TAPE MOUNTS    *
********************************************************************
*
*        WRITTEN BY.     Sam Golob
*
*        DATE WRITTEN.   November 18, 2012.
*
*        DATE UPDATED.
*
*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.
*                                    --- --------------
*        DESCRIPTION.
*
*            This TSO command is a quick display of all online
*            tape drives and pending tape mounts.
*
*            It does not display a copy of the UCB's but it
*            displays "the real thing", and NOT a UCB copy,
*            without having to be authorized.  The way this was
*            done, was to use the ULUT, or UCB LookUp Table,
*            which is not really documented by IBM.  Since the
*            ULUT's structure can change, and it actually has
*            changed once, using this method to look up UCB's is
*            not recommended by IBM.  But if you keep up with
*            the changes, you can keep this program working.
*            The ULUT tells you which version it is.  Currently,
*            they are called Type 1, or Type 2.
*
*        OUTPUT.
*
*            TSO output is via PUTLINE, so the output can
*            be trapped and displayed.
*
*        SYNTAX.
*
*            UCBTAPE   Ý M ¨
*
*            A parameter of M will cause UCBTAPE to only display
*            tape units requiring a tape mount.
*
*            With no parameters, UCBTAPE will display all online
*            tape units, showing those requiring tape mounts.
*
*        ATTRIBUTION.
*
*            Thanks to Gilbert Saint-flour, of blessed memory,
*            for doing the necessary research, calling IBM Level 2,
*            nosing out the facts, etc.  Gilbert exposed this
*            technique, and I decided to try and write programs
*            that use it.  You get real-time UCBs without needing
*            APF-authorization.
*
*        FURTHER REFERENCE.
*
*            Please refer to the SHOWzOS code on CBT Tape File 492
*            to see how this is done.  Search for string "ULUT".
*
*        TESTED.   OS/390 1.3 thru z/OS 1.13 .
*
*
*        LOG OF CHANGES.
*
*        2012/11/19 - V1.1 - Scrubbed "volser" fields with a
*                     translate table because sometimes binary
*                     data might appear there.
*
*                     If some real "volser"s appear to have
*                     blanks in them, then permit the necessary
*                     characters to print in translate table,
*                     at label TRTBL0.
*
*        2012/11/20 - V1.2 - Allow parm of M, to only display
*                     units that need a tape mount.
*
********************************************************************
* ------------------------------------------------------------------- *
*                    M   A   C   R   O   S                            *
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R7,SAVER7A                Save area for BAL register
         STM   R15,R1,HEXSAVE            Save work registers
         LA    R1,&FROM                  Load from address
         LA    R0,&LEN                   Load number of chars to move
         LA    R15,&TO                   Load to address
         BAL   R7,HEX                    Go to routine - do the work
         LM    R15,R1,HEXSAVE            Restore work registers
         L     R7,SAVER7A                Restore BAL register
         MEND
* ------------------------------------------------------------------- *
*          B E G I N N I N G    O F    M A I N    C O D E             *
* ------------------------------------------------------------------- *
UCBTAPE  CSECT
UCBTAPE  RMODE ANY
UCBTAPE  AMODE 31
         USING *,R10
ENTRY0   B     BEGIN-*(,R15)             Eyecatcher
         DC    AL1(7),CL7'UCBTAPE'
         DC    C' V1.2'
         DC    CL16' &SYSDATE &SYSTIME '
WORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)
BEGIN    STM   R14,R12,12(R13)        Set up program.
         LR    R10,R15                Load base register.
         LR    R3,R1                  Save parms across GETMAIN, etc.
         L     R0,WORKSIZ             Size for GETMAIN.
         GETMAIN R,LV=(0)
         LR    R9,R1                  Save addr of getmained area.
         USING WORK,R9
INITWORK DS    0H
         XC    FLAG1,FLAG1            Make sure Flag byte is zeroed.
*        XC    0(WORKINIT,R1),0(R1)   Clear work area (if small)
         XC    0(WORKLEN-200,R1),0(R1)   Clear work area (bigger one)
         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)
         ST    R13,4(,R9)             Old address in new save area.
         ST    R9,8(,R13)             New address in old save area.
         LR    R13,R9                 Establish new save area.
         MVI   LINE-1,X'40'           Initial clear of output line.
         MVC   LINE,LINE-1
         LA    R15,12                 Set return code to 12 initially.
         ST    R15,RETCODE            And save that value.
         ST    R3,PARMPTR             Store parm for reloading later.
         SPACE
         APUT  MESSAGET,L'MESSAGET    Print titles.
         APUT  MESSAGEU,L'MESSAGEU
         APUT  MESSGSUB,L'MESSGSUB
         APUT  MESSGSUU,L'MESSGSUU
* ------------------------------------------------------------------- *
UCBPARM  DS    0H                     PROCESS THE PARM
         L     R1,PARMPTR             Point to parm or CPPL
         LTR   R1,R1                  Any CPPL or PARM pointer?
         BZ    UCBBEGN                B if not.
         L     R2,0(,R1)              Point to buffer.
         LTR   R2,R2                  Any?
         BZ    UCBBEGN                B if not.
         LH    R3,0(R2)               Load length.
         LTR   R3,R3                  Any?
         BZ    UCBBEGN                B if not.
         CLI   2(R2),X'00'            Command processor invocation?
         BE    UCBCP                  Yes. Handle that.
         LA    R2,2(,R2)              Point to PARM.
         B     PARM
UCBCP    CH    R3,=H'4'               Any PARM?
         BE    UCBBEGN                B if not.
         AH    R2,2(,R2)              Point to ...
         LA    R2,4(,R2)              ... PARM.
PARM     OI    0(R2),C' '             Uppercase.
         MVC   PARMCHAR(1),0(R2)
         CLI   0(R2),C'M'             PARM of M? (Display only mounts)
         BNE   UCBBEGN                B if not.
         OI    FLAG1,X'01'            Throw flag.
UCBBEGN  DS    0H                     Point to the CVT.
* ------------------------------------------------------------------- *
*                 Get to the ULUT (UCB Lookup Table)                  *
* ------------------------------------------------------------------- *
         L     R3,16                  CVT
         L     R3,X'7C'(,R3)          CVTIXAVL
         L     R3,X'D0'(,R3)          IOVT
         L     R4,8(,R3)              UCB Lookup Table (ULUT)
         LR    R3,R4                  Both registers point to ULUT.
         CLC   =C'ULUT',0(R3)         Is it what we think?
         BNE   EXIT                   No. Get out.
         CLI   4(R3),X'01'            Yes. Which type ULUT do we have?
         BE    ULUTTYP1               Type 1? OK.
         CLI   4(R3),X'02'
         BE    ULUTTYP2               Type 2? OK.
         B     EXIT                   Neither, exit with RC=12.
* ------------------------------------------------------------------- *
ULUTTYP1 L     R3,X'0C'(,R3)          Type 1, addr of first entry
         L     R4,X'10'(,R4)          Total number of entries (for BCT)
         ST    R4,TOTCOUNT            Store the total # entries for BCT
         B     LOOPSET
ULUTTYP2 L     R3,X'14'(,R3)          Type 2, ADDR OF FIRST ENTRY
         L     R4,X'18'(,R4)          Total number of entries (for BCT)
         ST    R4,TOTCOUNT            Store the total # entries for BCT
*        B     LOOPSET
* ------------------------------------------------------------------- *
LOOPSET  DS    0H
         ST    R4,TESTCNT             Establish decrement if we need
         L     R4,TESTCNT               to test later.....
* ------------------------------------------------------------------- *
*    Main part of code. Go through all the UCB's and extract info.    *
* ------------------------------------------------------------------- *
LOOPUCB  DS    0H                     Look at all the UCB's in system.
         L     R5,8(,R3)              Get address of this UCB.
         ST    R5,UCBADDRS            Save address for reporting.
         USING UCBOB,R5
         TM    UCBTBYT3,UCB3TAPE      Is this UCB for a tape unit?
         BNO   LOOPJUMP               No. We're only dealing with tape.
         TM    UCBSTAT,UCBONLI        Is this unit online?
         BNO   LOOPJUMP               No. We're only doing online units
* ------------------------------------------------------------------- *
         MVI   LINE-1,X'40'           Clear output line.
         MVC   LINE,LINE-1
*                                     And start moving stuff into it.
         HEX   LINE+1,2,4(R5)         Move unit address into line.
         MVC   VOLSRWRK(6),BLANKS     Blank this field initially.
         MVC   VOLSRWRK(6),X'1C'(R5)  Move tape volser to work area.
         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.
         MVC   LINE+12(6),VOLSRWRK    Move tape volser into line.
         MVC   VOLSRWRK,BLANKS        Clear work area for next use.
         CLC   =X'000000000000',LINE+12    If it is all zeroes,
         BNE   HASVOLSR                    Not. Leave unchanged.
         MVC   LINE+12(6),BLANKS           Otherwise, put blanks, not
*                                            unprintables.
HASVOLSR DS    0H
         MVC   SAVEDEVT(4),X'10'(R5)  Move hex device type to workarea.
TYPETAPE DS    0H                     For tapes, identify exact type.
* ------------------------------------------------------------------- *
*   3420's,  3480's,  3490's,  3590's  --- what kind of tape drive?   *
* ------------------------------------------------------------------- *
         LA    R8,DEVTABLE            Address of tape device table.
LOOPLUPD DS    0H                     Loop thru table.
         CLI   0(R8),X'00'            End of table?
         BE    LOOPENDD               Yes. End search for type.
         CLC   0(1,R8),SAVEDEVT+3     Is this a match?
         BE    LOOPPUTD               Yes. Modify device with type.
         LA    R8,5(,R8)              No. Bump up a table entry.
         B     LOOPLUPD               And try again until done.
LOOPPUTD DS    0H
         MVC   LINE+19(4),1(R8)       Move in listed device type.
LOOPENDD DS    0H                       3480, 3490, 3590.
         CLC   LINE+19(4),BLANKS      No proper type found?
         BNE   NOSUBTYP
         HEX   LINE+19,4,SAVEDEVT     The move in hex device type.
NOSUBTYP DS    0H
* ------------------------------------------------------------------- *
         TM    X'22'(R5),X'10'        Is the tape mounted PRIVATE?
         BZ    NOTPRIV                NO.
         MVC   LINE+24(4),=C'PRIV'    YES. SAY SO.
         B     ENDDEVTP
NOTPRIV  DS    0H
         TM    X'22'(R5),X'08'        Is the tape mounted PUBLIC?
         BZ    NOTPUBL                NO.
         MVC   LINE+24(4),=C'PUBL'    YES. SAY SO.
         B     ENDDEVTP
NOTPUBL  DS    0H
         TM    X'22'(R5),X'04'        Is the tape mounted STORAGE?
         BZ    ENDDEVTP               NO.
         MVC   LINE+24(4),=C'STOR'    YES. SAY SO.
         B     ENDDEVTP
ENDDEVTP DS    0H
         HEX   LINE+29,4,UCBADDRS     Report the real UCB address.
* ------------------------------------------------------------------- *
*      Invoke IBM's macro service to get the UCB Common Extension.    *
* ------------------------------------------------------------------- *
         L     R1,UCBADDRS            Now get the UCB common extension.
         ST    R0,SAVER0A             Macro needs R0
         IOSCMXR
         ST    R1,UCBCEADR            Save UCB common extension addr.
         L     R0,SAVER0A             Device Class Extension address.
* ------------------------------------------------------------------- *
*      Invoke IBM's macro service to get the DCE Address.             *
* ------------------------------------------------------------------- *
         L     R1,UCBADDRS            Now get the DCE address
         ST    R0,SAVER0A             Macro needs R0
         IOSDCXR
         ST    R1,DCEADDR             Save the DCE address.
         L     R0,SAVER0A             Restore R0.
* ------------------------------------------------------------------- *
         HEX   LINE+61,4,UCBCEADR     Report UCB Common Extension addr.
         HEX   LINE+38,4,DCEADDR      Report DCE address.
* ------------------------------------------------------------------- *
         ST    R8,SAVER8A             Save work register.
*                                     Check for possible volsers ....
         TM    X'24'(R5),X'F0'        See if there's a volser in field.
         BNZ   PUTVOL1                Something in 1st nibble? Yes?
*                                     Then assume a volser is there.
         B     PUTVOL2                Otherwise, check in other field.
PUTVOL1  DS    0H                     If volser is there,
*        MVC   LINE+47(6),X'24'(R5)      then report it.
         MVC   VOLSRWRK,X'24'(R5)     Move tape volser to work area.
         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.
         MVC   LINE+47(6),VOLSRWRK    Move tape volser into line.
         MVC   VOLSRWRK,BLANKS        Clear work area for next use.
PUTVOL2  DS    0H                     Is volser in the other places?
         TM    X'34'(R5),X'F0'        Is a volser here, or a counter?
         BNZ   PUTVOL3                Nonzero. Must be a volser.
         B     PUTVOL4                Zeros at beginning, it's counter.
PUTVOL3  DS    0H                     Since it's a volser, then
*        MVC   LINE+54(6),X'3A'(R5)      we must report what it is.
         MVC   VOLSRWRK,X'3A'(R5)     Move tape volser to work area.
         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.
         MVC   LINE+54(6),VOLSRWRK    Move tape volser into line.
         MVC   VOLSRWRK,BLANKS        Clear work area for next use.
PUTVOL4  DS    0H
* ------------------------------------------------------------------- *
MESTEST  DS    0H                     Test for pending tape mounts.
         TM    X'22'(R5),X'01'        Is there a mount pending?
         BZ    NOMES00                No. Don't report one.
         MVC   LINE+6(5),=C'*MNT*'    Yes. Show unit needs a mount.
* ------  Mounts out of order?  -  below
         TM    X'06'(R5),X'40'        Mounts out of order?
         BO    MOUNTD                 No. They were done in order.
NOTMTD   DS    0H                     Yes. Mount was already done.
         MVC   LINE+6(5),BLANKS       So don't report we still need one
MOUNTD   DS    0H
* ------  Mounts out of order?  -  above
NOMES00  DS    0H                     Now put out output line.
         TM    FLAG1,X'01'            Are we only displaying mounts?
         BZ    NOMES01                No. Just print this line anyway.
         CLC   LINE+6(5),=C'*MNT*'    Yes. See if this is a mount.
         BNE   LOOPJUMP               Not a mount. Don't display line.
NOMES01  DS    0H                     Now put out output line.
         APUT  LINE,95
LOOPJUMP DS    0H
         L     R8,SAVER8A             Restore work register.
         ST    R4,TESTCNT             Decremented ULUT entry count.
         MVC   LINE,LINE-1            Clear line for next UCB report.
         LA    R3,X'C'(,R3)           Go to next ULUT entry.
         BCT   R4,LOOPUCB             Loop proper number of times,
         B     EXIT0                  And fall through when done.
* ------------------------------------------------------------------- *
EXIT0    MVI   RETCODE+3,0            Reset return code to 0 here.
EXIT     L     R2,RETCODE             Load whatever return code we had.
         LR    R1,R13                 Point to address to FREEMAIN.
         L     R0,WORKSIZ             Length to FREEMAIN.
         L     R13,4(,R13)            Restore original R13.
         FREEMAIN R,A=(1),LV=(0)
         DROP  R9
         LR    R15,R2                 Reload proper return code.
         LM    R0,R12,20(R13)         Reload registers,
         L     R14,12(,R13)
         BR    R14                    And get out.
         SPACE
* ------------------------------------------------------------------- *
*                 S  U  B  R  O  U  T  I  N  E  S                     *
* ------------------------------------------------------------------- *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R7                  RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* ------------------------------------------------------------------- *
*            U N C H A N G E D    C O N S T A N T S                   *
* ------------------------------------------------------------------- *
         LTORG
MESSAGET DC    C'     UCBTAPE - V1.2 - DISPLAY TAPE MOUNTS AND ONLINE T-
               APE DRIVES'
MESSAGEU DC    C'     -------   ----   ------- ---- ------ --- ------ -X
               --- ------'
MESSGSUB DC    C' Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol x
               LastVl Ext Addr'
MESSGSUU DC    C' ---- ----- ------ ---- ---- -------- -------- ------ X
               ------ --------'
MASK7    DC    XL7'40202020202120'
MASK9    DC    XL9'402020202020202120'
BLANKS   DC    CL16' '
         DC    0D'0'
DEVTABLE DS    0D                      Device type as listed in DCE
         DC    X'03',C'3400'
         DC    X'82',C'3423'
         DC    X'80',C'3480'
         DC    X'81',C'3490'
         DC    X'83',C'3590'
         DC    X'0000000000'
* ---   Convert most unprintables for VOLSER names into blanks.   --- *
TRTBL0   DS    0D                                                       06685
         DC    XL16'40404040404040404040404040404040'                   06686
         DC    XL16'40404040404040404040404040404040'                   06687
         DC    XL16'40404040404040404040404040404040'                   06688
         DC    XL16'40404040404040404040404040404040'                   06689
         DC    XL16'40404040404040404040404040404040'                   06690
         DC    XL16'40404040404040404040404040404040'                   06691
         DC    XL16'404040404040404040404040406D4040'                   06692
         DC    XL16'40404040404040404040407B7C404040'                   06693
         DC    XL16'40818283848586878889404040404040'                   06694
         DC    XL16'40919293949596979899404040404040'                   06695
         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'                   06696
         DC    XL16'40404040404040404040404040404040'                   06697
         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'                   06698
         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'                   06699
         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'                   06700
         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'                   06701
* ------------------------------------------------------------------- *
*            G E T M A I N E D    W O R K    A R E A                  *
* ------------------------------------------------------------------- *
WORK     DSECT
         DS    18F                Save area.
CVDAREA  DS    D                  Work area for CVD instruction.
PARMPTR  DS    F                  Save parm pointer.
RETCODE  DS    F                  Return code - default is 12.
UCBADDRS DS    F                  Address of UCB returned from ULUT.
HEXSAVE  DS    3F                 Save area for HEX macro.
SAVER0A  DS    F                  Save work register R0 for IBM macros.
SAVER7A  DS    F                  Save R7 during subroutine execution.
SAVER8A  DS    F                  Save work register R8.
UCBCEADR DS    F                  Address of UCB COMMON EXTENSION
UCBPRADR DS    F                  Address of UCB PREFIX
DCEADDR  DS    F                  Address of DEVICE CLASS EXTENSION
SAVEDEVT DS    F                  Save 4 character device type.
TOTCOUNT DS    F                  Save total number of ULUT entries.
TESTCNT  DS    F                  Save decremented number of entries.
FLAG1    DS    X                  Result of scanning parm.
*              X'01'              Only show UCB's needing tape mounts.
VOLSRWRK DS    CL6                Work area to scrub a volser field.
PARMCHAR DS    C                  Work area to store parm character.
         DS    X                  Fill character for LINE.
LINE     DS    CL100              Make sure output line is big enough.
WORKINIT EQU   *-WORK
         DS    0D
WORKLEN  EQU   *-WORK             Aligned length for GETMAIN/FREEMAIN.
* ------------------------------------------------------------------- *
UCB      DSECT
         IEFUCBOB
         SPACE
         YREGS
         END   ENTRY0
* ------------------------------------------------------------------- *
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
