ALPL     TITLE 'ALPL - CHANGE DEFAULT TSO/E ALLOCATION TO OLD OR SHR'
         SPACE 1
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  Documentation:   This program is meant to be run as a TSO          *
*                   command, APF authorized.                          *
*                                                                     *
*    Environment:   TSO command, APF Authorized                       *
*                   PUTLINE interface enabled by APUT, EPUTL.         *
*                                                                     *
*    Description:   Change the system-wide default allocation value   *
*                   of the TSO/E ALLOC command to allocate either     *
*                   OLD or SHR.                                       *
*                                                                     *
*       Function:   To change the system wide allocation default.     *
*                                                                     *
*         Syntax:   ALPL OLD | SHR    (changes value if different)    *
*                   ALPL              (displays current setting)      *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  Change Log:                                                        *
*    2007/12/09 - 1.0 - Initial version - Tested with TSO/E Version   *
*                       3.                                            *
*                                                                     *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*       I N S T R E A M    M A C R O S                                *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  ---------------------------------------------------------------  *
*    This macro is used to display hex values in a printed report.
*  ---------------------------------------------------------------  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
         YREGS
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R9,HEX
         LM    R15,R1,HEXSAVE
         MEND
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MACRO
         IKJALPL
ALPLDSEC DSECT                         ALLOC command defaults
ALPL_ID  DS    C'ALPL'                 Block id
ALPL_LENGTH DS H                       length of control block
ALPL_LEVEL  DS H                       level of control block
         DS    F                       zero
ALPL_FLAG DS   X                       Allocate flag
ALPL_OLD EQU  X'80'                    OLD
ALPL_SHR EQU  X'40'                    SHR
         DS   4F
         MEND
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
         SPACE 1
SP000    EQU   0
         SPACE 1
ALPL     CSECT
ALPL     AMODE 31
ALPL     RMODE 24
         USING *,R15                                                  *  01493
         B     BEGINN                   Eyecatcher
         DC    CL15'ALPL VER 1.0 -'
         DC    CL16' &SYSDATE &SYSTIME '
BEGINN   DS    0H
         DROP  R15
         USING ALPL,R12,R11,R10
         STM   R14,R12,12(R13)
         LR    R12,R15                  Set up base registers.
         ST    R1,SAVEPARM              Save CPPL pointer
         LA    R11,4095(,R12)
         LA    R11,1(,R11)
         LA    R10,4095(,R11)
         LA    R10,1(,R10)
         LA    R1,SAVEAREA          Point to new save area               01508
         ST    R1,8(,R13)           Forward save area chain pointer      01509
         ST    R13,4(,R1)           Backward save area chain pointer     01510
         LR    R13,R1               New save area address                01511
         B     INITCON              Branch past save area
         SPACE 1
* -----------------------
SAVEAREA DC    18F'0'                                                    01504
* -----------------------
INITCON  DS    0H                   Initialize constants
         MVI   ALCFLAG,X'00'
         MVI   NCHFLAG,X'00'
         MVI   DSPLFLAG,X'00'
         MVI   DSPLSAVE,X'00'
         MVI   LINEB,X'40'
         MVC   DISPSETT(3),=C'   '
* -----------------------
TESTPSCB DS    0H
         L     R2,16               POINT TO CVT.
         L     R2,0(,R2)           POINT TO TCB/ASCB WORDS
         L     R2,4(,R2)           POINT TO TCB.
         L     R2,X'B4'(,R2)       POINT TO JSCB.
         L     R2,X'108'(,R2)      POINT TO PSCB.
         LA    R2,0(,R2)           CLEAR HIGH BYTE.
         LTR   R2,R2               ANY PSCB?
         BZ    EOJC                GET OUT.  NOT TSO.
         L     R1,SAVEPARM
         USING CPPL,R1
         L     R0,CPPLUPT          Copy CPPL fields for possible
         ST    R0,SAVEUPT            later use, if needed.
         L     R0,CPPLPSCB
         ST    R0,SAVEPSCB
         L     R0,CPPLECT
         ST    R0,SAVEECT
         LA    R6,0
         DROP  R1
         BAL   R9,PGMTITLE         First display the program title.
         USING PSCB,R2
CHEKAUTH DS    0H
*        B     CONT0               Bypass authorization check
         TM    PSCBATR1,PSCBACCT   ACCT user?
         BO    CONT0               Yes.  Continue.
         TM    PSCBATR1,PSCBCTRL   OPER user?
         BZ    EOJC                No.  Get out.
         DROP  R2
CONT0    DS    0H                  Get starting addresses for tables
         L     R2,16               Point to CVT
         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)
         L     R2,X'4C'(,R2)       Point to TPVT
         ST    R2,SAVETPVT         Save TPVT address for later use
         L     R2,X'24'(,R2)       Point to ALPL control block
         ST    R2,SAVEALPL         Save ALPL address for later use
LOOKALPL DS    0H
* ------
         L     R2,SAVEALPL         Load ALPL address back - safety
         CLC   =C'ALPL',0(R2)      Is this a valid header?
         BE    VALDALPL            Yes, do the processing.
         B     EOJC                No. Exit with code 12.
VALDALPL DS    0H
* ------
*    We start scanning for PARMs here.
* ------
         L     R1,SAVEPARM         Original R1 from entry to program.
         LTR   R1,R1               Any CPPL?
         BZ    EOJC                No. Get out.
         L     R1,0(,R1)           Point to Command Buffer
         LTR   R1,R1               Any Command Buffer?
         BZ    EOJC                Get out if none.
         LH    R3,0(,R1)           Load length.
         CH    R3,=H'4'            Anything?
         BNH   EOJC                No.  Get out.
         LR    R5,R3               Length of command + 4
         ICM   R5,14,FULLZERO      Clear high order 3 bytes.
         ST    R1,CMBUFAD          Save Command Buffer Address
         LH    R3,2(,R1)           Load offset.
         SR    R5,R3               Subtract offset from full length+4
         SH    R5,=H'4'            Correct for length of CMDBUFR header
*                                  in the command buffer.
         BC    5,EOJC              Less, or overflow, out, code 12.
         BC    8,DISPLIT           No parm, just display current
*                                     status, and exit, code 4.
         ST    R5,CMBUFEND         Store away the number of bytes left
         L     R1,CMBUFAD          Load Command Buffer Address
         AR    R1,R3               Point ...
         LA    R1,4(,R1)           ... to char.
         LA    R6,3                Load register for BCT loop.
         ST    R1,CHARSTRT         Store address away for safekeeping
         LR    R7,R1               Initialize pointer
         LA    R7,0(,R7)           to first character of parameter.
         LA    R8,0                Initialize character count
CUTIDLEN CLI   0(R7),X'40'         Is this character a blank?
         BE    AFTFIRST            Yes, end of the first parm.
         LA    R7,1(,R7)           Bump another character
         LA    R8,1(,R8)           Count another character
         CR    R8,R5               End of command buffer ?
         BNL   AFTFIRST            Yes. Get out now.
         BCT   R6,CUTIDLEN         Try for blank again.
AFTFIRST DS    0H
         MVC   TABCODE(8),BLANKS   Clear field
         BCTR  R8,0                Subtract 1 for execute.
         L     R1,CHARSTRT         Reload R1 to be sure it's correct.
         EX    R8,MOVOUTL          Move entered parameter to program.
         LA    R8,1(,R8)           Restore number of characters
         AR    R1,R8               Point past last search
         ST    R1,CHARCONT         Continue from here
         ST    R8,SAVER8           Save
         ST    R6,SAVER6             the
         ST    R1,SAVER1A              registers
* ---- >
SEEIFPRM DS    0H                  Check if a command is here
         OC    TABCODE(3),BLANKS   Uppercase. Won't affect numbers
         CLC   TABCODE(3),=C'OLD'  Change alloc default to OLD?
         BE    SEEIF0A1
         CLC   TABCODE(3),=C'SHR'  Change alloc default to SHR?
         BE    SEEIF0A2
         B     SEEIFERR
SEEIF0A1 DS    0H
         OI    ALCFLAG,X'01'       Change alloc default to OLD.
         B     SEEIF001
SEEIF0A2 DS    0H
         OI    ALCFLAG,X'02'       Change alloc default to SHR.
         B     SEEIF001
SEEIFERR DS    0H
         BAL   R9,DSPLSTAT         Display current status
* --- >
         MVC   LINE,LINEB
         MVC   LINE(3),TABCODE
         HEX   LINE+6,1,ALCFLAG
         MVC   LINE+13(33),=C'Parm is not OLD or SHR.          '
         APUT  LINE,46
         APUT  MESSAG2D,L'MESSAG2D
* --- >
         B     EOJ8                Not either one? Exit.
SEEIFER1 DS    0H                  Which table to change
         B     EOJ8                Not either one? Exit.
SEEIF001 DS    0H                  Which table to change
         BAL   R9,DSPLSTAT         Display current status
* --- >                            Then display target status
         MVC   LINE,LINEB
         MVC   LINE(3),TABCODE
         HEX   LINE+6,1,ALCFLAG
         MVC   LINE+13(33),=C'ALLOC setting will be changed to '
         CLI   ALCFLAG,X'01'
         BE    SEEIFOLD
         B     SEEIFSHR
SEEIFOLD DS    0H
         MVC   LINE+46(3),=C'OLD'
         MVC   DISPSETT(3),=C'OLD'
         B     SEEIFPUT
SEEIFSHR DS    0H
         CLI   ALCFLAG,X'02'
         BNE   SEEIFER1
         MVC   LINE+46(3),=C'SHR'
         MVC   DISPSETT(3),=C'SHR'
SEEIFPUT DS    0H
         TM    NCHFLAG,X'01'
         BO    SEEIFCHG
         APUT  LINE,49
* --- >
SEEIFCHG DS    0H
         TM    NCHFLAG,X'01'
         BO    SAYNOCHG
         BAL   R9,SETTMODE
         B     EOJ0
SAYNOCHG DS    0H
         MVC   LINE,LINE-1
         MVC   LINE(40),=C'No change of ALLOC status was necessary. '
         APUT  LINE,40
         B     EOJ0
DISPLIT  DS    0H
         BAL   R9,DSPLSTAT         Zero, Message
         B     EOJ4
EOJ      DS    0H                                                        04216
         L     R13,4(,R13)                                               04214
         LR    R15,R5              Put in real return code
         ST    R15,16(,R13)        Shove it where it belongs
         L     R14,12(,R13)        R14 and
         LM    R0,R12,20(R13)        rest of registers
         BR    R14                 Go back to caller
EOJ0     DS    0H                  Return code 0
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGR0       Show Return Code 0
         APUT  MESSAGR0,L'MESSAGR0
         LA    R5,0                Set CC = 0
         B     EOJ                 Now end the program
EOJ4     DS    0H                  Return code 4
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGR4       Show Return Code 4
         APUT  LINE,L'MESSAGR4
         L     R5,FULLFOUR         Set CC = 4                            04215
         B     EOJ                 Now end the program
EOJ8     DS    0H                  Return code 8
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGR8       Show Return Code 8
         APUT  LINE,L'MESSAGR8
         L     R5,FULLEIGT         Set CC = 8                            04215
         B     EOJ                 Now end the program
EOJC     DS    0H                  Return code 12
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGRC       Show Return Code 12
         APUT  LINE,L'MESSAGRC
         L     R5,FULLTWLV         Set CC = 12
         B     EOJ                 Now end the program
** ---------------------------------------------------------------- **
NOTAUTH  DS    0H                     Command not authorized message.
         APUT  MESSAG2C,L'MESSAG2C
         APUT  MESSAG2D,L'MESSAG2D
         B     EOJ8
** ---------------------------------------------------------------- **
SAVEPARM DC    F'0'
SAVETPVT DC    F'0'
SAVEALPL DC    F'0'
SAVEUPT  DC    F'0'
SAVEECT  DC    F'0'
SAVEPSCB DC    F'0'
** ---------------------------------------------------------------- **
FULLZERO DC    F'0'
FULLFOUR DC    F'4'
FULLEIGT DC    F'8'
FULLTWLV DC    F'12'
SAVE1401 DC    5F'0'                  More for safety
* - - - - - - - - - - - - - - - - - - - - - - - - *
MOVOUTL  MVC   TABCODE(*-*),0(R1)     EXECUTED
** ---------------------------------------------------------------- **
* - - - - - - - - - - - - - - - - - - - - - - - - *
*            S U B R O U T I N E S                *
* - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H
         ST    R9,SAVER9A
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         L     R9,SAVER9A
         BR    R9                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
HEXSAVE  DS    3F                    Register save for HEX macro
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LTORG
************************************************************
PGMTITLE DS    0H                     Display program name
         ST    R9,SAVER9B
         MVC   LINE,LINE-1            Blank line
         MVC   LINE,MESSAGET          Move title line in
         APUT  LINE,L'MESSAGET        And put out to tube
         MVC   LINE,LINE-1            Blank line again
         MVC   LINE,MESSAGEU          Move underlines in
         APUT  LINE,L'MESSAGEU        And put them out also
         L     R9,SAVER9B
         BR    R9                     Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
SETTMODE DS    0H
         ST    R9,SAVER9C
* -- >       Test if this command is being run APF Authorized
         STM   R15,R1,SAVE1401     Now save registers and test if APF
         XR    R15,R15                  authorized.
         TESTAUTH FCTN=1           Are we authorized?
         LTR   R15,R15             Test the return code.
         BNZ   NOTAUTH             Not zero, tell not authorized.
         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.
* -- >
* -- >      Key Zero ---- Here's where we change the stuff.
KZ       MODESET KEY=ZERO
* -
         L     R2,SAVEALPL         Load ALPL address back.
         USING ALPLDSEC,R2
         TM    ALCFLAG,X'01'
         BO    MAKEOLD
         TM    ALCFLAG,X'02'
         BO    MAKESHR
MAKEOLD  DS    0H
         MVI   ALPL_FLAG,ALPL_OLD
         B     ENDKZ
MAKESHR  DS    0H
         MVI   ALPL_FLAG,ALPL_SHR
         B     ENDKZ
ENDKZ    DS    0H
         DROP  R2
* -
NZ       MODESET KEY=NZERO
* -- >      Back to ordinary life ----
         BAL   R9,DISPLNEW
         L     R9,SAVER9C
         BR    R9                     Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
DSPLSTAT DS    0H                     Display ALLOC status
         ST    R9,SAVER9D
         L     R2,SAVEALPL
         MVC   DSPLSAVE,X'C'(R2)
* -- >
*        MVC   LINE,LINE-1            Blank line
*        MVC   LINE(14),=C'Hex Old Value '
*        HEX   LINE+18,1,DSPLSAVE
*        APUT  LINE,22
* -- >
         CLI   X'C'(R2),X'80'
         BE    DISPLOLD
         CLI   X'C'(R2),X'40'
         BE    DISPLSHR
         B     DISPLERR
DISPLOLD DS    0H
         MVI   DSPLFLAG,X'01'
         MVC   MESSAGE4+35(3),=C'OLD'
         B     DISPLPUT
DISPLSHR DS    0H
         MVI   DSPLFLAG,X'02'
         MVC   MESSAGE4+35(3),=C'SHR'
         B     DISPLPUT
DISPLERR DS    0H
         MVC   MESSAGE4+35(3),=C'ERR'
         B     DISPLPUT
DISPLPUT DS    0H
         MVC   LINE,LINE-1            Blank line
         MVC   LINE,MESSAGE4          Move title line in
         APUT  LINE,L'MESSAGE4        And put out to tube
DISPLNCH DS    0H
         TM    ALCFLAG,X'03'
         BZ    DISPLEND
         CLC   ALCFLAG,DSPLFLAG
         BNZ   DISPLEND
         OI    NCHFLAG,X'01'
         MVC   LINE,LINE-1
         MVC   LINE,MESSAGE5
         MVC   LINE+23(3),MESSAGE4+35
         APUT  LINE,L'MESSAGE5        And put out to tube
DISPLEND DS    0H
         L     R9,SAVER9D
         BR    R9                     Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
DISPLNEW DS    0H
         ST    R9,SAVER9E
         MVC   LINE,LINE-1
         MVC   LINE,MESSAGE6
         MVC   LINE+35(3),DISPSETT
         APUT  LINE,L'MESSAGE6        And put out to tube
DISPLNND DS    0H
         L     R9,SAVER9E
         BR    R9                     Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
BLANKS   DC    C'                                            '
MESSAGET DC    C'ALPL Command - Change Default Allocation OLD or SHR '
MESSAGEU DC    C'---- -------   ------ ------- ---------- --- -- --- '
MESSAG2C DC    C'Command was not invoked APF authorized.'
MESSAG2D DC    C'Nothing was changed.  '
MESSAG3A DC    C'Default ALLOC value was changed to OLD.            '
MESSAG3B DC    C'Default ALLOC value was changed to SHR.            '
MESSAGE4 DC    C'Current setting of ALLOC value is     .            '
MESSAGE5 DC    C'ALLOC value setting of     will not be changed.    '
MESSAGE6 DC    C'Changed setting of ALLOC value is     .            '
MESSAGR0 DC    C'Return Code = 0 '
MESSAGR4 DC    C'Return Code = 4 '
MESSAGR8 DC    C'Return Code = 8 '
MESSAGRC DC    C'Return Code = 12'
         SPACE 3
         LTORG
         SPACE 3
SAVER1A  DS    F                   Save R1 here
SAVER6   DS    F                   Save R6 here
SAVER8   DS    F                   Save R8 here
SAVER9A  DS    F                   BAL Register Save Area
SAVER9B  DS    F                   BAL Register Save Area
SAVER9C  DS    F                   BAL Register Save Area
SAVER9D  DS    F                   BAL Register Save Area
SAVER9E  DS    F                   BAL Register Save Area
CMBUFEND DS    F                   Number of bytes to end of cmd buff
CMBUFAD  DS    F                   Command Buffer address
CHARSTRT DS    F                   Address of first parm character
CHARCONT DS    F                   Address of next parm character
PAD01    DS    CL4                 Filler
DISPSETT DS    CL3                 Place to store literal OLD or SHR
DSPLSAVE DS    X                   Save bit setting in control block
DSPLFLAG DS    X                   Convert bit setting to our flag
NCHFLAG  DS    X                   "No change necessary" flage
ALCFLAG  DS    X                   Are we blanking the last entry?
PAD02    DS    CL4                 Filler
TABCODE  DC    CL8' '              Original OUTLIM character
         DS    CL72                PADDING
         DS    0F                  ALIGN ON FULLWORD
LINEB    DS    C                   LINE-1
LINE     DS    CL137               Output line area
LINET    EQU   LINE+7              Indented line
         SPACE
         IKJALPL
         IKJCPPL
         IKJPSCB
         CVT      LIST=YES,DSECT=YES
         IKJTSVT
         END
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
