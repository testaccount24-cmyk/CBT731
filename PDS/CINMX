CINMX    TITLE 'CINMX - CHANGE INMXPARM VALUES IN STORAGE'
         SPACE 1
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  Documentation:   This program is meant to be run as a TSO          *
*                   command, APF authorized.                          *
*                                                                     *
*         Syntax:   CINMX nnnnnnnnnn     (Changes the OUTLIM value)   *
*                   or                                                *
*                   CINMX W nnnnnnnnnn   (Changes WARN threshold)     *
*                   or                                                *
*                   CINMX I nnnnnnnnnn   (Changes WARN interval)      *
*                                                                     *
*                   Numeric value nnnnnnnnnnn limited to 10 digits.   *
*                                                                     *
*       Function:   To change the value of the TRANSREC OUTLIM        *
*                   values in the INMXPARM control block.  This       *
*                   is the value which limits the number of           *
*                   records allowed to be created by one execution    *
*                   of the TRANSMIT (XMIT) TSO command.  And also     *
*                   the two TRANSREC WARNing values can be changed.   *
*                                                                     *
*          Author:  Sam Golob               Version:   1.2            *
*                                                                     *
*            Date:  Dec 20, 05                                        *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  Change Log:                                                        *
*    2005/12/20 - 1.0 - Initial version - Tested with TSO/E Version   *
*                       3.                                            *
*                                                                     *
*    2005/12/25 - 1.1 - Compensate for INMXPARM layout in previous    *
*                       level of TSO/E.  OS/390 1.3 and earlier.      *
*                       Numbers:  Warn1, Warn2, Outlim were 4 bytes   *
*                       earlier.  System level was determined (of     *
*                       necessity) from the location of the IKJTSOxx  *
*                       name in the TPVT.  The INMXPARM didn't seem   *
*                       to have a surefire telltale indicator of the  *
*                       earlier version.  See OLDFLAG in the code.    *
*                                                                     *
*    2006/01/01 - 1.2 - Allow change for TRANSREC warning values.     *
*                       W will change the warning threshold.          *
*                       I will change the warning interval.           *
*                       e.g.   CINMX W 200000                         *
*                              CINMX I 100000                         *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*       I N S T R E A M    M A C R O S                                *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  ---------------------------------------------------------------  *
*    This macro is used to display hex values in a printed report.
*  ---------------------------------------------------------------  *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R4,SAV4HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R4,HEX
         L     R4,SAV4HEX
         LM    R15,R1,HEXSAVE
         MEND
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
         YREGS
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
SP000    EQU   0
         SPACE 1
CINMX    CSECT
CINMX    AMODE 31
CINMX    RMODE 24
         USING CINMX,R12,R10
         B     BEGINN-*(,R15)           Eyecatcher
         DC    CL15'CINMX VER 1.2 -'
         DC    CL16' &SYSDATE &SYSTIME '
         DS    0H
BEGINN   STM   R14,R12,12(R13)
         LR    R12,R15                  Set up base registers.
         LA    R10,4095(,R12)
         LA    R10,1(,R10)
         LR    R11,R1                   Preserve CPPL pointer.
         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING DATAAREA,R13
         SPACE 1
* -----------------------
         MVC   OUTLMBIN,=F'0'      Initialize constants in the
         MVC   INMXADDR,=F'0'        data area
         MVC   OUTLIMN,BLANKS      Initialize area to blanks
         MVC   PAD01,BLANKS        Initialize pad area to blanks
         MVI   LINE-1,C' '         Initialize blank line minus one.
         MVI   OLDFLAG,X'00'       Assume new system unless indicated
         MVI   FUNCFLAG,X'00'      Assume we're changing OUTLIM
         MVC   MESSDIAG,BLANKS
* -----------------------
         L     R1,16               POINT TO CVT.
         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS
         L     R9,4(,R1)           POINT TO TCB.
         L     R1,X'B4'(,R9)       POINT TO JSCB.
         L     R2,X'108'(,R1)      POINT TO PSCB.
         LA    R2,0(,R2)           CLEAR HIGH BYTE.
         LTR   R2,R2               ANY PSCB?
         BZ    EOJ4                GET OUT.  NOT TSO.
         USING CPPL,R11
         L     R0,CPPLUPT          Copy CPPL fields for possible
         ST    R0,SAVEUPT            later use, if needed.
         L     R0,CPPLPSCB
         ST    R0,SAVEPSCB
         L     R0,CPPLECT
         ST    R0,SAVEECT
         LA    R6,0
         DROP  R11
         USING PSCB,R2
CHEKAUTH DS    0H
         B     CONT0               Bypass authorization check
         TM    PSCBATR1,PSCBACCT   ACCT user?
         BO    CONT0               Yes.  Continue.
         TM    PSCBATR1,PSCBCTRL   OPER user?
         BZ    EOJ4                No.  Get out.
CONT0    DS    0H
* -- >       Test if this command is being run APF Authorized
         STM   R15,R1,SAVE1401     Now save registers and test if APF
         XR    R15,R15                  authorized.
         TESTAUTH FCTN=1           Are we authorized?
         LTR   R15,R15             Test the return code.
         BNZ   NOTAUTH             Not zero, tell not authorized.
         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.
* -- >
         L     R2,16               Point to CVT
         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)
         L     R6,X'4C'(,R2)       Point to TPVT
         L     R2,X'2C'(,R6)       Point to INMXPARM control block
* ------
*    There doesn't seem to be a way to tell from an old INMXPARM
*    control block itself, that it is the old version.  So we use
*    the position of the active PARMLIB member name in the TPVT.
* ------
         CLC   =C'IKJ',7(R6)       Parmlib member name in old position?
         BNE   NEWSYSTM            No. It's a new TSO/E version
         OI    OLDFLAG,X'01'       Yes. Flag that the system is old.
NEWSYSTM DS    0H
         LTR   R11,R11             Any CPPL?
         BZ    EOJ8                No. Get out.
         L     R1,0(,R11)          Point to Command Buffer
         LTR   R1,R1               Any Command Buffer?
         BZ    EOJ4                Get out if none.
         LH    R3,0(,R1)           Load length.
         CH    R3,=H'4'            Anything?
         BNH   EOJ4                No.  Get out.
         LR    R5,R3               Length of command + 4
         ICM   R5,14,FULLZERO      Clear high order 3 bytes.
         ST    R1,CMBUFAD          Save Command Buffer Address
         LH    R3,2(,R1)           Load offset.
         SR    R5,R3               Subtract offset from full length+4
         SH    R5,=H'4'            Correct for length of CMDBUFR header
         ST    R5,CMBUFEND         Store away the number of bytes left
*                                  in the command buffer.
         BC    8,EOJC              Zero, Message
         BC    5,EOJC              Less, or overflow, out.
         AR    R1,R3               Point ...
         LA    R1,4(,R1)           ... to char.
         LA    R6,10               Load register for BCT loop.
         ST    R1,CHARSTRT         Store address away for safekeeping
         LR    R7,R1               Initialize pointer
         LA    R7,0(,R7)           to first character of new number.
         LA    R8,0                Initialize character count
CUTIDLEN CLI   0(R7),X'40'         Is this character a blank?
         BE    AFTFIRST            Yes, we are at the end of the number
         LA    R7,1(,R7)           Bump another character
         LA    R8,1(,R8)           Count another character
         CR    R8,R5               End of command buffer ?
         BNL   AFTFIRST            Yes. Get out now.
         BCT   R6,CUTIDLEN         Try for blank again.
AFTFIRST DS    0H
         MVC   OUTLIMN(10),BLANKS  Clear field
         BCTR  R8,0                Subtract 1 for execute.
         L     R1,CHARSTRT         Reload R1 to be sure it's correct.
         EX    R8,MOVOUTL          Move entered parameter to program.
         ST    R8,SAVER8           Save
         ST    R6,SAVER6             the
         ST    R1,SAVER1A              registers
* ---- >
SEEIFPRM DS    0H                  Check if a command is here
         OI    OUTLIMN,X'40'       Won't affect numbers
         CLI   OUTLIMN,C'W'        Is it an order to change Warning?
         BE    WARNCHG             Yes. Branch.
         CLI   OUTLIMN,C'I'        Is it an order to change Interval?
         BE    INTVCHG             Yes. Branch.
SEEIFEND DS    0H                  R1 and R8 have been necessarily
* ---- >                             altered.
         L     R6,SAVER6           Restore only R6.
         MVC   OUTLIMO,OUTLIMN     Make a copy to preserve before trans
         EX    R8,TRNOUTL          Translate all non-numbers to blanks
         LA    R8,1(,R8)           Bump register back to where it was
         STC   R8,NUMCOUTL         Save new OUTLIM number's length
         XR    R8,R8               Clear entire register
         IC    R8,NUMCOUTL         Load full register with count
         LR    R7,R8               Save count in another register
         ST    R7,NUMVSTRT         And put it away permanently too
         ST    R9,SAVER9           Sock away register value for safety
         BAL   R9,VERIFNUM         Verify if the parm is numeric
         L     R9,SAVER9           Restore the register after the BAL
         BCTR  R8,0                One less for EXECUTE.
         EX    R8,PACK             Convert to packed.
         CVB   R0,WORK             Convert to binary.
         ST    R0,OUTLMBIN         And store the number in OUTLMBIN.
         B     PASTCONV            Jump past constants
         DROP  R2
*
PACK     PACK  WORK,0(0,R1)        << EXECUTED >>
WORK     DC    D'0'                      Doubleword for CVB instruction
OLDPATT  DC    X'40202020202020202120'   Pattern for old OUTLIM value
*
PASTCONV DS    0H
         L     R2,16               Point to CVT
         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)
         L     R6,X'4C'(,R2)       Point to TPVT
         L     R2,X'2C'(,R6)       Point to INMXPARM control block
* ---
         BAL   R9,PGMTITLE         Display program name on the tube
         MVI   LINE-1,X'40'        Ensure blank
         MVC   LINE,LINE-1         Blank entire output line
         MVC   LINE(42),=C'Output Limit for XMIT command is reset to '
         MVC   LINE+42(10),OUTLIMN Move in new OUTLIM value to display
         APUT  LINE,60             And display it on the tube.
* ---
         ST    R2,INMXADDR            Save INMXPARM address
         CLC   0(8,R2),=C'INMXPARM'   Is the INMXPARM header there?
         BNE   EOJ                    No. We've made a mistake.
         ST    R9,SAVER9A
         BAL   R9,GETSAVLM              Get previous values.
         L     R9,SAVER9A
         ST    R9,SAVER9A
         BAL   R9,GETDSPNO              Display previous numeric value
         L     R9,SAVER9A
* -- >      Key Zero ---- Here's where we change the stuff.
KZ       MODESET KEY=ZERO
         L     R3,INMXADDR
         USING XPRM,R3
         TM    FUNCFLAG,X'03'         Are we changing OUTLIM?
         BZ    ZAPOSTRT               All flags off. Go do OUTLIM.
         TM    FUNCFLAG,X'01'         Are we changing warn threshold?
         BO    ZAPWSTRT               Yes. Go do that.
         TM    FUNCFLAG,X'02'         Are we changing warn interval?
         BO    ZAPISTRT               Yes. Go do that.
* -     Block of code to change the OUTLIM. Total output limit.
ZAPOSTRT DS    0H                     We change the OUTLIM in this code
         TM    OLDFLAG,X'01'          Old system, change 4 bytes before
         BO    ZAPOLOC
         MVC   XPRM_LIM,OUTLMBIN      In Key 0, substitute new value.
         B     ZAPEND                 We did it, get out.
ZAPOLOC  DS    0H                     Do the change in the old place.
         MVC   XPRM_LIM-4(4),OUTLMBIN   Old system, 4 bytes before
         B     ZAPEND                 We did it, get out.
ZAPOEND  DS    0H
* -         Block of code to change the warn threshold
ZAPWSTRT DS    0H                     Change the Warn Threshold here.
         TM    OLDFLAG,X'01'          Old system, change 4 bytes before
         BO    ZAPWLOC
         MVC   XPRM_WARN1,OUTLMBIN    In Key 0, substitute new value.
         B     ZAPEND                 We did it, get out.
ZAPWLOC  DS    0H                     Do the change in the old place.
         MVC   XPRM_WARN1-4(4),OUTLMBIN In Key 0, substitute new value.
         B     ZAPEND                 We did it, get out.
ZAPWEND  DS    0H
* -         Block of code to change the warn interval
ZAPISTRT DS    0H                     Change the Warn Interval here.
         TM    OLDFLAG,X'01'          Old system, change 4 bytes before
         BO    ZAPILOC
         MVC   XPRM_WARN2,OUTLMBIN    In Key 0, substitute new value.
         B     ZAPEND                 We did it, get out.
ZAPILOC  DS    0H                     Do the change in the old place.
         MVC   XPRM_WARN2-4(4),OUTLMBIN In Key 0, substitute new value.
         B     ZAPEND                 We did it, get out.
ZAPIEND  DS    0H
ZAPEND   DS    0H                     Return to normalcy.
* -
         DROP  R3
NZ       MODESET KEY=NZERO
* -- >      Back to ordinary life ----
         ST    R9,SAVER9A             Save BAL register
         BAL   R9,CHANGED             Tell em we changed the values.
         L     R9,SAVER9A             Restor BAL register
EOJ0     XR    R15,R15                Return code = 0
EOJ      DS    0H                     End of job.
         LR    R1,R13                 Get ready to free our savearea
         L     R13,4(,R13)            Get caller's savearea back
         ST    R15,16(,R13)           Put RC into passed save area
         L     R14,12(,R13)           Get return address
         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000
         LM    R0,R12,20(R13)         Get caller's other registers
         BR    R14                    And go back to caller
EOJ4     DS    0H                  SET CC = 4.
         BAL   R9,PGMTITLE         Display program title in all cases
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAG13       Show Return Code 4
         APUT  LINE,L'MESSAG13
         L     R15,FULLFOUR        Move in Return Code
         B     EOJ                 Now end the program
EOJ8     DS    0H                  SET CC = 8.
         BAL   R9,PGMTITLE         Display program title in all cases
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAG14       Show Return Code 8
         APUT  LINE,L'MESSAG14
         L     R15,FULLEIGT        Move in Return Code
         B     EOJ                 Now end the program
** ---------------------------------------------------------------- **
EOJC     DS    0H                  What if there was no parameter....
         BAL   R9,PGMTITLE         First display the program title.
         ST    R9,SAVER9A
         BAL   R9,PLEASED          Tell em to enter a numeric value
         L     R9,SAVER9A
         ST    R9,SAVER9A
         BAL   R9,FOREXMD          Say we didn't change anything.
         L     R9,SAVER9A
*                                  Then get the old value so they
*                                  know the kind of number that
*                                  should be there.
         L     R2,16               Point to CVT
         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)
         L     R2,X'4C'(,R2)       Point to TPVT
         L     R2,X'2C'(,R2)       Point to INMXPARM control block
* ---
         ST    R2,INMXADDR            Save INMXPARM address
         CLC   0(8,R2),=C'INMXPARM'   Is the INMXPARM header there?
         BNE   EOJ                    No. We've made a mistake.
         ST    R9,SAVER9A
         BAL   R9,GETSAVLM            Get previous values.
         L     R9,SAVER9A
         ST    R9,SAVER9A
         BAL   R9,GETDSPNO            Display previous numeric value.
         L     R9,SAVER9A
         ST    R9,SAVER9A
         BAL   R9,NOCHGED             Say we didn't change anything.
         L     R9,SAVER9A
         L     R15,FULLFOUR           Load Return Code.
         B     EOJ                    End the program.
** ---------------------------------------------------------------- **
NOTAUTH  DS    0H                     Command not authorized message.
         APUT  MESSAG2C,L'MESSAG2C
         APUT  MESSAG2D,L'MESSAG2D
         B     EOJ
** ---------------------------------------------------------------- **
FULLZERO DC    F'0'
FULLFOUR DC    F'4'
FULLEIGT DC    F'8'
SAVE1401 DC    5F'0'                  More for safety
* - - - - - - - - - - - - - - - - - - - - - - - - *
MOVOUTL  MVC   OUTLIMN(*-*),0(R1)     EXECUTED
TRNOUTL  TR    OUTLIMN(*-*),TRTBL0    EXECUTED
** ---------------------------------------------------------------- **
WARNCHG  DS    0H                     Process the W and I parameters
         OI    FUNCFLAG,X'01'         Tell the program W was issued.
         B     WARNLUP0               Start looking for the number.
INTVCHG  DS    0H
         OI    FUNCFLAG,X'02'         Tell the program I was issued.
         B     WARNLUP0               Start looking for the number.
WARNLUP0 DS    0H
         L     R1,CHARSTRT            Load initial position in cmdbuff
WARNLOOP DS    0H
         LA    R1,1(,R1)              Boost position of current char.
         BCTR  R5,0                   Lessen what's left in cmd buff.
WARNSETP DS    0H
         CLI   0(R1),X'40'            Is the current char a blank?
         BNE   WARNLUP1               Nope. We can check if numeric.
         CR    R8,R5                  End of command buffer ?
         BNL   EOJC                   Yes. Tell em nothing was entered
         B     WARNLOOP               Check the next char in cmd buff.
WARNLUP1 DS    0H
* - - - - - - - -  Diagnostic Print  - - - - - - - - - - - - - - - - *
*        STM   R15,R2,SAVEAPUT        Diagnostic. Display whatever R1
*        HEX   MESSDIAG,20,0(R1)       is pointing to.
*        APUT  MESSDIAG,L'MESSDIAG
*        LM    R15,R2,SAVEAPUT
* - - - - - - - -  Diagnostic Print  - - - - - - - - - - - - - - - - *
         LR    R7,R1                  Use R7 to keep track of position.
         LA    R7,0(,R7)              Point to current char in cmdbuff.
         LA    R8,0                   Start counting nonblank chars.
         LA    R6,10                  Check for 10 character parameter.
CUTIDLEX CLI   0(R7),X'40'            Is this char a blank?
         BE    AFTNEXST               If so, it's the end of the parm
         LA    R7,1(,R7)              Boost up and try the next char.
         LA    R8,1(,R8)              And count how many chars there.
         CR    R8,R5                  End of command buffer yet?
         BE    AFTNEXST               Yes. Stop before blanks or 10.
         BH    EOJC                   Nothing entered? Say so.
         BCT   R6,CUTIDLEX            Loop until 10 or end of cmd buff.
AFTNEXST DS    0H
         MVC   OUTLIMN(10),BLANKS     Blank entire field
         BCTR  R8,0                   One less for EXECUTE.
         EX    R8,MOVOUTL             Only move in significant chars.
WARNLUPE DS    0H
         B     SEEIFEND               Continue processing the number.
* - - - - - - - - - - - - - - - - - - - - - - - - *
*            S U B R O U T I N E S                *
* - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R4                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEXSAVE  DS    3F                    Register save for HEX macro
SAV4HEX  DC    F'0'
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
VERIFNUM DS    0H                  Verify that parameter was numeric
         L     R7,NUMVSTRT         Count of number of characters
         MVC   OUTLIMS,OUTLIMN     Copy translated parm to work area
         LA    R4,OUTLIMS          And point to it.
VERFLOOP DS    0H                  Check one character at a time
         CLI   0(R4),X'40'         Is it blank - i.e. not numeric?
         BE    VERFFAIL            Yes. It's before the end, so bad.
         LA    R4,1(,R4)           Bump to next character for test
         BCT   R7,VERFLOOP         BCT for length of parm
         B     VERFGOOD            All characters have passed. Verified
VERFFAIL DS    0H
         APUT  MESSAGET,L'MESSAGET    Title message
         APUT  MESSAGEU,L'MESSAGEU    Underlines
* -      *** TEST CODE FOR TPUTTING DIAGNOSTICS ***
         ST    R1,SAVER1              Save R1 before APUT
         MVI   LINE-1,X'40'           Ensure blank before LINE
         MVC   LINE,LINE-1            Blank entire line
         MVC   LINE(35),=C'Value entered for the number was:  ' Ms body
         MVC   LINE+35(10),OUTLIMO    Original parm before verification
         APUT  LINE,45                Put out the error message
         L     R1,SAVER1              Restore R1 after APUT
* -
         APUT  MESSAGE1,L'MESSAGE1
* ------------------------ >       Display old OUTLIM value.....
         L     R2,16               Point to CVT
         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)
         L     R2,X'4C'(,R2)       Point to TPVT
         L     R2,X'2C'(,R2)       Point to INMXPARM control block
* ---
         ST    R2,INMXADDR            Save INMXPARM address
         CLC   0(8,R2),=C'INMXPARM'   Is the INMXPARM header there?
         BNE   EOJ                    No. We've made a mistake.
*
         ST    R9,SAVER9A
         BAL   R9,GETSAVLM            Get previous values.
         L     R9,SAVER9A
*
         ST    R9,SAVER9A
         BAL   R9,GETDSPNO            Get previous numeric value.
         L     R9,SAVER9A
*
         ST    R9,SAVER9A
         BAL   R9,NOCHGED             Say we didn't change anything.
         L     R9,SAVER9A
* ------------------------ >
         B     EOJ
VERFGOOD DS    0H                     Verify worked, go straight here.
VERFEND  DS    0H                     End, go back to caller.
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
NOCHGED  DS    0H                     "Value not changed" message.
         TM    FUNCFLAG,X'03'
         BZ    NOCHGEDO
         TM    FUNCFLAG,X'01'
         BO    NOCHGEDW
         TM    FUNCFLAG,X'02'
         BO    NOCHGEDI
NOCHGEDW DS    0H
         APUT  MESSAG2A,L'MESSAG2A    Tell em we didn't change it.
         B     NOCHGEND
NOCHGEDI DS    0H
         APUT  MESSAG2B,L'MESSAG2B    Tell em we didn't change it.
         B     NOCHGEND
NOCHGEDO DS    0H
         APUT  MESSAGE2,L'MESSAGE2    Tell em we didn't change it.
NOCHGEND DS    0H
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
PLEASED  DS    0H                    Please supply a numeric parameter.
         TM    FUNCFLAG,X'03'
         BZ    PLEASEDO
         TM    FUNCFLAG,X'01'
         BO    PLEASEDW
         TM    FUNCFLAG,X'02'
         BO    PLEASEDI
PLEASEDW DS    0H
         APUT  MESSG11A,L'MESSG11A    Ask for a numeric operand.
         B     PLEASEND
PLEASEDI DS    0H
         APUT  MESSG11B,L'MESSG11B    Ask for a numeric operand.
         B     PLEASEND
PLEASEDO DS    0H
         APUT  MESSAG11,L'MESSAG11    Ask for a numeric operand.
PLEASEND DS    0H
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
CHANGED  DS    0H                     The "value was changed" message.
         TM    FUNCFLAG,X'03'
         BZ    CHANGEDO
         TM    FUNCFLAG,X'01'
         BO    CHANGEDW
         TM    FUNCFLAG,X'02'
         BO    CHANGEDI
CHANGEDW DS    0H
         APUT  MESSAG3A,L'MESSAG3A    Tell em we changed the value.
         B     CHANGEND
CHANGEDI DS    0H
         APUT  MESSAG3B,L'MESSAG3B    Tell em we changed the value.
         B     CHANGEND
CHANGEDO DS    0H
         APUT  MESSAGE3,L'MESSAGE3    Tell em we changed the value.
CHANGEND DS    0H
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
FOREXMD  DS    0H                     Give an example to do it right.
         TM    FUNCFLAG,X'03'
         BZ    FOREXMDO
         TM    FUNCFLAG,X'01'
         BO    FOREXMDW
         TM    FUNCFLAG,X'02'
         BO    FOREXMDI
FOREXMDW DS    0H
         APUT  MESSG12A,L'MESSG12A    Warn threshold example......
         B     FOREXMND
FOREXMDI DS    0H
         APUT  MESSG12B,L'MESSG12B    Warn interval example.......
         B     FOREXMND
FOREXMDO DS    0H
         APUT  MESSAG12,L'MESSAG12    Output limit example........
FOREXMND DS    0H
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LTORG
************************************************************
PGMTITLE DS    0H                     Display program name
         MVC   LINE,LINE-1            Blank line
         MVC   LINE,MESSAGET          Move title line in
         APUT  LINE,L'MESSAGET        And put out to tube
         MVC   LINE,LINE-1            Blank line again
         MVC   LINE,MESSAGEU          Move underlines in
         APUT  LINE,L'MESSAGEU        And put them out also
         BR    R9                     Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETSAVLM DS    0H             Get previous values of what needs change.
         L     R3,INMXADDR            Yes. Load R3 and go further.
         USING XPRM,R3
         TM    FUNCFLAG,X'03'         No function turned on, OUTLIM
         BZ    GETSAVOL
         TM    FUNCFLAG,X'01'         X'01' - must be Warn 1
         BO    GETSAVST
         TM    FUNCFLAG,X'02'         X'02' - must be Warn 2
         BO    GETSAVWI
* -- >
GETSAVST DS    0H
         TM    OLDFLAG,X'01'
         BO    GETSAVSY
         MVC   SAVLMBIN,XPRM_WARN1    Get previous value of Warn 1
         B     GETSAVEN
GETSAVSY DS    0H
         MVC   SAVLMBIN,XPRM_WARN1-4  Get previous value of Warn 1
         B     GETSAVEN
* -- >
GETSAVWI DS    0H
         TM    OLDFLAG,X'01'
         BO    GETSAVWY
         MVC   SAVLMBIN,XPRM_WARN2    Get previous value of Warn 2
         B     GETSAVEN
GETSAVWY DS    0H
         MVC   SAVLMBIN,XPRM_WARN2-4  Get previous value of Warn 2
         B     GETSAVEN
* -- >
GETSAVOL DS    0H
         TM    OLDFLAG,X'01'
         BO    GETSAVOY
         MVC   SAVLMBIN,XPRM_LIM      Get previous value of OUTLIM
         B     GETSAVEN
GETSAVOY DS    0H
         MVC   SAVLMBIN,XPRM_LIM-4    Get previous value of OUTLIM
* -- >
GETSAVEN DS    0H
         BR    R9                     Return to caller
         DROP  R3
GETSAVNO DC    F'0'
*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETDSPNO DS    0H                     Display "previous" numeric value.
         L     R5,SAVLMBIN            Load a register with saved number
         CVD   R5,CVDAREA             Convert it to packed.
         OI    CVDAREA+7,X'0F'        Fix the sign of the packed number
         MVC   OUTLIMPR(10),OLDPATT   Move in the pattern for EDIT.
         ED    OUTLIMPR(10),CVDAREA+3   EDIT to cut out leading zeros.
         MVC   LINE,LINE-1              Clear output line.
         TM    FUNCFLAG,X'03'         Test for OUTLIM change
         BZ    GETDSPNE               Display appropriate message.
         TM    FUNCFLAG,X'01'         Test for warn threshold change
         BO    GETDSPNW               Display appropriate message.
         TM    FUNCFLAG,X'02'         Test for warn interval change
         BO    GETDSPNI               Display appropriate message.
GETDSPNW DS    0H
         MVC   LINE,=CL23'Old Warn Threshold  :  '  Move in msg body.
         B     GETDSPNX
GETDSPNI DS    0H
         MVC   LINE,=CL23'Old Warn Interval   :  '  Move in msg body.
         B     GETDSPNX
GETDSPNE DS    0H
         MVC   LINE,=CL23'Old OUTLIM value is :  '  Move in msg body.
GETDSPNX DS    0H
         MVC   OUTLIMFL(3),BLANKS       Blank out the padding bytes
         MVC   LINE+23(10),OUTLIMPR   Now move in the old OUTLIM value.
         MVC   LINE+33(2),BLANKS      Ensure no garbage after message.
         APUT  LINE,33                And display the old OUTLIM.
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
BLANKS   DC    C'                                            '
MESSAGET DC    C'CINMX Command - Reset XMIT OUTPUT LIMIT in INMXPARM  '
MESSAGEU DC    C'----- -------   ----- ---- ------ ----- -- --------  '
MESSAGE1 DC    C'Parameter entered was not numeric.'
MESSAGE2 DC    C'Transrec OUTLIM value was not changed. '
MESSAG2A DC    C'Transrec WARN threshold was not changed.'
MESSAG2B DC    C'Transrec WARN interval was not changed.'
MESSAG2C DC    C'Command was not invoked APF authorized.'
MESSAG2D DC    C'Nothing was changed.  '
MESSAGE3 DC    C'Transrec OUTLIM value has been changed to the new valu+
               e.'
MESSAG3A DC    C'Transrec WARN threshold has been changed to the new va+
               lue.'
MESSAG3B DC    C'Transrec WARN interval has been changed to the new val+
               ue.'
MESSAG11 DC    C'Please supply a numeric parameter for XMIT OUTLIMIT.'
MESSG11A DC    C'Please supply a numeric parameter for XMIT Warn Thresh-
               old.'
MESSG11B DC    C'Please supply a numeric parameter for XMIT Warn Interv-
               al.'
MESSAG12 DC    C'For example:  CINMX 5000000'
MESSG12A DC    C'For example:  CINMX W 100000'
MESSG12B DC    C'For example:  CINMX I 50000'
MESSAG13 DC    C'Return Code = 4 '
MESSAG14 DC    C'Return Code = 8 '
MESSAG15 DC    C'Return Code = 0 '
MESSDIAG DC    C'                                            '
         SPACE 3
         LTORG
         SPACE 3
DATAAREA DSECT
SAVE     DS    9D
CVDAREA  DS    D                   For CVD instruction
SAVEAPUT DS    2D
SAVER1   DS    F                   Save R1 here
SAVER1A  DS    F                   Save R1 here
SAVER6   DS    F                   Save R6 here
SAVER8   DS    F                   Save R8 here
SAVER9   DS    F                   Save R9 here
SAVER9A  DS    F                   Save R9 here
CMBUFEND DS    F                   Number of bytes to end of cmd buff
OUTLMBIN DS    F                   Binary new OUTLIM value
SAVLMBIN DS    F                   Binary of previous OUTLIM value
INMXADDR DS    F                   Address of INMXPARM control block
CMBUFAD  DS    F                   Command Buffer address
CHARSTRT DS    F                   Address of first parm character
NUMVSTRT DC    X'00'               Character count of first parm
NUMCOUTL DC    X'00'               Entered first parm length
PAD01    DS    CL4                 Filler
FUNCFLAG DS    X                   Which number to change?
*              X'00'               Change the OUTLIM value
*              X'01'               Change the warning threshold
*              X'02'               Change the interval value
OLDFLAG  DS    X                   Old system detected if X'01'
PAD02    DS    CL4                 Filler
OUTLIMFX DS    CL3                 Filler
OUTLIMPR DC    CL10' '             Previous value, in display format
OUTLIMFL DS    CL3                 Filler
OUTLIMO  DC    CL10' '             Before Translation
OUTLIMN  DC    CL10' '             Original OUTLIM character
OUTLIMS  DC    CL10' '             SAVE PARM OUTLIM HERE
         DS    CL72                PADDING
         DS    0F                  ALIGN ON FULLWORD
SAVEUPT  DS    F                   SAVE for possible command use
SAVEPSCB DS    F                   SAVE for possible command use
SAVEECT  DS    F                   SAVE for possible command use
LINEB    DS    C                   LINE-1
LINE     DS    CL137               Output line area
LINET    EQU   LINE+7              Indented line
         SPACE
DATALEN  EQU   *-DATAAREA          Length of GETMAINed Data Area
CINMX    CSECT
TRTBL0   DS    0D                                                        05491
         DC    XL16'40404040404040404040404040404040'                    05492
         DC    XL16'40404040404040404040404040404040'                    05493
         DC    XL16'40404040404040404040404040404040'                    05494
         DC    XL16'40404040404040404040404040404040'                    05495
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'40404040404040404040404040404040'                    05496
         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'                    05507
         IKJXPRM
         IKJCPPL
         IKJPSCB
         CVT      LIST=YES,DSECT=YES
         IKJTSVT
* -
* -      *** TEST CODE FOR TPUTTING DIAGNOSTICS ***
*        ST    R1,SAVER1
*        MVI   LINE-1,X'40'
*        MVC   LINE,LINE-1
*        HEX   LINE,10,OUTLIMN
*        APUT  LINE,21
*        L     R1,SAVER1
* -
         END
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
