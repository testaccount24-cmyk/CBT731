//SBGOLOBU JOB ,'SAM GOLOB',CLASS=B,
//    MSGCLASS=X,NOTIFY=&SYSUID
//*
//ASM      EXEC PGM=ASMA90,REGION=2048K,
//          PARM='NODECK,OBJECT'
//SYSIN     DD *
XOR      TITLE '*** "XOR" *** TSO COMMAND PROCESSOR &SYSDATE'
***********************************************************************
* XOR                                                                 *
* ===                                                                 *
*     FUNCTION:   DISPLAYS XOR OF 8 CHARACTERS                        *
*                                                                     *
*     SYNTAX  :   XOR FLUBBER1         (input is case sensitive)      *
*                                                                     *
*                 Shorter than 8 characters are padded with blanks    *
*                                                                     *
*     OUTPUT  :                                                       *
*         text    FLUBBER1             UPPER CASE OUTPUT              *
*         hex     C6D3E4C2C2C5D9F1                                    *
*         xor     392C1B3D3D3A260E     EVERYTHING ADDS UP TO 15.      *
*                                                                     *
*         text    flubber1             LOWER CASE OUTPUT              *
*         hex     8693A482828599F1                                    *
*         xor     796C5B7D7D7A660E                                    *
*                                                                     *
*     NOTES   :                                                       *
*                                                                     *
*     1.  This program should NOT be linkedited re-entrant,           *
*         even though it looks like it could be re-entrant.           *
*                                                                     *
*     2.  It is better to execute this program from TSO READY         *
*         mode or from ISPF Option 6.  Some ISPF panels alter         *
*         the command line input automatically, and you don't         *
*         get the result that you want, if you TSO XOR.               *
*                                                                     *
*                                                                     *
***********************************************************************
*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R4,SAV4HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R4,HEX
         L     R4,SAV4HEX
         LM    R15,R1,HEXSAVE
         MEND
***********************************************************************
*     EQUATES                                                         *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8                      UNUSED
R9       EQU   9
R10      EQU   10                     BAL
R11      EQU   11                     STORAGE OBTAINED AREA
R12      EQU   12                     BASE #1
R13      EQU   13                     HIGHER SAVE-AREA
R14      EQU   14                     BAKR
R15      EQU   15                     RC
         EJECT
***********************************************************************
*     START                                                           *
***********************************************************************
XOR      CSECT
XOR      AMODE 31
XOR      RMODE ANY
         SPACE 2
         BAKR  14,0                  ESTABLISH LINKAGE-CONVENTIONS
         LR    R12,R15               LOAD TEMPORARY BASE TO MY BASE
         USING XOR,R12               TELL ASSEMBLER
         LR    R3,R1                 ESTABLISH CPPL'S  ADDRESSABILITY
GETSTOR  DS    0H
         STORAGE OBTAIN,LENGTH=LDWORK,LOC=BELOW    GET WORKING STORAGE
         LR    R11,R1                ESTABLISH DSECT'S ADDRESSABILITY
         USING DWORK,R11             TELL ASSEMBLER
         LA    R0,DWORK
         LGHI  R1,LDWORK             Clear
         LGHI  R15,0                  work
         MVCL  R0,R14                  area
INITCON  DS    0H
         MVC   INDDW(8),BLANKS       Initialize
         MVC   INDDW16(16),HEXBLNK    Output
         MVC   OUTDDW16,HEXBLNK        Fields
*
         BAL   R10,GETPARM           Do the stuff
*
ENDIT    DS    0H
         STORAGE RELEASE,LENGTH=LDWORK,ADDR=(R11)  FREE OBTAINED STOR.
         XR    R15,R15               SET RC=0
         PR                          END XOR + CLEANUP
*
***********************************************************************
*     SUBROUTINES                                                     *
***********************************************************************
*
GETPARM  DS    0H                  GET THE PARM FROM THE TERMINAL
         ST    R10,SAVE10
         STM   R1,R3,SAVE123       SAVE WORK REGISTERS
         LR    R1,R3               REPOINT R1 TO CPPL OR PARM
         LTR   R1,R1               ANY CPPL OR PARM POINTER?
         BZ    ENDPARM             B IF NOT.
         L     R2,0(,R1)           POINT TO BUFFER
         LTR   R2,R2               ANY?
         BZ    ENDPARM             B IF NOT.
         LH    R3,0(R2)            LOAD LENGTH.
         LTR   R3,R3               ANY?
         BZ    ENDPARM             B IF NOT.
         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?
         BE    DOTCP
         LA    R2,2(,R2)           POINT TO PARM.
         B     PARM
DOTCP    CH    R3,=H'4'            ANY PARM?
         BE    ENDPARM             B IF NOT.
         AH    R2,2(,R2)           POINT TO ...
         LA    R2,4(,R2)           ... PARM.
PARM     DS    0H                  CONVERT DISPLAY STCK INTO HEX
*                                  FROM 16 BYTES INTO 8 BYTES.
         MVC   INDDW(8),BLANKS
         MVC   INDDW(8),0(R2)        CREATE INPUT FIELD
* ------------------------------------------------------------------ *
TPUTIT   DS    0H                  PUT OUT THE OUTPUT
         TPUT  INDDW,8             FIRST THE ENTERED PARM
         HEX   INDDW16,8,INDDW     THEN DISPLAY IT IN HEX
         TPUT  INDDW16,16
         XC    INDDW(8),FFF        THEN OR IT WITH FF'S
         HEX   OUTDDW16,8,INDDW    GO DISPLAY THAT - THE PURPOSE
         TPUT  OUTDDW16,16
         XC    0(8,R2),0(R2)       CLEAN OUT FOR NEXT TIME
         MVC   0(8,R2),BLANKS      INITIALIZE TO BLANKS
* ------------------------------------------------------------------ *
ENDPARM  LM    R1,R3,SAVE123       RESTORE WORK REGISTERS
         L     R10,SAVE10
         BR    R10
*
***********************************************************************
HEX      DS    0H
         ST    R4,SAVER4
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         L     R4,SAVER4
         BR    R4                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
***********************************************************************
*     CONSTANTS                                                       *
***********************************************************************
*
FFF      DC    16X'FF'
BLANKS   DC    CL16' '
HEXBLNK  DC    8X'F4F0'
         LTORG
*
***********************************************************************
*     WORKING SECTION                                                 *
***********************************************************************
*
DWORK    DSECT
*
SAVER4   DS    F
SAVE10   DS    F
SAVE123  DS    3F
SAV4HEX  DC    F'0'                  Save BAL register for HEX macro
HEXSAVE  DS    3F                    Register save for HEX macro
*
INDDW    DS    XL8                   Output
INDDW16  DS    XL16                    Areas
OUTDDW   DS    XL8
OUTDDW16 DS    XL16
*
LDWORK   EQU   *-DWORK
*
         EJECT
*
         END   XOR
/*
//SYSLIB    DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.MODGEN
//SYSLIN    DD DSN=&&OBJ,UNIT=SYSDA,DISP=(NEW,PASS),
//          SPACE=(3200,(200,50)),DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80)
//SYSPRINT  DD SYSOUT=*,DCB=(RECFM=FBA,LRECL=133,BLKSIZE=3990)
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT2    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(5,3))
//*
//* =====================================================
//* ===== L I N K A G E   E D I T O R ===================
//* =====================================================
//LKED      EXEC PGM=HEWL,REGION=1024K,COND=(0,NE),
//             PARM='XREF,LIST,LET'
//SYSLMOD   DD DISP=SHR,DSN=SYS1.CBT.LINKLIB     <-- change
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(10,3))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&OBJ,DISP=(OLD,DELETE)
//          DD *
  SETSSI  CB508731
  NAME    XOR(R)
/*
