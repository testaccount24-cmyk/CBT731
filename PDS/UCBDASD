UCBDASD  TITLE 'UCBDASD - DISPLAY ONLINE DASD VOLUMES USING ULUT'
********************************************************************
*        'UCBDASD - DISPLAY ONLINE DASD USING UCB LOOKUP TABLE     *
********************************************************************
* Update Activity:
* ----------------
* 01-29-17 geop - Added code to detect if a pack is SMS managed.
*
********************************************************************
*
*        WRITTEN BY.     Sam Golob
*
*        DATE WRITTEN.   November 7, 2012.
*
*        DATE UPDATED.   December 18, 2014  by John Hamlet and
*                                              Sam Golob
*
*                        January 19, 2015   remove z/OS level
*                                           dependency
*
*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.
*                                    --- --------------
*        DESCRIPTION.
*
*            This TSO command is a quick and dirty display of
*            online DASD.  The unique thing about it, is that
*            it does not display a copy of the UCB's but it
*            displays "the real thing", and NOT a UCB copy,
*            without having to be authorized.  The way this was
*            done, was to use the ULUT, or UCB LookUp Table,
*            which is not really documented by IBM.  Since the
*            ULUT's structure can change, and it actually has
*            changed twice, using this method to look up UCB's
*            is not recommended by IBM.  But if you keep up
*            with the changes, you can keep this program
*            working.  The ULUT tells you which version it is.
*            Currently, they are called Type 1, or Type 2, or
*            Type 3.  Type 2 started with z/OS 1.7.  Type 3
*            started with z/OS 2.2, and was moved into 64-bit
*            storage.  Therefore the Type 3 ULUT has to be
*            accessed in 64-bit mode.
*
*        OUTPUT.
*
*            TSO output is via PUTLINE, so the output can
*            be trapped and displayed.
*
*        SYNTAX.
*
*            UCBDASD        (no parameters currently supported)
*
*            This program will display all online DASD.
*
*        ATTRIBUTION.
*
*            Thanks to Gilbert Saint-flour, of blessed memory,
*            for doing the necessary research, calling IBM Level 2,
*            nosing out the facts, etc.  Gilbert exposed this
*            technique, and I decided to try and write a program
*            that uses it.  You get real-time UCBs without needing
*            APF-authorization.
*
*        FURTHER REFERENCE.
*
*            Please refer to the SHOWzOS code on CBT Tape File 492
*            to see how this is done.  Search for string "ULUT".
*
*        TESTED.    ESA 5.2.2 thru z/OS 2.2 .
*
*
*        LOG OF CHANGES.
*
*        2012/11/09 - V1.1 - Display DCE-related information:
*                      number of cylinders, device type, etc.
*                      Use IOSDCXR macro to obtain the real DCE.
*
*        2012/11/11 - V1.2 - Cosmetic changes.
*
*        2012/11/13 - V1.3 - Didn't correctly find the end of the
*                            ULUT table before.  Now BCT through
*                            the count of total entries.
*
*        2012/11/14 - V1.4 - Andreas Freybier's modifications for
*                            EAV (Extended Access Volumes) with
*                            more than 65535 cylinders.
*
*        2014/12/18 - V1.5 - z/OS 2.2 modifications for ULUT
*                            version 3 which is in 64-bit storage.
*
*        2015/01/19 - V1.5 - PTF UY90741,0,2 retrofits the ULUT
*                            version 3 to z/OS 2.1 and 1.13.  Code
*                            modified not to check for z/OS level.
*                            Criterion is IOVT+8 having fullword 0,
*                            then IOVT+1B8 contains 64-bit ULUT
*                            address, and ULUT is dealt with in
*                            64-bit mode.  Otherwise ULUT is 31-bit.
*
*        2018/12/18 - V1.6 - (from George Pavlik) Add check if the
*                            DASD volume is SMS-managed.
*
********************************************************************
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
         MACRO
.*     --------------------------------------
.*     DISPLAY HEX VALUES IN CHARACTER FORMAT
.*     --------------------------------------
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R7,SAVER7A               Save area for BAL register
         STM   R15,R1,HEXSAVE           Save work registers
         LA    R1,&FROM                 Load from address
         LA    R0,&LEN                  Load number of chars to move
         LA    R15,&TO                  Load to address
         BAL   R7,HEX                   Go to routine - do the work
         LM    R15,R1,HEXSAVE           Restore work registers
         L     R7,SAVER7A               Restore BAL register
         MEND
         EJECT
* ------------------------------------------------------------------- *
         MACRO
         IOSDIOVT
IOVT     DSECT                         IOS Vector Table          ESA41
         DS    C'IOVT'
         DS    H'476'                  Length of IOVT            RS1106
         DS    XL2
IOVTUL31 DS    V(ULUT)                 UCB LOOK-UP TABLE
         DS    3F
IOVTCDA  DS    V(CDA)                  Config Data Area
         DS    1F                      ???
         DS    A                       IASC ??
         DS    A                       IOS PIN QUEUE HEADERS
         DS    A                       IOS PIN QUEUE ELEMENTS
         DS    1F                      ???
         DS    A                       TQE
         DS    6F                      ???
         DS    A                       CSC
         DS    1F                      ???
         DS    A                       IOS 31 BIT DST ENTRIES
         DS    A                       IOS 24 BIT DST ENTRIES
         DS    1F                      ???
         DS    A                       IOS UCB SERVICES PC RTN
         DS    A                       IODE
         DS    3F                      ???
         DS    A                       IOS HASH
         DS    A                       IOS UCB HASH COLISIONS
         DS    1F                      ???
         DS    A                       DDT
         DS    A                       DDT
         DS    A                       DDT
         DS    4F                      ???
         DS    A                       CAPT
         DS    2F                      ???
         DS    A                       DDT
         DS    A                       DDT
         DS    1F                      ???
         DS    A                       DDT
         DS    A                       IOS CAPTURE UCB SERVICE
         DS    A                       TRCB
         DS    2F                      ???
         DS    1F                      ???
         DS    A                       MGFQ
         DS    A                       CMVT
         DS    A                       CPCT
         DS    1F                      ???
         DS    1F                      ???
         DS    A                       IXSD
         DS    CL8'SYSIOS01'
         DS    6F                      ???
         DS    A                       QDIO
         DS    1F                      ???
         DS    A                       SAUT
         DS    4F                      ???
         DS    A                       IOS PURGE WORK AREAS
IOVTFLG1 DS    X                       IOVT-Flag
IOVTMIDAW EQU   X'08'                  MIDAW ON?
         DS    XL3                     ???
         DS    A                       CCAP
         ORG   IOVT+440                0x1B8                     JH1214
IOVTULUT DS    D                       UCB V3 look-up table      JH1214
         MEND
         EJECT
* ------------------------------------------------------------------- *
         MACRO
         IOSDULU3
ULU3     DSECT                         UCB Look-up Table
         DS    C'ULUT'
ULU3VERS DS    X                       version 3                 JH1214
         DS    AL1                     Subpool
         DS    XL2                     <filler>
         DS    F                       <filler>
         DS    F                       <filler>
ULU31ST  DS    D                       FIRST LOOK-UP ENTRY (V3)
         DS    XL2                     <filler>
         DS    XL2                     <filler>
ULU3UCBC DS    F                       Total number of LOOK-UP Entries
ULU3TAPE DS    F'064'                  number of TAPE LOOK-UP Entries
ULU3COMM DS    F'032'                  number of COMM LOOK-UP Entries
ULU3DASD DS    F'256'                  number of DASD LOOK-UP Entries
ULU3DISP DS    F'128'                  number of DISP LOOK-UP Entries
ULU3UREC DS    F'032'                  number of UREC LOOK-UP Entries
ULU3CHAR DS    F'008'                  number of CHAR LOOK-UP Entries
ULU3CTCA DS    F'016'                  number of CTCA LOOK-UP Entries
         ORG   ULU3+264
UL3ENTRY DSECT                         UCB LOOK-UP ENTRY
UL3EDEVN DS    X'000D'                 DEVICE NUMBER
UL3EFLGS DS    X'4000'                 Flags
UL3EDYN   EQU  X'40'                   Dynamic UCB
UL3ESEQN DS    XL2                     ?
         DS    XL2                     ?
UL3EUCBP DS    V(UCBOB)                UCB ADDRESS
UL3ELEN  EQU   *-UL3ENTRY
         MEND
         EJECT
* ------------------------------------------------------------------- *
         CVT   DSECT=YES,LIST=YES
         EJECT
* ------------------------------------------------------------------- *
UCBDASD  CSECT
UCBDASD  RMODE ANY
UCBDASD  AMODE 31
         USING *,R10
ENTRY0   B     BEGIN-*(,R15)            Eyecatcher.
         DC    AL1(7),CL7'UCBDASD'
         DC    CL6' V1.6 '
         DC    CL16'ULUT DASD LOOKUP'
         DC    CL16' &SYSDATE &SYSTIME '
WORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)
* ------------------------------------------------------------------- *
BEGIN    STM   R14,R12,12(R13)
         LR    R10,R15                Load base register.
         LR    R11,R1                 Save register 1.
         L     R0,WORKSIZ             Get size to be GETMAINed.
         GETMAIN R,LV=(0)
         LR    R9,R1                  Address of GETMAINed area.
         USING WORK,R9
*        XC    0(WORKINIT,R1),0(R1)   Clear work area
         XC    0(WORKLEN-200,R1),0(R1)   Clear work area (bigger one)
         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)
         XC    OSLVLSW6,OSLVLSW6      Clear image of CVTOSLV6 from CVT.
         ST    R13,4(,R9)             Old address in new save area.
         ST    R9,8(,R13)             New address in old save area.
         LR    R13,R9                 Address of savearea/workarea.
         MVI   LINE-1,X'40'           Insert blank for clearing.
         MVC   LINE(100),LINE-1       Initial clear of output line.
         LA    R15,12
         ST    R15,RETCODE            Set initial return code to 12.
         SPACE
         APUT  MESSAGET,L'MESSAGET    Display Program Title.
         APUT  MESSAGEU,L'MESSAGEU
         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.
         APUT  MESSGSUU,L'MESSGSUU
* ------------------------------------------------------------------ *
*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *
* ------------------------------------------------------------------ *
GETULUT  DS    0H                     Get the ULUT (UCB lookup table)
         L     R2,16                  CVT
         USING CVTMAP,R2
         MVC   OSLVLSW6,CVTOSLV6      Copy relevant OS level switch
         DROP  R2
         L     R3,X'7C'(,R2)          CVTIXAVL - IOCOM
         L     R3,X'D0'(,R3)          IOS Vector Table
         ST    R6,SAVER6A
         L     R6,8(,R3)              Check address at IOVT+X'8'
         LTR   R6,R6                  If zero, then 64-bit
         BNZ   GETULUN2               Not zero, then 31-bit
         B     GETULUY2               Zero, then use 64-bit address
GETULUY2 DS    0H                     64-bit mode code. Type >2.
         OI    OSLVLSW6,X'40'         Show z/OS 2.2 or UA90741,0,2
         LLGTR R3,R3                  Clear 64-bit hi-area
         LLGTR R4,R4
         LLGTR R9,R9                  <<<< ADDED >>>>
         LLGTR R10,R10                <<<< ADDED >>>>
         LLGTR R12,R12                <<<< ADDED >>>>
         LG    R4,X'1B8'(,R3)         Pick up ULUT V3 address
         SAM64
         LGR   R3,R4                  Reload R3 with ULUT address
         B     GETULUN3
GETULUN2 DS    0H                     31-bit mode code. Type <=2.
*        L     R3,X'D0'(,R3)          IOVT
         L     R4,8(,R3)              UCB Lookup Table (ULUT)
         LR    R3,R4                  Point both regs to ULUT
GETULUN3 DS    0H
         CLC   =C'ULUT',0(R3)         Eyecatcher there?
         BNE   EXIT                   Nope. It ain't it. Out. Code 12.
* ------------------------------------------------------------------ *
         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)
         BE    ULUTTYP1               Go to beginning of table entries.
         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)
         BE    ULUTTYP2               Go to beginning of table entries.
         TM    OSLVLSW6,X'40'         Are we using 64-bit ULUT address?
         BNO   GETULEX2               ULUT Type 2 or less, 31-bit mode.
         SAM64                        Need 64-bit mode for compare.
         CLI   4(R3),X'03'            After z/OS 2.2 ?  (ULUT Type 3?)
         BE    ULUTTYP3               Go to beginning of table entries.
         SAM31                        Back to 31-bit mode.
GETULEX2 DS    0H
* ----------------------------------- Insert test for future types here
         B     EXIT                   Neither?  Get out. Code 12.
* ------------------------------------------------------------------ *
*     Get actual table entries - location varies by ULUT type....    *
*                                                                    *
*     (This seems to be why IBM doesn't document this interface.     *
*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *
*      wants to keep the user's interface standard.  But we don't    *
*      want to lose the convenience of getting a UCB scan of REAL    *
*      UCBs, in REAL TIME, without having to be APF-authorized.)     *
*                                                                    *
*     This practice appears to be relatively harmless if we only     *
*     DISPLAY the UCB and don't try to modify it.  Also, during a    *
*     configuration change, you might get a S0C4 from these          *
*     programs, but they will run fine a minute later.  They are     *
*     primarily for display only.                                    *
*                                                                    *
*     Actually, this program has been tested to work from ESA 5.2.2  *
*      through z/OS 2.2.  So it is really quite stable, so far,      *
*      as long as we code for all the current ULUT types.            *
*                                                                    *
*     Summary:                                                       *
*                                                                    *
*     The ULUT table has been changed by IBM, thus far:              *
*      Type 1:  ESA 4.x  thru z/OS 1.7                               *
*      Type 2:  z/OS 1.7 thru z/OS 2.1                               *
*      Type 3:  z/OS 2.2 ....    (table is now in 64-bit storage)    *
*               z/OS 2.1  with UA90741 applied                       *
*               z/OS 1.13 HBB7780 with UA90740 applied               *
*               z/OS 1.13 JBB778H with UA90742 and UA90740 applied   *
*                                                                    *
*     At the ULUT V.3 level the ULUT (UCB Lookup Table) has been     *
*      moved into 64-bit storage, so even to get to the beginning    *
*      of the table, in order to find out the table type, is now     *
*      different, but not too difficult.  In the (OCO) macro         *
*      IOSDIOVT, there are two pointer locations to the ULUT.        *
*      IOVT+8 is a fullword pointer.  IOVT+X'1B8' is a doubleword    *
*      pointer.  If IOVT+8 for a fullword, is zeroes, then this      *
*      shows that IOVT+X'1B8' is the valid pointer, it points to     *
*      a doubleword address, and you have to address the ULUT        *
*      in 64-bit mode.                                               *
*                                                                    *
*     One test is run.  If IOVT+8 for a fullword is zeroes, then     *
*      IOVT+X'1B8' is assumed to be valid, and flag OSLVLSW6, which  *
*      had previously been copied from CVTOSLV6 in the CVT, is       *
*      OR'ed to X'40', which would normally indicate the presence    *
*      of z/OS 2.2.  This indicates to the program that the ULUT     *
*      is in 64-bit mode, even at lower levels, with the application *
*      of PTFs UA90741, or UA90740 possibly with UA90742.            *
*                                                                    *
* ------------------------------------------------------------------ *
ULUTTYP1 L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.
         L     R4,X'10'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
         B     LOOPSET
ULUTTYP2 L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.
         L     R4,X'18'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
         B     LOOPSET
ULUTTYP3 LG    R3,X'10'(,R3)   ULUT Type 3, Addr of first table entry.
         L     R4,X'1C'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
         B     LOOPSET
* ------------------------------------------------------------------- *
LOOPSET  DS    0H              Set up loop thru all UCB's.
         TM    OSLVLSW6,X'40'  Are we using 64-bit ULUT address?
         BNO   LOOPUCB                No.
         LLGTR R5,R5           Clear 64-bit hi-area
* --------------------------- Insert displacement for future types.  *
* ------------------------------------------------------------------ *
*   ULUT table entries are 12 bytes in length. No change in format.  *
*                                                                    *
*     The first halfword is the unit number in hex.                  *
*     The second halfword consists of flags.                         *
*     The third halfword is a sequence counter number in the table.  *
*     The fourth halfword is probably unused for now.                *
*     The next fullword contains the real UCB address of the unit.   *
*                                                                    *
*     Example:                                                       *
*                                                                    *
*          0A80 4000 010D 0000 00F511D0                              *
*                                                                    *
*          unit flag coun-     real UCB                              *
*          addr      ter       address                               *
* ------------------------------------------------------------------ *
* ------------------------------------------------------------------- *
*    Main part of code. Go through all the UCB's and extract info.    *
* ------------------------------------------------------------------- *
LOOPUCB  DS    0H            Loop thru table entries, covering
*                             all of the defined UCBs.
*                            Do this for the number of table entries.
         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.
* ------------------------------------------------------------------ *
*    We will scan the ULUT knowing the total number of entries       *
*    in the table, initially pointed to by R4, and decremented.      *
* ------------------------------------------------------------------ *
         TM    OSLVLSW6,X'40'         Are we using 64-bit ULUT address?
         BNO   NSAM64                 No.
         SAM64
NSAM64   DS    0H
         L     R5,8(,R3)              Get address of this unit's UCB.
         TM    OSLVLSW6,X'40'         64-bit ULUT address?
         BNO   NSAM31B                No.
         SAM31                        For z/OS 2.2 and above, SAM31.
NSAM31B  DS    0H
         ST    R5,UCBADDRS            Save the address for reporting.
         USING UCBOB,R5               Addressability to UCB.
         TM    UCBTBYT3,UCB3DACC      Is this UCB for DASD?
         BNO   LOOPJUMP               No. Look for the next one.
         TM    UCBSTAT,UCBONLI        Is this UCB online?
         BNO   LOOPJUMP               No. Look for the next one.
*   - - - - - - - - - - - - - - - -   Get output line ready for display
         MVI   LINE-1,X'40'           Clear the output line.
         MVC   LINE,LINE-1            Start moving stuff in.
*   - - - - - - - - - - - - - - - -
*   - - - - - - - - - - - - - - - -   Begin --------------------------
*   - - - - - - - - - - - - - - - -   01-24-17 HCHC GEOP added for SMS
         TM     UCBFL5,UCBSMS         Is the VOL SMS managed?
         BNO    NONSMS                No, Skip keyword
         MVC    LINE+73(3),=CL3'YES'  Yes, Say it is SMS managed
         B      SKIPNSMS              Branch around ..
NONSMS   MVC    LINE+73(3),=CL3' '    No, put blanks
*   - - - - - - - - - - - - - - - -   End   --------------------------
*   - - - - - - - - - - - - - - - -
SKIPNSMS HEX   LINE+1,2,4(R5)         Move unit address to display.
         MVC   LINE+7(6),X'1C'(R5)    Move VOLSER to display.
         MVC   SAVEDEVT(4),X'10'(R5)  Move device type values in.
         TM    SAVEDEVT+3,X'0E'       Is this disk a 3380?
         BO    TRY3390                At least that. Test further.
         HEX   LINE+15,4,SAVEDEVT     No. Just dump the raw value in.
*                                     Example:  3030200F  for 3390
*                                               3030200E  for 3380
TRY3390  DS    0H
         TM    SAVEDEVT+3,X'01'       Is it a 3390?
         BZ    IS3380                 No. It's a 3380.
IS3390   DS    0H
         MVC   LINE+15(8),=C'3390    '  Say it's a 3390.
         B     AFTRTYPE                 And go on.
IS3380   DS    0H
         MVC   LINE+15(8),=C'3380    '  Say it's a 3380.
AFTRTYPE DS    0H                       And go on.
*   - - - - - - - - - - - - - > > >   Private?  Public?  Storage?
         TM    X'22'(R5),X'10'        Is the disk mounted PRIVATE?
         BZ    NOTPRIV                No.
         MVC   LINE+32(4),=C'PRIV'    Yes. Say so.
         B     ENDDEVTP
NOTPRIV  DS    0H
         TM    X'22'(R5),X'08'        Is the disk mounted PUBLIC?
         BZ    NOTPUBL                No.
         MVC   LINE+32(4),=C'PUBL'    Yes. Say so.
         B     ENDDEVTP
NOTPUBL  DS    0H
         TM    X'22'(R5),X'04'        Is the disk mounted STORAGE?
         BZ    ENDDEVTP               No.
         MVC   LINE+32(4),=C'STOR'    Yes. Say so.
         B     ENDDEVTP
ENDDEVTP DS    0H
         HEX   LINE+39,4,UCBADDRS     Put the UCB address in display.
*   - - - - - - - - - - - - - > > >   This unit's attributes ! ! !
         TM    X'3'(R5),X'08'         Is the unit allocated?
         BZ    NOTALLOC               No.
         MVC   LINE+49(4),=C'ALLC'    Yes. Say so.
NOTALLOC DS    0H
         TM    X'3'(R5),X'04'         Unit permanently resident?
         BZ    NOTPERM                No.
         MVC   LINE+54(4),=C'PERM'    Yes. Say so.
NOTPERM  DS    0H
         TM    X'3'(R5),X'02'         Is this unit the SYSRES volume?
         BZ    NOTSYSRS               No.
         MVC   LINE+59(3),=C'RES'     Yes. Say so.
NOTSYSRS DS    0H                     Put out display line for unit.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*          Get the DCE address. This will be the real one,          *
*           because the UCB it came from, is a real UCB.            *
*           See the documentation in the IOSDCXR macro.             *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         STM   R14,R1,IOSDCSAV        Save necessary registers.
         LR    R1,R5                  IOSDCXR needs UCB addr in R1.
         IOSDCXR
         ST    R1,DCEADDR             IOSDCXR returns DCE addr in R1.
         LM    R14,R1,IOSDCSAV        Restore saved registers.
LOOPSTRD DS    0H
         ST    R7,SAVER7B             Save R7.
         L     R7,DCEADDR             Get DCE address.
         LA    R7,X'17'(,R7)          Bump to DCEOBRDT.
         LA    R8,DEVTABLE            Load Device Table.
LOOPLUPD DS    0H
         CLI   0(R8),X'00'            End of table?
         BE    LOOPENDD               Yes. End search for type.
         CLC   0(1,R8),0(R7)          Is this a match?
         BE    LOOPPUTD               Yes. Modify device with type.
         LA    R8,3(,R8)              No. Bump up a table entry.
         B     LOOPLUPD               And try again until done.
LOOPPUTD DS    0H
         MVC   LINE+19(2),1(R8)       Move in listed device size.
LOOPENDD DS    0H
         L     R7,SAVER7B             Restore R7
         HEX   LINE+63,4,DCEADDR      Print DCE address in hex.
*  NUMBER OF CYLINDERS   -   below
         ST    R7,SAVER7C             Save R7 again.
         ST    R8,SAVER8A             Save R8 too.
         L     R7,DCEADDR             Load the stored DCE address.
         XR    R8,R8                  Clear R8.
         ICM   R8,B'0011',X'12'(R7)   Put in the complete low halfword.
*                                     DCEUDCYL                      V14
*debug*  HEX   LINE+80,2,X'12'(R7)    Move unit address to display. V14
         CLM   R8,B'0011',=X'FFFE'    ? more than 65,520 cylinders  V14
         BNE   SHOW_CYL               no, display this value        V14
*                                                                   V14
****     ICM   R8,B'1111',X'38'(R7)   get DCEHICY or                V14
         ICM   R8,B'1111',X'34'(R7)   get DCEUDCY                   V14
*                                                                   V14
SHOW_CYL DS    0H                                                   V14
         CVD   R8,CVDAREA             Convert to packed decimal.
         MVC   CYLCNT,CVDAREA+4       Store for safekeeping.
         MVC   LINE+21(9),MASK9       Move in mask.
         ED    LINE+21(9),CVDAREA+4   Print the display number.
         L     R8,SAVER8A             Restore saved R8.
         L     R7,SAVER7C             Restore saved R7.
*  NUMBER OF CYLINDERS   -   above
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                                     Now put out the output info.  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         APUT  LINE,90
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
LOOPJUMP DS    0H                     For z/OS 2.2 and above, SAM64.
         TM    OSLVLSW6,X'40'             64-bit ULUT?
         BNO   NSAM31A                No.
         SAM64
NSAM31A  DS    0H
         LA    R3,X'C'(,R3)           Go to next ULUT entry
         BCT   R4,LOOPUCB             And loop until we've scanned
*
* ---- At end of ULUT, fall thru to here.
*
         TM    OSLVLSW6,X'40'         Do we have a 64-bit ULUT address?
         BNO   NSAM31                 No.
         SAM31                        For 64-bit, SAM31.
NSAM31   DS    0H
         B     EXIT0
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  end of loop - go through all the UCBs until you're done.         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         DROP  R5
EXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.
EXIT     L     R2,RETCODE             Load register with return code.
         LR    R1,R13                 Point to address to FREEMAIN.
         L     R0,WORKSIZ             Length to FREEMAIN.
         L     R13,4(,R13)            Restore original R13.
         FREEMAIN R,A=(1),LV=(0)
         DROP  R9
         LR    R15,R2                 Load real return code.
         LM    R0,R12,20(R13)         Restore rest of registers.
         L     R14,12(,R13)
         BR    R14                    And get out of the program.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                     S U B R O U T I N E S                         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     Subroutine to display HEX values as character.                *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      MVC   1(1,R15),0(R1)         Move byte
         UNPK  0(3,R15),1(2,R15)      Unpack
         TR    0(2,R15),HEXTAB-240    Translate
         LA    R15,2(,R15)            Increment output pointer
         LA    R1,1(,R1)              Increment input pointer
         BCT   R0,HEX                 Decrement length, then loop
         MVI   0(R15),C' '            Blank the trailing byte
         BR    R7                     Return to caller
HEXTAB   DC    C'0123456789ABCDEF'    Translate table
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                       C O N S T A N T S                           *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LTORG
MESSAGET DC    C'              UCBDASD - V1.6 - DISPLAY ONLINE DASD'
MESSAGEU DC    C'              -------   ----   ------- ------ ----'
MESSGSUB DC    C' Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attrx
               ibs  Res DCE Addr  SMS'
MESSGSUU DC    C' ----  ------  ------ --------  -----  --------   ----X
               ---  --- --------  ---'
MASK7    DC    XL7'40202020202120'     Mask for no of cyls display
MASK9    DC    XL9'402020202020202120' Mask for no of cyls display
DEVTABLE DS    0D                      Device type as listed in DCE
         DC    X'0E',C'A '             DCEOBRDT      3380/3390
         DC    X'1E',C'D '             DCEOBRDT      3380/3390
         DC    X'21',C'J '             DCEOBRDT      3380/3390
         DC    X'23',C'K '             DCEOBRDT      3380/3390
         DC    X'2E',C'E '             DCEOBRDT      3380/3390
         DC    X'26',C'-1'             DCEOBRDT      3380/3390
         DC    X'27',C'-2'             DCEOBRDT      3380/3390
         DC    X'24',C'-3'             DCEOBRDT      3380/3390
         DC    X'32',C'-9'             DCEOBRDT      3380/3390
         DC    X'3E',C'-A'             DCEOBRDT      3380/3390
         DC    AL1(00),H'0'            End of table
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                       W O R K   A R E A                         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         DC    0D'0'                  Align for GETMAIN
WORK     DSECT
         DS    18F                    Save Area
CVDAREA  DS    D                      CVD work area
RETCODE  DS    F                      Return Code
UCBADDRS DS    F                      Copy UCB address here for display
DCEADDR  DS    F                      Saved address of DCE
HEXSAVE  DS    3F                     For HEX routine - save regs
IOSDCSAV DS    4F                     IOSDCXR register save area
SAVER6A  DS    F                      Save R6
SAVER7A  DS    F                      Save R7 during BAL
SAVER7B  DS    F                      Save R7
SAVER7C  DS    F                      Save R7
SAVER8A  DS    F                      Save R8
SAVEDEVT DS    F                      Copy raw UCB device type value
TOTCOUNT DS    F                      Total number of ULUT entries
TESTCNT  DS    F                      Test this number as they decrease
CYLCNT   DS    PL4                    Saved cyliner count (not used)
OSLVLSW6 DS    X                      z/OS 2.2 or above?
HBB77A0  EQU   OSLVLSW6,64            X'40'
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*   With the ULUT technique, you don't need to have a work area   *
*    for the UCBs to be copied into.                              *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         DS    X                      Put blank here to clear line
LINE     DS    CL100                  Display line
WORKINIT EQU   *-WORK
         DS    0D                     Align for GETMAIN
WORKLEN  EQU   *-WORK
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
UCB      DSECT
         IEFUCBOB
         IECDIOCM
         IOSDIOVT
         IOSDULU3
         YREGS
         END   ENTRY0
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         EJECT
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
