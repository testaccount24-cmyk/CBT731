ULUONLN  TITLE 'ULUONLN - DISPLAY ONLINE DASD VOLUMES USING ULUT'
********************************************************************
*        'ULUONLN - DISPLAY ONLINE DASD USING UCB LOOKUP TABLE     *
********************************************************************
*
*        WRITTEN BY.     Sam Golob
*
*        DATE WRITTEN.   December 12, 2012.
*
*        DATE UPDATED.   January 26, 2015.
*                        June 21, 2024
*
*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.
*                                    --- --------------
*            This program was adapted from the UCBDASD program,
*            to use the ULUINIT and ULUSCAN macros that simplify
*            the 64-bit coding to access the UCB Lookup Table.
*
*        DESCRIPTION.
*
*            This TSO command is a quick and dirty display of
*            online units.  The unique thing about it, is that
*            it does not display a copy of the UCB's but it
*            displays "the real thing", and NOT a UCB copy,
*            without having to be authorized.  The way this was
*            done, was to use the ULUT, or UCB LookUp Table,
*            which is not really documented by IBM.  Since the
*            ULUT's structure and location can change, and it
*            actually has changed twice, using this method to
*            look up UCB's is not recommended by IBM.  But if
*            you keep up with the changes, you can keep this
*            program working.  The ULUT tells you which version
*            it is.  Currently, they are called Type 1, Type 2,
*            or Type 3.
*
*        OUTPUT.
*
*            TSO output is via PUTLINE, so the output can
*            be trapped and displayed.
*
*        SYNTAX.
*
*            ULUONLN        (no parameters currently supported)
*
*            This program will display all online DASD.
*
*        ATTRIBUTION.
*
*            Thanks to Gilbert Saint-flour, of blessed memory,
*            for doing the necessary research, calling IBM Level 2,
*            nosing out the facts, etc.  Gilbert exposed this
*            technique, and I decided to try and write a program
*            that uses it.  You get real-time UCBs without needing
*            APF-authorization.
*
*        FURTHER REFERENCE.
*
*            Please refer to the SHOWzOS code on CBT Tape File 492
*            to see how this is done.  Search for string "ULUT".
*
*        TESTED.    z/OS 1.2 thru z/OS 2.5 .
*
*
*        LOG OF CHANGES.
*
*        2012/11/09 - V1.1 - Display DCE-related information:
*                      number of cylinders, device type, etc.
*                      Use IOSDCXR macro to obtain the real DCE.
*                      (Display is only for DASD devices.)
*
*        2012/11/11 - V1.2 - Cosmetic changes.
*
*        2012/11/13 - V1.3 - Didn't correctly find the end of the
*                            ULUT table before.  Now BCT through
*                            the count of total entries.
*
*        2012/11/14 - V1.4 - Andreas Freybier's modifications for
*                            EAV (Extended Access Volumes) with
*                            more than 65535 cylinders.
*
*        2012/12/12 - V1.5 - Use ULUINIT and ULUSCAN macros.
*
*        2015/01/26 - V1.6 - ULUT Type 3 64-bit support.
*
*        2018/12/18 - V1.7 - (from George Pavlik) Add check if the
*                            DASD volume is SMS-managed.
*
*        2024/06/21 - V1.8 - Adapt to show all online devices.
*
********************************************************************
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
         MACRO
.*     --------------------------------------
.*     DISPLAY HEX VALUES IN CHARACTER FORMAT
.*     --------------------------------------
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R7,SAVER7A               Save area for BAL register
         STM   R15,R1,HEXSAVE           Save work registers
         LA    R1,&FROM                 Load from address
         LA    R0,&LEN                  Load number of chars to move
         LA    R15,&TO                  Load to address
         BAL   R7,HEX                   Go to routine - do the work
         LM    R15,R1,HEXSAVE           Restore work registers
         L     R7,SAVER7A               Restore BAL register
         MEND
* ------------------------------------------------------------------- *
ULUONLN  CSECT
ULUONLN  RMODE ANY
ULUONLN  AMODE 31
         USING *,R10,R12
ENTRY0   B     BEGIN-*(,R15)            Eyecatcher.
         DC    AL1(7),CL7'ULUONLN'
         DC    CL6' V1.8 '
         DC    CL16'ULUT DASD LOOKUP'
         DC    CL16' &SYSDATE &SYSTIME '
WORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)
* ------------------------------------------------------------------- *
BEGIN    STM   R14,R12,12(R13)
         LR    R10,R15                Load base register.
         LA    R12,4095(,R10)
         LA    R12,1(,R12)
         LR    R2,R1                  Save register 1.
         L     R0,WORKSIZ             Get size to be GETMAINed.
         GETMAIN R,LV=(0)
         LR    R9,R1                  Address of GETMAINed area.
         USING WORK,R9
*        XC    0(WORKINIT,R1),0(R1)
         XC    0(WORKLEN-200,R1),0(R1)        Clear work area
         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)
         ST    R13,4(,R9)             Old address in new save area.
         ST    R9,8(,R13)             New address in old save area.
         LR    R13,R9                 Address of savearea/workarea.
         MVI   LINE-1,X'40'           Insert blank for clearing.
         MVC   LINE(100),LINE-1       Initial clear of output line.
         MVI   BLANKS-1,X'40'
         MVC   BLANKS(L'BLANKS),BLANKS-1
         LA    R15,12
         ST    R15,RETCODE            Set initial return code to 12.
         SPACE
         APUT  MESSAGET,L'MESSAGET    Display Program Title.
         APUT  MESSAGEU,L'MESSAGEU
         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.
         APUT  MESSGSUU,L'MESSGSUU
* ------------------------------------------------------------------ *
*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *
* ------------------------------------------------------------------ *
* ------------------------------------------------------------------- *
* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *
* ------------------------------------------------------------------- *
         LLGTR R10,R10                Clear bit 32 from base register
         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6
* ------------------------------------------------------------------ *
*   ULUT table entries are 12 bytes in length. No change in format.  *
*                                                                    *
*     The first halfword is the unit number in hex.                  *
*     The second halfword consists of flags.                         *
*     The third halfword is a sequence counter number in the table.  *
*     The fourth halfword is probably unused for now.                *
*     The next fullword contains the real UCB address of the unit.   *
*                                                                    *
*     Example:                                                       *
*                                                                    *
*          0A80 4000 010D 0000 00F511D0                              *
*                                                                    *
*          unit flag coun-     real UCB                              *
*          addr      ter       address                               *
* ------------------------------------------------------------------ *
LOOPUCB  DS    0H
* ------------------------------------------------------------------- *
* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *
* ------------------------------------------------------------------- *
         ULUSCAN WR1=R3,UCBR=R5,BREG=R6
* ------------------------------------------------------------------ *
*    We will scan the ULUT knowing the total number of entries       *
*    in the table, initially pointed to by R4, and decremented.      *
* ------------------------------------------------------------------ *
         L     R5,ULUDUCBA            Get real UCB address for unit.
         ST    R7,SAVER7D
         LA    R7,X'10'(,R5)
         ST    R7,UNITTYPE
         L     R7,SAVER7D
         ST    R5,UCBADDR
         TM    ULUDONLF,X'80'         Is this UCB online?
         BNO   LOOPJUMP               No. Look for the next one.
*   - - - - - - - - - - - - - - - -   Get output line ready for display
         MVI   LINE-1,X'40'           Clear the output line.
         MVC   LINE,LINE-1
*   - - - - - - - - - - - - - - - -   Start moving stuff in.
*   - - - - - - - - - - - - - - - -   Begin --------------------------
*   - - - - - - - - - - - - - - - -   01-24-17 HCHC GEOP added for SMS
         USING  UCBOB,R5              Addressability to UCB.
         TM     UCBFL5,UCBSMS         Is the VOL SMS managed?
         BNO    NONSMS                No, Skip keyword
         MVC    LINE+73(3),=CL3'YES'  Yes, Say it is SMS managed
         B      SKIPNSMS              Branch around ..
NONSMS   MVC    LINE+73(3),=CL3' '    No, put blanks
*   - - - - - - - - - - - - - - - -   End   --------------------------
*   - - - - - - - - - - - - - - - -
SKIPNSMS HEX   LINE+1,2,ULUDDEVA      Move unit address to display.
         MVC   LINE+7(6),X'1C'(R5)    Move VOLSER to display.
         CLI   ULUDDEVT,X'30'
         BE    SKIPVOL
         MVC   LINE+7(6),BLANKS
         MVC   LINE+25(11),BLANKS
SKIPVOL  DS    0H
         CLI   ULUDDEVT,X'30'         Not a disk?
         BE    SKIPVOLX               Just put in device type code
         HEX   LINE+15,4,ULUDDEVT     No. Just dump the raw value in.
         MVC   LINE+25(11),BLANKS
         ST    R7,SAVER7D
         L     R7,UNITTYPE
         HEX   LINE+15,4,0(R7)
         L     R7,SAVER7D
         B     SKIPVOLX
         CLI   ULUDDEVT,X'10'         Communication device?
         BNE   SKIPVOLX               Just put in device type code
         HEX   LINE+15,4,ULUDDEVT     No. Just dump the raw value in.
SKIPVOLX DS    0H
         TM    ULUDDEVT+3,X'0E'       Is this disk a 3380?
         BO    TRY3390                At least that. Test further.
         TM    ULUDDEVT+2,X'80'
         MVC   LINE+15(4),=C'TAPE    '
         BO    ENDDEVTP
*                                     Example:  3030200F  for 3390
*                                               3030200E  for 3380
TRY3390  DS    0H
         TM    ULUDDEVT+3,X'01'       Is it a 3390?
         BZ    IS3380                 No. It's a 3380.
IS3390   DS    0H
         MVC   LINE+15(4),=C'3390    '  Say it's a 3390.
         B     AFTRTYPE                 And go on.
IS3380   DS    0H
         MVC   LINE+15(4),=C'3380    '  Say it's a 3380.
AFTRTYPE DS    0H                       And go on.
         CLI   ULUDDEVT,X'30'
         BE    AFTRTYPX
         ST    R7,SAVER7D
         L     R7,UNITTYPE
         HEX   LINE+15,4,0(R7)
         L     R7,SAVER7D
         B     AFTRTYPY
AFTRTYPX DS    0H
         MVC   LINE+21(2),BLANKS
AFTRTYPY DS    0H
*   - - - - - - - - - - - - - > > >   Private?  Public?  Storage?
         TM    X'22'(R5),X'10'        Is the disk mounted PRIVATE?
         BZ    NOTPRIV                No.
         MVC   LINE+32(4),=C'PRIV'    Yes. Say so.
         B     ENDDEVTP
NOTPRIV  DS    0H
         TM    X'22'(R5),X'08'        Is the disk mounted PUBLIC?
         BZ    NOTPUBL                No.
         MVC   LINE+32(4),=C'PUBL'    Yes. Say so.
         B     ENDDEVTP
NOTPUBL  DS    0H
         TM    X'22'(R5),X'04'        Is the disk mounted STORAGE?
         BZ    ENDDEVTP               No.
         MVC   LINE+32(4),=C'STOR'    Yes. Say so.
         B     ENDDEVTP
ENDDEVTP DS    0H
         HEX   LINE+39,4,ULUDUCBA     Put the UCB address in display.
*   - - - - - - - - - - - - - > > >   This unit's attributes ! ! !
         TM    X'3'(R5),X'08'         Is the unit allocated?
         BZ    NOTALLOC               No.
         MVC   LINE+49(4),=C'ALLC'    Yes. Say so.
NOTALLOC DS    0H
         TM    X'3'(R5),X'04'         Unit permanently resident?
         BZ    NOTPERM                No.
         MVC   LINE+54(4),=C'PERM'    Yes. Say so.
NOTPERM  DS    0H
         TM    X'3'(R5),X'02'         Is this unit the SYSRES volume?
         BZ    NOTSYSRS               No.
         MVC   LINE+59(3),=C'RES'     Yes. Say so.
NOTSYSRS DS    0H                     Put out display line for unit.
*   - - - - - - - - - - - - - > > >   This unit's device type! ! !
*   - - - - - - - - - - - - - > > >   This unit's device type! ! !
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*          Get the DCE address. This will be the real one,          *
*           because the UCB it came from, is a real UCB.            *
*           See the documentation in the IOSDCXR macro.             *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         STM   R14,R1,IOSDCSAV        Save necessary registers.
         LR    R1,R5                  IOSDCXR needs UCB addr in R1.
         IOSDCXR
         ST    R1,DCEADDR             IOSDCXR returns DCE addr in R1.
         LM    R14,R1,IOSDCSAV        Restore saved registers.
LOOPSTRD DS    0H
         ST    R7,SAVER7B             Save R7.
         L     R7,DCEADDR             Get DCE address.
         LTR   R7,R7
         BNZ   LOOPNODK
         MVC   LINE+49(13),BLANKS
LOOPNODK DS    0H
         LA    R7,X'17'(,R7)          Bump to DCEOBRDT.
         LA    R11,DEVTABLE           Load Device Table.
LOOPLUPD DS    0H
         CLI   0(R11),X'00'           End of table?
         BE    LOOPENDD               Yes. End search for type.
         CLC   0(1,R11),0(R7)         Is this a match?
         BE    LOOPPUTD               Yes. Modify device with type.
         LA    R11,3(,R11)            No. Bump up a table entry.
         B     LOOPLUPD               And try again until done.
LOOPPUTD DS    0H
         MVC   LINE+19(2),1(R11)      Move in listed device size.
LOOPENDD DS    0H
         L     R7,SAVER7B             Restore R7
         CLC   DCEADDR,=F'0'
         BNE   LOOPHOXY
         L     R5,UCBADDR
         HEX   LINE+15,4,X'10'(,R5)
LOOPHOXY DS    0H
         HEX   LINE+63,4,DCEADDR      Print DCE address in hex.
*  NUMBER OF CYLINDERS   -   below
         ST    R7,SAVER7C             Save R7 again.
         ST    R11,SAVER11A           Save R11 too.
         L     R7,DCEADDR             Load the stored DCE address.
         XR    R11,R11                Clear R11.
         ICM   R11,B'0011',X'12'(R7)  Put in the complete low halfword.
*                                     DCEUDCYL                      V14
*debug*  HEX   LINE+80,2,X'12'(R7)    Move unit address to display. V14
         CLM   R11,B'0011',=X'FFFE'   ? more than 65,520 cylinders  V14
         BNE   SHOW_CYL               no, display this value        V14
*                                                                   V14
****     ICM   R11,B'1111',X'38'(R7)  get DCEHICY or                V14
         ICM   R11,B'1111',X'34'(R7)  get DCEUDCY                   V14
*                                                                   V14
SHOW_CYL DS    0H                                                   V14
         CVD   R11,CVDAREA            Convert to packed decimal.
         MVC   CYLCNT,CVDAREA+4       Store for safekeeping.
         MVC   LINE+23(9),MASK9       Move in mask.
         ED    LINE+23(9),CVDAREA+4   Print the display number.
         CLI   ULUDDEVT,X'30'         Disk pack?
         BE    SKIPCYLS               Yes. Show info
         MVC   LINE+25(11),BLANKS     No. Blank info
SKIPCYLS DS    0H
         L     R11,SAVER11A           Restore saved R11.
         L     R7,SAVER7C             Restore saved R7.
*  NUMBER OF CYLINDERS   -   above
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                                     Now put out the output info.  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         APUT  LINE,90
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
LOOPJUMP DS    0H
         MVC   ULUDCURR,ULUDNEXT      Go to next ULUT entry
         BCT   R6,LOOPUCB             And loop until we've scanned
*                                      all of the table entries.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  end of loop - go through all the UCBs until you're done.         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
EXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.
EXIT     L     R2,RETCODE
         LR    R1,R13                 Point to address to FREEMAIN.
         L     R0,WORKSIZ             Length to FREEMAIN.
         L     R13,4(,R13)            Restore original R13.
         FREEMAIN R,A=(1),LV=(0)
*        DROP  R9
         LR    R15,R2                 Load real return code.
         LM    R0,R12,20(R13)         Restore rest of registers.
         L     R14,12(,R13)
         BR    R14                    And get out of the program.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                     S U B R O U T I N E S                         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     Subroutine to display HEX values as character.                *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      MVC   1(1,R15),0(R1)         Move byte
         UNPK  0(3,R15),1(2,R15)      Unpack
         TR    0(2,R15),HEXTAB-240    Translate
         LA    R15,2(,R15)            Increment output pointer
         LA    R1,1(,R1)              Increment input pointer
         BCT   R0,HEX                 Decrement length, then loop
         MVI   0(R15),C' '            Blank the trailing byte
         BR    R7                     Return to caller
HEXTAB   DC    C'0123456789ABCDEF'    Translate table
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                       C O N S T A N T S                           *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LTORG
MESSAGET DC    C'              ULUONLN - V1.8 - DISPLAY ONLINE DEVICES'
MESSAGEU DC    C'              -------   ----   ------- ------ -------'
MESSGSUB DC    C' Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attrx
               ibs  Res DCE Addr  SMS'
MESSGSUU DC    C' ----  ------  ------ --------  -----  --------   ----X
               ---  --- --------  ---'
MASK7    DC    XL7'40202020202120'     Mask for no of cyls display
MASK9    DC    XL9'402020202020202120' Mask for no of cyls display
DEVTABLE DS    0D                      Device type as listed in DCE
         DC    X'0E',C'A '             DCEOBRDT      3380/3390
         DC    X'1E',C'D '             DCEOBRDT      3380/3390
         DC    X'21',C'J '             DCEOBRDT      3380/3390
         DC    X'23',C'K '             DCEOBRDT      3380/3390
         DC    X'2E',C'E '             DCEOBRDT      3380/3390
         DC    X'26',C'-1'             DCEOBRDT      3380/3390
         DC    X'27',C'-2'             DCEOBRDT      3380/3390
         DC    X'24',C'-3'             DCEOBRDT      3380/3390
         DC    X'32',C'-9'             DCEOBRDT      3380/3390
         DC    X'3E',C'-A'             DCEOBRDT      3380/3390
         DC    AL1(00),H'0'            End of table
TYPETABL DS    0D
         DC    X'80',C'TAPE'       Tape
         DC    X'40',C'COMM'       Communications
         DC    X'41',C'CTC '       Channel-to-channel adapter
         DC    X'20',C'    '       Direct access
         DC    X'10',C'DSPY'       Display
         DC    X'08',C'UREC'       Unit record
         DC    X'04',C'CHAR'       Character reader
         DC    AL1(00),H'0'            End of table

* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                       W O R K   A R E A                         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         DC    0D'0'                  Align for GETMAIN
WORK     DSECT
         DS    18F                    Save Area
CVDAREA  DS    D                      CVD work area
RETCODE  DS    F                      Return Code
DCEADDR  DS    F                      Saved address of DCE
UCBADDR  DS    F                      Saved address of real UCB
HEXSAVE  DS    3F                     For HEX routine - save regs
UNITTYPE DS    F
IOSDCSAV DS    4F                     IOSDCXR register save area
SAVER7A  DS    F                      Save R7 during BAL
SAVER7B  DS    F                      Save R7
SAVER7C  DS    F                      Save R7
SAVER7D  DS    F                      Save R7
SAVER11A DS    F                      Save R11
CYLCNT   DS    PL4                    Saved cylinder count (not used)
         DS    X
BLANKS   DS    CL40
         ORG   BLANKS
BLANKS8  DS    CL8
         ORG
WORKU    DS    CL100                  64 byte workarea for ULUDSECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*   With the ULUT technique, you don't need to have a work area   *
*    for the UCBs to be copied into.                              *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         DS    X                      Put blank here to clear line
LINE     DS    CL100                  Display line
WORKINIT EQU   *-WORK
         DS    0D                     Align for GETMAIN
WORKLEN  EQU   *-WORK
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
UCB      DSECT
         IEFUCBOB
         YREGS
         END   ENTRY0
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         EJECT
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
