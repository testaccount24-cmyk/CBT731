LOGOPTS  TITLE 'Set/Display TSO Global LOGON options'
*  -----------------------------------------------------------------  *
*                                                                     *
*    Function:   To turn LOGON global settings on or off.             *
*                                                                     *
*                These are the settings which are controlled          *
*                by the LOGON keyword in the IKJTSOxx PARMLIB         *
*                member.  Which bits control which options,           *
*                are mentioned below.  Release dependency is          *
*                z/OS 1.10 or higher.                                 *
*                                                                     *
*                Two control blocks are affected:  the TSVT           *
*                (TSO Vector Table) pointed to by CVTTVT, and         *
*                the TPVT (TSO Parameters Vector Table), which        *
*                contains most of the controls specified in           *
*                the IKJTSOxx PARMLIB member.  In the TSVT,           *
*                which is mapped by macro IKJTSVT, there is a         *
*                pointer to the address of the TPVT, which is         *
*                documented internally by IBM with a PL/X macro       *
*                IKJTPVT, and which we converted to an assembler      *
*                macro that is also called IKJTPVT.                   *
*                                                                     *
*                The controls we are dealing with, comprise the       *
*                lower nibble of the two control blocks, which        *
*                must match.  In the TSVT, the upper nibble           *
*                of the appropriate byte contains other               *
*                information, but the corresponding upper nibble      *
*                in the TPVT currently contains zeros.                *
*                                                                     *
*                The lower nibble in these two fields must match:     *
*                                                                     *
*                TSVT + x'5'   TSVTFLG1                               *
*                TPVT + x'4C'  TPVTLOGON  (our terminology,           *
*                                          not IBM's, although        *
*                                          it seems logical to        *
*                                          call it by this name.)     *
*                                                                     *
*                If you want to switch these settings temporarily,    *
*                then issue this APF-authorized TSO command:          *
*                Display only, of the current settings, is done       *
*                either by not entering a parameter, or by entering   *
*                a parameter that is not S, A, H, or P.               *
*                                                                     *
*                To turn off a bit, suffix an F to the parameter:     *
*                For example:  LOGOPTS SF, AF, HF, or PF.             *
*                                                                     *
*                Bit settings are found in the TSVTFLG1 field in      *
*                the TSVT (TSO Vector Table) in the lower nibble,     *
*                and this nibble must match the corresponding         *
*                nibble in control block TPVT + X'4C'.                *
*                                                                     *
*          Bits are set as follows for the following options:         *
*                                                                     *
*          X'08' -  Password Phrase Support                           *
*          X'04' -  Applid Verification                               *
*          X'02' -  LOGONHERE Support                                 *
*          X'01' -  Password Preprompt Support                        *
*                                                                     *
*          Set/Show IKJTSOxx TSO LOGON Options                        *
*          -------- -------- --- ----- -------                        *
*           S -  Password Phrase Support                              *
*           A -  Applid Verification                                  *
*           H -  LOGONHERE Support                                    *
*           P -  Password Preprompt Support                           *
*                                                                     *
*          USE OF THIS PROGRAM:  To turn a bit on, use the            *
*                 following parms:  To turn a bit off, use            *
*                 the same letter parm, followed by the               *
*                 letter F, as described here:                        *
*                                                                     *
*                 PA   Service Activated            BIT   TO TURN     *
*                 RM                                SET   OFF         *
*                 --   -----------------            ---   -------     *
*          LOGOPTS S - Password Phrase Support     x'08'  SF - Off    *
*          LOGOPTS A - Applid Verification         x'04'  AF - Off    *
*          LOGOPTS H - LOGONHERE Support           x'02'  HF - Off    *
*          LOGOPTS P - Password Preprompt Support  x'01'  PF - Off    *
*                                                                     *
*          LOGOPTS (anything else) - to display the current setting   *
*                                    of the TSVTFLG1 and TPVTLOGON    *
*                                    bytes. (Display does not require *
*                                    APF-authorization.)              *
*                                                                     *
*    Date:       November 8, 2015                                     *
*                                                                     *
*    Technical Detail:  PUTLINE interface for TSO Output.             *
*                                                                     *
*    Requirement:   APF authorized for bit changes.                   *
*                   APF authorization not required for displays.      *
*                                                                     *
*    Release Dependencies:  Needs z/OS 1.10 or above.                 *
*                                                                     *
*    Changes:                                                         *
*                                                                     *
*      2015/12/18 - Messages included on how to make changes, to      *
*                   turn off a bit.  Implied is how to turn it on.    *
*                                                                     *
*                                                                     *
*  -----------------------------------------------------------------  *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    STM   15,1,HEXSAVE
         LA    1,&FROM
         LA    0,&LEN
         LA    15,&TO
         BAL   4,HEX
         LM    15,1,HEXSAVE
         MEND
*  -----------------------------------------------------------------  *
         MACRO
&NAME    REGS
         LCLA  &I
&I       SETA  0
.LUP     ANOP
R&I      EQU   &I
&I       SETA  &I+1
         AIF   (&I LE 15).LUP
         MEND
*  -----------------------------------------------------------------  *
*  --           Create PUTLINE environment.                       --  *
*  -----------------------------------------------------------------  *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
* --       End of Internal Macros......                            -- *
* ------------------------------------------------------------------- *
         SPACE 3
LOGOPTS  CSECT
LOGOPTS  AMODE 31
LOGOPTS  RMODE ANY
         REGS
         USING LOGOPTS,R15         (ESTABLISH TEMPORARY BASE).
         B     BEGIN               SKIP OVER HEADER.
EYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.
EYEC     DC    C' LOGOPTS - &SYSDATE - &SYSTIME '
         DC    C' --  Set/Show IKJTSOxx LOGON Options  -- '
         DC    C'   '
EYECL    EQU   *-EYEC
         DROP  R15                 (DROP TEMPORARY BASE).
BEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         LR    R12,R15             COPY BASE.
         USING LOGOPTS,R12,R10,R9  (TELL ASSEMBLER).
         LA    R10,4095(,R12)
         LA    R10,1(,R10)
         LA    R9,4095(,R10)
         LA    R9,1(,R9)
         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R13,8(,R14)         CHAIN ...
         ST    R14,SAVE+4          ... SAVE AREAS.
         SPACE 1
         LTR   R1,R1               ANY CPPL OR PARM POINTER?
         BZ    RETURN              B IF NOT.
         L     R2,0(,R1)           POINT TO BUFFER
         LTR   R2,R2               ANY?
         BZ    RETURN              B IF NOT.
         LH    R3,0(,R2)           LOAD LENGTH.
         LTR   R3,R3               ANY?
         BZ    RETURN              B IF NOT.
         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?
         BE    RLDCP
         LA    R2,2(,R2)           POINT TO PARM.
         B     PARM
RLDCP    CH    R3,=H'4'            ANY PARM?
         BE    NOPARMS             B IF NOT.
         AH    R2,2(,R2)           POINT TO ...
         LA    R2,4(,R2)           ... PARM.
PARM     OI    0(R2),C' '          UPPERCASE.
         OI    1(R2),C' '
         ST    R2,STORPARM         Store PARM address for later.
*
* --------   Parms gotten at this point.       -------- *
* --------   Are we turning bits on, or off?   -------- *
*
SETFLAGS DS    0H                  Initialize flags.
         MVI   FLAG1,X'00'         On or off flag.
         MVI   FLAG2,X'00'         Bits on flag.
         MVI   FLAG2N,X'FF'        Bits off flag.
         L     R2,STORPARM         Store address of PARM pointer.
* --->
*        MVC   OUTPUT,OUTPUT-1     Test --- Show on/off parm field.
*        HEX   OUTPUT+5,1,1(R2)    Diagnostics
*        APUT  OUTPUT,36
* --->
         OI    FLAG1,X'80'         Initialize flag to "bit on"
TURNOFF  CLI   1(R2),C'F'          F. TURN OFF?
         BNE   TURNON              No. Turn bit on.
         MVI   FLAG1,X'00'         Yes. We are turning the bit off.
*                                  MVI is not overkill.
         B     FINDDATA            Go get TSVT and TPVT.
TURNON   OI    FLAG1,X'80'         Set up for turning the bit on.
         B     FINDDATA            Go get the guts.
NOPARMS  DS    0H                  No PARM, no foul.
*
* - Parms chosen. Now get the control blocks TSVT and TPVT. - *
*
FINDDATA L     R5,X'10'            POINT TO THE CVT.
         L     R5,X'9C'(,R5)       POINT TO THE TSVT.
         ST    R5,SAVETSVT         Save its address.
         L     R5,X'4C'(,R5)       POINT TO THE TPVT.
         ST    R5,SAVETPVT         Save its address.
         CLC   =C'TPVT',0(R5)      Are we really there? Eyecatcher.
         BNE   ERRTPVT             No. Report a problem.
         L     R5,SAVETSVT         Reload TSVT address.
         CLC   =C'TSVT',0(R5)      Are we really there? Eyecatcher.
         BNE   ERRTSVT             No. Report a problem.
* -- >     Further tests for release dependency - below
         L     R6,16               Get CVT
         USING CVT,R6
         TM    CVTDCB,CVTOSEXT     Does CVTOSLVL exist?
         BZ    RELERR              No. Wrong release.
         TM    CVTOSLV5,CVTH7750   Are we at least at z/OS 1.10?
         BZ    RELERR              No. Wrong release.
         DROP  R6
* -- >     Further tests for release dependency - above
TITLEOUT DS    0H                  Display Program Title
         APUT  'Set/Show IKJTSOxx TSO LOGON Options  ',37
         APUT  '-------- -------- --- ----- -------  ',37
         APUT  ' S - Password Phrase Support     08  ',37
         APUT  ' A - Applid Verification         04  ',37
         APUT  ' H - LOGONHERE Support           02  ',37
         APUT  ' P - Password Preprompt Support  01  ',37
         APUT  TURNOFFM,L'TURNOFFM
         APUT  PARMEXMP,L'PARMEXMP
         L     R7,SAVETSVT                   Reload TSVT address
         L     R8,SAVETPVT                   Reload TPVT address
         APUT  BEFORE,L'BEFORE
         MVC   OUTPUT,OUTPUT-1               Print out the bit values
         MVC   OUTPUT+1(10),=C'TSVTFLG1 :'    before any change takes
         HEX   OUTPUT+15,1,X'5'(R7)           place.
         APUT  OUTPUT,36
         MVC   OUTPUT,OUTPUT-1
         MVC   OUTPUT+1(10),=C'TPVTLOGON:'
         HEX   OUTPUT+15,1,X'4C'(R8)
         APUT  OUTPUT,36
         MVC   OUTPUT,OUTPUT-1
** ---------------------------------------------------------------- **
* -- >       Test if this command is being run APF Authorized
         STM   R15,R1,SAVE14T1     Now save registers and test if APF
         XR    R15,R15                  authorized.
         TESTAUTH FCTN=1           Are we authorized?
         LTR   R15,R15             Test the return code.
         BNZ   NOTAUTH             Not zero, tell not authorized.
         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.
* -- >                             We're authorized. Go Key 0.
** ---------------------------------------------------------------- **
*                                  Now look for valid parms.
         MVI   FLAG2,X'00'
ISITS    CLI   0(R2),C'S'          Passphrase support?
         BNE   ISITA
         OI    FLAG2,FLAGPHRS
ISITA    CLI   0(R2),C'A'          Applid verification?
         BNE   ISITH
         OI    FLAG2,FLAGAPPL
ISITH    CLI   0(R2),C'H'          LOGONHERE support?
         BNE   ISITP
         OI    FLAG2,FLAGLGNH
ISITP    CLI   0(R2),C'P'          Password pre-prompt?
         BNE   ITISNT
         OI    FLAG2,FLAGLGPC
ITISNT   TM    FLAG2,X'0F'         Any of these present?
         BZ    GETRIDOF            No. Wipe 2nd char of PARM & leave
** ---------------------------------------------------------------- **
* ---->                      TEST BELOW    Flag display
         MVC   OUTPUT,OUTPUT-1
* -->>
         MVC   OUTPUT+19(3),=C'bit'
         CLI   FLAG1,X'00'
         BE    FLAG1OFF
         MVC   OUTPUT+9(3),=C'on '
         B     FLAG1END
FLAG1OFF DS    0H
         MVC   OUTPUT+9(3),=C'off'
FLAG1END DS    0H
* -->>
         HEX   OUTPUT+5,1,FLAG1    Display FLAG1
         HEX   OUTPUT+15,1,FLAG2   Display FLAG2
         MVC   OUTPUT+26(8),=C'*action*'
         APUT  OUTPUT,45
         MVC   OUTPUT,OUTPUT-1
* ---->                      TEST ABOVE    Flag display
** ---------------------------------------------------------------- **
ITIS     DS    0H                  Create opposite to turn off.
         MVI   FLAG2N,X'FF'        FLAG2N is complement of FLAG2.
         XC    FLAG2N(1),FLAG2
* ---->                      TEST BELOW  (Diagnostic)
*        MVC   OUTPUT,OUTPUT-1
*        HEX   OUTPUT+5,1,FLAG2N   Display FLAG2N
*        APUT  OUTPUT,36
*        MVC   OUTPUT,OUTPUT-1
* ---->                      TEST ABOVE  (Diagnostic)
** ---------------------------------------------------------------- **
*                  This section is for the Key 0 stuff.
*                  ---- ------- -- --- --- --- - -----
*
         USING TSVT,R7             Address the control blocks.
         USING TPVT,R8
         MODESET KEY=ZERO,MODE=SUP
         TM    FLAG1,FLAGCSYS
         BO    ON
         B     OFF
ON       DS    0H                  Turn bit on.
         OC    TSVT+X'5'(1),FLAG2       In
         OC    TPVT+X'4C'(1),FLAG2        both
         B     MODEOUT                      places.
OFF      DS    0H                  Turn the same bit off.
         NC    TSVT+X'5'(1),FLAG2N      In
         NC    TPVT+X'4C'(1),FLAG2N       both
MODEOUT  DS    0H                           places.
         DROP  R7,R8
         MODESET KEY=NZERO,MODE=PROB
*                                  Out of Key 0.
** ---------------------------------------------------------------- **
         APUT  AFTER,L'AFTER
         MVC   OUTPUT,OUTPUT-1                 Show the result.....
         MVC   OUTPUT+1(10),=C'TSVTFLG1 :'
         HEX   OUTPUT+15,1,X'5'(R7)
         APUT  OUTPUT,36
         MVC   OUTPUT,OUTPUT-1
         MVC   OUTPUT+1(10),=C'TPVTLOGON:'
         HEX   OUTPUT+15,1,X'4C'(R8)
         APUT  OUTPUT,36
         MVC   OUTPUT,OUTPUT-1
         LA    R2,0                Important to reinitialize 2nd parm
         L     R2,STORPARM         This should clear F if valid parm
         MVI   1(R2),X'40'         by stuffing a blank there.
         B     RETURN
** ---------------------------------------------------------------- **
GETRIDOF DS    0H                  If F following an invalid parm
         MVI   1(R2),X'40'         Blank 2nd char of parm.
         B     NOACTION
** ---------------------------------------------------------------- **
NOACTION DS    0H                  Message that no action was done.
         APUT  MESSAG5C,L'MESSAG5C
         B     RETURN
** ---------------------------------------------------------------- **
RETURN   L     R13,SAVE+4             E
         LM    R14,R12,12(R13)          X
         SR    R15,R15                    I
         BR    R14                          T
** ---------------------------------------------------------------- **
NOTAUTH  DS    0H                  Command not APF authorized message.
         APUT  MESSAG2C,L'MESSAG2C
         B     RETURN
** ---------------------------------------------------------------- **
RELERR   DS    0H                  z/OS Release is not high enough.
         APUT  MESSAG1C,L'MESSAG1C
         B     RETURN
** ---------------------------------------------------------------- **
ERRTSVT  DS    0H                  Error accessing TSVT control block
         APUT  MESSAG3C,L'MESSAG3C
         B     RETURN
** ---------------------------------------------------------------- **
ERRTPVT  DS    0H                  Error accessing TPVT control block
         APUT  MESSAG4C,L'MESSAG4C
         B     RETURN
** ---------------------------------------------------------------- **
** --         C  O  N  S  T  A  N  T  S                          -- **
** ---------------------------------------------------------------- **
MESSAG1C DC    C'LOGOPTS is only supported for z/OS 1.10 and higher.'
MESSAG2C DC    C'Command was not invoked APF authorized.'
MESSAG3C DC    C'Error accessing TSVT.'
MESSAG4C DC    C'Error accessing TPVT.'
MESSAG5C DC    C'No action performed. '
BEFORE   DC    C'Before: (low order nibbles must match)'
AFTER    DC    C'After : (low order nibbles must match)'
TURNOFFM DC    C'Parm of F after a letter turns the bit off.'
PARMEXMP DC    C'Example: LOGOPTS PF turns X''01'' off.'
SAVETSVT DC    F'0'
SAVETPVT DC    F'0'
FLAG1    DC    X'00'
FLAGCSYS EQU   B'10000000'
FLAG2    DC    X'00'
FLAGPHRS EQU   B'00001000'
FLAGAPPL EQU   B'00000100'
FLAGLGNH EQU   B'00000010'
FLAGLGPC EQU   B'00000001'
FLAG2N   DC    X'FF'
STORFLAG DC    X'00'
STORPARM DS    F
HEXSAVE  DS    3F                  SAVE FOR HEX MACRO
         DS    0D
SAVE     DS    9D                  Program Save Area
SAVE14T1 DS    2D                  Save "system-used" registers.
         DC    C' '                Blank before OUTPUT line.
OUTPUT   DC    CL80'  '            Variable output line.
         LTORG
** ---------------------------------------------------------------- **
HEX      DS    0H
         MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R4                  RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
         SPACE
         TITLE '- MAPPING MACROS.'
         CVT   DSECT=YES           Map the CVT.
         IKJTSVT                   Map the TSVT control block.
         IKJTPVT                   Map the TPVT control block.
         END   LOGOPTS
** ---------------------------------------------------------------- **
*  -----------------------------------------------------------------  *
*  --           Create PUTLINE environment.                       --  *
*  -----------------------------------------------------------------  *
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END EPUTL
