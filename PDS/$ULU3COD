UCB LOOKUP ACCESS USING THE "UCB LOOKUP TABLE" - NOTES FOR ULUT TYPE 3.

Code Samples - what you need to do.
---- -------

Access:  You access the ULUT from the CVT as follows:
------

CVT
CVTIXAVL:  CVT  +  X'7C'
IOVT Adr:  IXAVL + X'D0'
ULUT Adr:  Type 1 and Type 2  -  IOVT + X'8' points to 31-bit ULUT addr
           Type 3  -  IOVT + X'1B8' points to the 64-bit ULUT address
                      and IOVT + X'8' is a fullword of zeroes.

ULUT structure:
---- ---------

The ULUT has a header section and a table section.

Reference for each type of ULUT is in the following macros:

         IOSDULUT  -  Describes ULUT Type 1  -  31-bit mode
         IOSDULU2  -  Describes ULUT Type 2  -  31-bit mode
         IOSDULU3  -  Describes ULUT Type 3  -  64-bit mode

CODING:  Idea of coding needed to access ULUT type 3.
------

Note:

   SAM64 and SAM31 are new machine instructions: Set addressing mode...


Macros needed, from this file.

         IOSDIOVT
         IOSDULUT
         IOSDULU2
         IOSDULU3


In main code:
-- ---- ----

         XC    OSLVLSW6,OSLVLSW6      Clear holding area for CVTOSLV6.
GETULUT  DS    0H                     Get the ULUT (UCB lookup table)
         L     R2,16                  CVT
         USING CVTMAP,R2
         MVC   OSLVLSW6,CVTOSLV6      Copy relevant OS level switch
         DROP  R2
         L     R3,X'7C'(,R2)          CVTIXAVL - IOCOM
         L     R3,X'D0'(,R3)          IOS Vector Table
         ST    R6,SAVER6A             Preserve previous contents of R6
         L     R6,8(,R3)              Check address at IOVT+X'8'
         LTR   R6,R6                  If zero, then 64-bit
         BNZ   GETULUN2               Not zero, then 31-bit
         B     GETULUY2               Zero, then use 64-bit address
GETULUY2 DS    0H                     64-bit mode code. Type >2.
         OI    OSLVLSW6,X'40'         Indicate 64-bit ULUT to program
         BNO   GETULUN2               ULUT Type 2 or less, 31-bit mode.
         LLGTR R3,R3                  Clear 64-bit hi-area (hi 33 bits)
         LLGTR R4,R4                    ...
         LLGTR R9,R9                    ...
         LLGTR R10,R10                  ...
         LLGTR R12,R12                  ...
         LG    R4,X'1B8'(,R3)         Dwd ULUT V3 address at X'1B8'
         SAM64                        Set 64-bit addressing mode
         LGR   R3,R4                  Reload R3 with dwd ULUT address
         B     GETULUN3               Skip type 1 and type 2 stuff
GETULUN2 DS    0H                     31-bit mode code. Type <=2.
         L     R4,8(,R3)              31-bit UCB Lookup Table address
         LR    R3,R4                  Point both regs to ULUT
GETULUN3 DS    0H
         CLC   =C'ULUT',0(R3)         Eyecatcher there?
         SAM31                        If NE, EXIT in 31-bit mode.
         BNE   EXIT                   Nope. Not ULUT. Out. Code 12.
* ------------------------------------------------------------------ *
         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)
         BE    ULUTTYP1               Go to beginning of table entries.
         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)
         BE    ULUTTYP2               Go to beginning of table entries.
         TM    OSLVLSW6,X'40'         Is the ULUT in 64-bit mode?
         BNO   GETULEX2               No. Type 2 or less. 31-bit mode.
         SAM64                        Need 64-bit mode for compare.
         CLI   4(R3),X'03'            After z/OS 2.2 ?  (ULUT Type 3?)
         BE    ULUTTYP3               Go to beginning of table entries
*                                      and stay in 64-bit mode
         SAM31                        Back to 31-bit mode and exit.
GETULEX2 DS    0H
* ----------------------------------- Insert test for future types here
         B     EXIT                   Get out. Code 12.
* ------------------------------------------------------------------ *
*     Get actual table entries - location varies by ULUT type....    *
*                                                                    *
*     (This seems to be why IBM doesn't document this interface.     *
*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *
*      wants to keep the user's interface standard.  But we don't    *
*      want to lose the convenience of getting a UCB scan of REAL    *
*      UCBs, in REAL TIME, without having to be APF-authorized.)     *
*                                                                    *
*     This practice appears to be relatively harmless if we only     *
*     DISPLAY the UCB and don't try to modify it.  Also, during a    *
*     configuration change, you might get a S0C4 from these          *
*     programs, but they will run fine a minute later.  They are     *
*     primarily for display only.                                    *
*                                                                    *
*     Actually, this program has been tested to work from ESA 5.2.2  *
*      through z/OS 2.2.  So it is really quite stable, so far,      *
*      as long as we code for all the current ULUT types.            *
*                                                                    *
*     Summary:                                                       *
*                                                                    *
*     The ULUT table has been changed twice by IBM, thus far:        *
*      Type 1:  ESA 4.x  thru z/OS 1.7                               *
*      Type 2:  z/OS 1.7 thru z/OS 2.1                               *
*      Type 3:  z/OS 2.2 ....    (table is now in 64-bit storage)    *
*               z/OS 2.1  with UA90741 applied                       *
*               z/OS 1.13 HBB7780 with UA90740 applied               *
*               z/OS 1.13 JBB778H with UA90742 and UA90740 applied   *
*                                                                    *
*     At the ULUT V.3 level the ULUT (UCB Lookup Table) has been     *
*      moved into 64-bit storage, so even to get to the beginning    *
*      of the table, in order to find out the table type, is now     *
*      different, but not too difficult.  In the (OCO) macro         *
*      IOSDIOVT, there are two pointer locations to the ULUT.        *
*      IOVT+8 is a fullword pointer.  IOVT+X'1B8' is a doubleword    *
*      pointer.  If IOVT+8 for a fullword, is zeroes, then this      *
*      shows that IOVT+X'1B8' is the valid pointer, it points to     *
*      a doubleword address, and you have to address the ULUT        *
*      in 64-bit mode.                                               *
*                                                                    *
*     One test is run.  If IOVT+8 for a fullword is zeroes, then     *
*      IOVT+X'1B8' is assumed to be valid, and flag OSLVLSW6, which  *
*      had previously been copied from CVTOSLV6 in the CVT, is       *
*      OR'ed to X'40', which would normally indicate the presence    *
*      of z/OS 2.2.  This indicates to the program that the ULUT     *
*      is in 64-bit mode, even at lower levels, with the application *
*      of PTFs UA90741, or UA90740 possibly with UA90742.            *
*                                                                    *
* ------------------------------------------------------------------ *
ULUTTYP1 L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.
         L     R4,X'10'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
         B     LOOPSET
ULUTTYP2 L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.
         L     R4,X'18'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
         B     LOOPSET
ULUTTYP3 LG    R3,X'10'(,R3)   ULUT Type 3, Addr of first table entry.
         L     R4,X'1C'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
         B     LOOPSET
* ------------------------------------------------------------------- *
LOOPSET  DS    0H              Set up loop thru all UCB's.
         TM    OSLVLSW6,X'40'  Is system ACTUALLY z/OS 2.2 or above?
         BNO   LOOPUCB                No.
         LLGTR R5,R5           Clear 64-bit hi-area
* --------------------------- Insert displacement for future types.  *
* ------------------------------------------------------------------ *
*   ULUT table entries are 12 bytes in length. No change in format.  *
*                                                                    *
*     The first halfword is the unit number in hex.                  *
*     The second halfword consists of flags.                         *
*     The third halfword is a sequence counter number in the table.  *
*     The fourth halfword is probably unused for now.                *
*     The next fullword contains the real UCB address of the unit.   *
*                                                                    *
*     Example:                                                       *
*                                                                    *
*          0A80 4000 010D 0000 00F511D0                              *
*                                                                    *
*          unit flag coun-     real UCB                              *
*          addr      ter       address                               *
* ------------------------------------------------------------------ *
* ------------------------------------------------------------------- *
*    Main part of code. Go through all the UCB's and extract info.    *
* ------------------------------------------------------------------- *
LOOPUCB  DS    0H            Loop thru table entries, covering
*                             all of the defined UCBs.
*                            Do this for the number of table entries.
         LLGTR R4,R4         Make sure hi-order not corrupted.
         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.
* ------------------------------------------------------------------ *
*    We will scan the ULUT knowing the total number of entries       *
*    in the table, initially pointed to by R4, and decremented.      *
* ------------------------------------------------------------------ *
         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?
         BNO   NSAM64                 No.
         SAM64
NSAM64   DS    0H
         L     R5,8(,R3)              Get address of this unit's UCB.
         TM    OSLVLSW6,X'40'         Is ULUT in 64-bit mode?
         BNO   NSAM31B                No.
         SAM31                        For ULUT in 64-bit mode, SAM31.
NSAM31B  DS    0H
         ST    R5,UCBADDRS            Save the address for reporting.
         USING UCBOB,R5               Addressability to UCB.


At the end of processing each UCB, we have to switch to 64-bit mode
again, and bump to the next ULUT table entry, because we must remember
that the ULUT is in 64-bit storage, and we need SAM64 to access it.

Code example:

LOOPJUMP DS    0H                     For ULUT in 64-bit mode, SAM64.
         TM    OSLVLSW6,X'40'             Test 64-bit mode
         BNO   NSAM31A
         SAM64
NSAM31A  DS    0H
         LA    R3,X'C'(,R3)           Go to next ULUT entry
         BCT   R4,LOOPUCB             And loop until we've scanned all.
*
* ---- At end of ULUT, fall thru to here.
*
         TM    OSLVLSW6,X'40'         Is ULUT in 64-bit mode?
         BNO   NSAM31                 No.
         SAM31                        For ULUT in 64-bit mode, SAM31.
NSAM31   DS    0H
         B     EXIT0
         DROP  R5
