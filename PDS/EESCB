*   TSO COMMAND PROCESSOR TO DISPLAY THE IKJEESCB CONTROL BLOCK.
* ------------------------------------------------------------------ *
*  This command supports 3 versions of the IKJEESCB control block.   *
*                                                                    *
*    Pointers to IKJEESCB control block. TPVT documented privately.  *
*    This points to TSO individual userlogs and BRODCAST dataset     *
*      name.                                                         *
*    Three versions to date (until z/OS 1.6 at least).               *
*                                                                    *
*    v1 - ESA 5.2.2  to OS/390 1.3       IKJE1SCB                    *
*    v2 - OS/390 2.4 to z/OS 1.2         IKJE2SCB                    *
*    v3 - z/OS 1.3   and above.          IKJEESCB                    *
*                                                                    *
*    Control Block Addressability                                    *
*                                                                    *
*        L    Rn,X'10'        CVT        CVT      macro              *
*        L    Rn,X'9C'(,Rn)   TSVT       IKJTSVT  macro              *
*        L    Rn,X'4C'(,Rn)   TPVT       IKJTPVT  private macro      *
*        L    Rn,X'20'(,Rn)   EESCB      IKJEESCB macro              *
*                                                                    *
*  Needs the EESCB.MODGEN macro library to assemble.                 *
*                                                                    *
*  Note:  To remove dependence on the EPUTL routine, replace all     *
*         invocations of the APUT macro with the TPUT macro.         *
*                                                                    *
* ------------------------------------------------------------------ *
*                                                                    *
*  Change Log:                                                       *
*                                                                    *
*    2015/11/04 - Noticed that CPUID field is 4 bytes. So display    *
*     SBG         4 bytes instead of 2.                              *
*                                                                    *
*                                                                    *
*                                                                    *
*                                                                    *
*                                                                    *
* ------------------------------------------------------------------ *
*  ---------------------------------------------------------------  *
*    This macro is used to display hex values in a printed report.
*  ---------------------------------------------------------------  *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R4,SAV4HEX           Save Register 4
         STM   R15,R1,HEXSAVE       Save Registers 15 thru 1
         LA    R1,&FROM             Load the "from" register
         LA    R0,&LEN              Load the length
         LA    R15,&TO              Load the "to" register
         BAL   R4,HEX               Do the display of the hex number
         L     R4,SAV4HEX           Reload Register 4
         LM    R15,R1,HEXSAVE       Reload Registers 15 thru 1
         MEND
*  ---------------------------------------------------------------  *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
*  ---------------------------------------------------------------  *
         YREGS
EESCB    CSECT
EESCB    AMODE 31
EESCB    RMODE 24
         STM   R14,R12,12(R13)      SAVE CALLER'S REGISTERS
         USING EESCB,R12,R11,R10    SET UP BASE REGISTERS
         LR    R12,R15              Three bases for room.
         LA    R11,4095(,R12)
         LA    R11,1(,R11)
         LA    R10,4095(,R11)
         LA    R10,1(,R10)
         LR    R15,R13              Save caller's save address
         LA    R13,SAVE             Get our savearea address
         ST    R15,SAVE+4           Store his savearea into mine + 4
         ST    R13,8(,R15)          Store mine into his savearea + 8
RUNCHAIN L     R5,X'10'             CVT
         L     R5,X'9C'(,R5)        Point to TSVT
         L     R6,X'4C'(,R5)        Point to TPVT - R6
         ST    R6,SAVETPVT
         USING TPVT,R6
         L     R5,X'20'(,R6)        Point to EESCB - R5
         ST    R5,SAVEESCB          Store away the IKJEESCB address
         USING IKJEESCB,R5
DISPTITL DS    0H                   Display Report Title
         APUT  TITLIT,L'TITLIT
         APUT  TITUND,L'TITUND
         APUT  MESSG001,L'MESSG001  Display Explanation of the Program
         APUT  MESSG002,L'MESSG002
         APUT  MESSG003,L'MESSG003
         APUT  MESSG004,L'MESSG004
         APUT  MESSG005,L'MESSG005
         APUT  MESSG05A,L'MESSG05A
         APUT  MESSG05B,L'MESSG05B
         APUT  MESSG000,L'MESSG000
         APUT  MESSG05C,L'MESSG05C
         APUT  MESSG05D,L'MESSG05D
         APUT  MESSG05E,L'MESSG05E
         APUT  MESSG05F,L'MESSG05F
         APUT  MESSG000,L'MESSG000
         APUT  MESSG006,L'MESSG006
         APUT  MESSG000,L'MESSG000
         APUT  MESSG007,L'MESSG007
         APUT  MESSG07A,L'MESSG07A
         APUT  MESSG008,L'MESSG008
         APUT  MESSG009,L'MESSG009
         APUT  MESSG010,L'MESSG010
         APUT  MESSG011,L'MESSG011
         APUT  MESSG000,L'MESSG000
DISPLAY3 DS    0H                   Display for EESCB version 3
         CLI   EESCB_VERSION,X'03'           Is this EESCB version 3
         BL    D3END                         No. Try version 2.
         MVC   LITLIT(8),EESCB_IDENTIFIER    Display IKJEESCB header
         HEX   LITHEX,4,SAVEESCB             Display IKJEESCB address
         APUT  LITMSG,L'LITMSG
         HEX   VERVER,1,EESCB_VERSION        Display IKJEESCB version
         APUT  VERMSG,L'VERMSG      DISPLAY THE MESSAGE ON THE TUBE
         HEX   FLGFLG,4,EESCB_FLAGS_1        Display EESCB flag bytes
         APUT  FLGMSG,L'FLGMSG      DISPLAY THE MESSAGE ON THE TUBE
         BAL   R9,EESFLAGS                   Interpret IKJEESCB flags
         MVC   PDSPDS(44),TPVTDSNAM          PARMLIB dataset name
         APUT  PDSMSG,L'PDSMSG
         MVC   PVLPVL(6),TPVTVOLSER          PARMLIB volser
         APUT  PVLMSG,L'PVLMSG
         CLI   TPVT_MEM1,X'C9'          PARMLIB member-old location?
         BNE   D3MOVM                   No. Move from new location.
         MVC   PRMPRM(8),TPVT_MEM1      Yes. Use old location,
         B     D3MOVMB                   and go on to display it.
D3MOVM   DS    0H
         MVC   PRMPRM(8),TPVT_MEM       Move mem from new location
D3MOVMB  DS    0H
         APUT  PRMMSG,L'PRMMSG          Display PARMLIB member message
         MVC   PAGPAG(8),TPVTUSERID     Userid if PARMLIB update
*                                       **IPL** if IKJTSO set by IPL
*                                       **SET** if SET IKJTSO=xx
         APUT  PAGMSG,L'PAGMSG
         MVC   PDTPDT(10),TPVTYYMMDD    Move in update date.
         APUT  PDTMSG,L'PDTMSG
         MVC   PTMPTM(8),TPVTHHMMSS     Move in update time.
         APUT  PTMMSG,L'PTMMSG
         MVC   PSYPSY(4),TPVTSNAME      Move in system name.
         APUT  PSYMSG,L'PSYMSG
* -- >
         XR    R7,R7                    Clear register
         HEX   CPICPI,4,TPVT+X'A8'      Display CPUID
         APUT  CPIMSG,L'CPIMSG
         HEX   CPMCPM,2,TPVT+X'AC'      Display CPU model
         APUT  CPMMSG,L'CPMMSG
* -- >
         CLC   NOLOGLIT,EESCB_DATASET   TSO Userlog not used?
         BNE   D3LOGNM                  Used. Bypass "not used" message
         APUT  NOLOGMSG,L'NOLOGMSG
         B     D3GOON1                  Bypass USERLOG properties too.
D3LOGNM  DS    0H
         MVC   LDSLDS(44),EESCB_DATASET Display USERLOG dataset name
         APUT  LDSMSG,L'LDSMSG
         CLC   =C'       ',EESCB_MEMBER Is there any member name?
         BE    D3GOON0                  No. Bypass member name display
         MVC   LMBLMB(8),EESCB_MEMBER   Yes. Display member name
         APUT  LMBMSG,L'LMBMSG          Write the message.
D3GOON0  DS    0H
* ---- >
         XR    R7,R7                    Clear register
         LH    R7,EESCB_PRI_NUM         Prepare primary tracks number
         XC    DWORD,DWORD              Clear Double word for CVD
         CVD   R7,DWORD                 Convert to packed
         OI    DWORD+7,X'0F'            Make it readable
         MVC   UPRUPR-1(4),BTMPTRN      Move pattern in
         ED    UPRUPR-1(4),DWORD+6      Edit the number in
         MVI   UPRUPR-1,X'40'           Blank the beginning
         APUT  UPRMSG,L'UPRMSG          Display the message
         XR    R7,R7                    Clear register
         LH    R7,EESCB_SEC_NUM         Prepare secondary tracks number
         XC    DWORD,DWORD              Clear Double word for CVD
         CVD   R7,DWORD                 Convert to packed
         OI    DWORD+7,X'0F'            Make it readable
         MVC   USEUSE-1(4),BTMPTRN      Move pattern in
         ED    USEUSE-1(4),DWORD+6      Edit the number in
         MVI   USEUSE-1,X'40'           Blank the beginning
         APUT  USEMSG,L'USEMSG          Display the message
         CLC   =C'       ',EESCB_MEMBER Is there a member name?
         BE    D3GOON1                  No. Bypass display of dirblks.
         XR    R7,R7                    Clear register
         LH    R7,EESCB_DIR_NUM         Prepare dir blocks number
         XC    DWORD,DWORD              Clear Double word for CVD
         CVD   R7,DWORD                 Convert to packed
         OI    DWORD+7,X'0F'            Make it readable
         MVC   UDRUDR-1(4),BTMPTRN      Move pattern in
         ED    UDRUDR-1(4),DWORD+6      Edit the number in
         MVI   UDRUDR-1,X'40'           Blank the beginning
         APUT  UDRMSG,L'UDRMSG          Display the message
* ---- >
D3GOON1  DS    0H
         MVC   DSNDSN(44),EESCB_BROADCAST_DSNAME BRODCAST dataset name
         APUT  DSNMSG,L'DSNMSG                   Display it.
         MVC   VOLVOL(6),EESCB_BROADCAST_VOLSER  BRODCAST dataset volsr
         APUT  VOLMSG,L'VOLMSG                   Display it.
         MVC   UNTUNT(8),EESCB_BROADCAST_UNIT    BRODCAST dataset unit
         APUT  UNTMSG,L'UNTMSG                   Display it.
         HEX   BFLBFL,1,EESCB_BROADCAST_FLAGS    EESCB Brodcast flags
         APUT  BFLMSG,L'BFLMSG                   Display flags in hex.
         XR    R7,R7                        Clear register
         LH    R7,EESCB_BROADCAST_TIMEOUT   Prepare timeout number
         XC    DWORD,DWORD                  Clear Double word for CVD
         CVD   R7,DWORD                     Convert to packed
         OI    DWORD+7,X'0F'                Make it readable
         MVC   BTMBTM-1(4),BTMPTRN          Move pattern in
         ED    BTMBTM-1(4),DWORD+6          Edit the number in
         MVI   BTMBTM-1,X'40'               Blank the beginning
         APUT  BTMMSG,L'BTMMSG              Display the message
         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_SWITCH_PROMPT
         BZ    D3NPRMT                  Prompt for BCAST switch off, no
         MVC   BOPBOP(8),BOPYPRMP       So display that Prompt is on.
         B     D3PREND                  And go on.
D3NPRMT  DS    0H
         MVC   BOPBOP(8),BOPNPRMP       Display that Prompt is off.
D3PREND  DS    0H
         APUT  BOPMSG,L'BOPMSG          Display prompt status.
         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_SPECIFIED
         BO    D3BSSP                   BRODCAST dsname is the default?
         APUT  BCNAMEDF,L'BCNAMEDF      Yes. Display that it is default
         B     D3BVOLD                  And skip particulars.
D3BSSP   DS    0H
         MVC   BCNAMEPM(8),PRMPRM       Not default. Display so.
         APUT  BCNAMESP,L'BCNAMESP
D3BVOLD  DS    0H
         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_VOL_SPECIFIED
         BO    D3VLSP                   Volser specified in PARMLIB mem
         MVC   BCVOLDFP(8),PRMPRM       Volser not specified there
         APUT  BCVOLDF,L'BCVOLDF          in PARMLIB
         B     D3BCIPL
D3VLSP   DS    0H
         MVC   BCVOLPM(8),PRMPRM        Volser specified in PARMLIB
         APUT  BCVOLSP,L'BCVOLSP          specifically. Show that.
D3BCIPL  DS    0H
         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_IPL
         BZ    D3BCSET
         MVC   BCSETWH,DBIPL
         APUT  BCSETBY,L'BCSETBY
         B     D3SWREQ
D3BCSET  DS    0H
         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_SET
         BZ    D3BCPRM
         MVC   BCSETWH,DBSET
         APUT  BCSETBY,L'BCSETBY
         B     D3SWREQ
D3BCPRM  DS    0H
         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_PARMLIB
         BZ    D3SWREQ
         MVC   BCSETWH,DBPARM
         APUT  BCSETBY,L'BCSETBY
         B     D3SWREQ
D3SWREQ  DS    0H
         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_SWITCH_REQUIRED
         BZ    D3SWNRQ
         MVC   BCSWRVR,SWYES
         APUT  BCSWREQ,L'BCSWREQ
         B     D3BDALI
D3SWNRQ  DS    0H
         MVC   BCSWRVR,SWNO
         APUT  BCSWREQ,L'BCSWREQ
         B     D3BDALI
D3BDALI  DS    0H
         TM    EESCB_BROADCAST_FLAGS,EESCB_BROADCAST_PRIMARY_REP
         BZ    D3BDNALI
         MVC   BCDSYNO,SWYES
         APUT  BCDSALI,L'BCDSALI
         B     D3BSEND
D3BDNALI DS    0H
         MVC   BCDSYNO,SWNO
         APUT  BCDSALI,L'BCDSALI
         B     D3BSEND
D3BSEND  DS    0H                       End of display for EESCB ver 03
         DROP  R5
D3END    DS    0H                   Display for EESCB version 2
         USING IKJE2SCB,R5
         CLI   E2SCB_VERSION,X'02'
         BNE   D2END
         MVC   LITLIT(8),E2SCB_IDENTIFIER
         HEX   LITHEX,4,SAVEESCB
         APUT  LITMSG,L'LITMSG
         HEX   VERVER,1,E2SCB_VERSION
         APUT  VERMSG,L'VERMSG      DISPLAY THE MESSAGE ON THE TUBE
         HEX   FLGFLG,4,E2SCB_FLAGS_1
         APUT  FLGMSG,L'FLGMSG      DISPLAY THE MESSAGE ON THE TUBE
         BAL   R9,EESFLAGS                   Interpret IKJEESCB flags
         MVC   PDSPDS(44),TPVTDSNAM          PARMLIB dataset name
         APUT  PDSMSG,L'PDSMSG
         MVC   PVLPVL(6),TPVTVOLSER          PARMLIB volser
         APUT  PVLMSG,L'PVLMSG
         CLI   TPVT_MEM1,X'C9'
         BNE   D2MOVM
         MVC   PRMPRM(8),TPVT_MEM1
         B     D2MOVMB
D2MOVM   DS    0H
         MVC   PRMPRM(8),TPVT_MEM
D2MOVMB  DS    0H
         APUT  PRMMSG,L'PRMMSG      DISPLAY THE MESSAGE ON THE TUBE
         MVC   PAGPAG(8),TPVTUSERID     Userid if PARMLIB update
*                                       **IPL** if IKJTSO set by IPL
*                                       **SET** if SET IKJTSO=xx
         APUT  PAGMSG,L'PAGMSG
         MVC   PDTPDT(10),TPVTYYMMDD    Move in update date.
         APUT  PDTMSG,L'PDTMSG
         MVC   PTMPTM(8),TPVTHHMMSS     Move in update time.
         APUT  PTMMSG,L'PTMMSG
         MVC   PSYPSY(4),TPVTSNAME      Move in system name.
         APUT  PSYMSG,L'PSYMSG
* -- >
         XR    R7,R7                    Clear register
         HEX   CPICPI,2,TPVT+X'AA'      Display CPUID
         APUT  CPIMSG,L'CPIMSG
         HEX   CPMCPM,2,TPVT+X'AC'      Display CPU model
         APUT  CPMMSG,L'CPMMSG
* -- >
         CLC   NOLOGL01,E2SCB_DATASET
         BNE   D2LOGNM
         APUT  NOLOGMSG,L'NOLOGMSG
         B     D2GOON1
D2LOGNM  DS    0H
         MVC   LDSLDS(44),E2SCB_DATASET
         APUT  LDSMSG,L'LDSMSG      DISPLAY THE MESSAGE ON THE TUBE
         MVC   LMBLMB(8),E2SCB_MEMBER
         APUT  LMBMSG,L'LMBMSG      DISPLAY THE MESSAGE ON THE TUBE
D2GOON1  DS    0H
         DROP  R5
D2END    DS    0H                   Display for EESCB version 1
         USING IKJE1SCB,R5
         CLI   E1SCB_VERSION,X'01'
         BNE   RETURN
         MVC   LITLIT(8),E1SCB_IDENTIFIER
         HEX   LITHEX,4,SAVEESCB
         APUT  LITMSG,L'LITMSG
         HEX   VERVER,1,E1SCB_VERSION
         APUT  VERMSG,L'VERMSG      DISPLAY THE MESSAGE ON THE TUBE
         HEX   FLGFLG,4,E1SCB_FLAGS_1
         APUT  FLGMSG,L'FLGMSG      DISPLAY THE MESSAGE ON THE TUBE
         BAL   R9,EESFLAGS                   Interpret IKJEESCB flags
         CLI   TPVT_MEM1,X'C9'
         BNE   D1MOVM
         MVC   PRMPRM(8),TPVT_MEM1
         B     D1MOVMB
D1MOVM   DS    0H
         MVC   PRMPRM(8),TPVT_MEM
D1MOVMB  DS    0H
         APUT  PRMMSG,L'PRMMSG      DISPLAY THE MESSAGE ON THE TUBE
         CLC   NOLOGL01,E1SCB_DATASET
         BNE   D1LOGNM
         APUT  NOLOGMSG,L'NOLOGMSG
         B     D1GOON1
D1LOGNM  DS    0H
         MVC   LDSLDS(44),E1SCB_DATASET
         APUT  LDSMSG,L'LDSMSG      DISPLAY THE MESSAGE ON THE TUBE
         MVC   LMBLMB(8),E1SCB_MEMBER
         APUT  LMBMSG,L'LMBMSG      DISPLAY THE MESSAGE ON THE TUBE
D1GOON1  DS    0H
         DROP  R5
RETURN   DS    0H
         L     R13,SAVE+4           RELOAD CALLER'S SAVEAREA POINTER
         LM    R14,R12,12(R13)      RELOAD REGISTERS
         XR    R15,R15              ZERO RETURN CODE ALWAYS
         BR    R14                  RETURN TO CALLER
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R4                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEXSAVE  DS    3F                    Register save for HEX macro
SAV4HEX  DC    F'0'
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*               S  U  B  R  O  U  T  I  N  E  S                   *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
EESFLAGS DS    0H
         L     R5,SAVEESCB
         USING IKJEESCB,R5
*-->
         TM    EESCB_FLAGS_1,X'80'       OPERSEND
         BZ    OPERSOFF
         MVC   OPSOPS,MON
         B     OPERSEND
OPERSOFF DS    0H
         MVC   OPSOPS,MOFF
OPERSEND DS    0H
         APUT  OPSMSG,L'OPSMSG
*-->
         TM    EESCB_FLAGS_1,X'40'       USERSEND
         BZ    USERSOFF
         MVC   USSUSS,MON
         B     USERSEND
USERSOFF DS    0H
         MVC   USSUSS,MOFF
USERSEND DS    0H
         APUT  USSMSG,L'USSMSG
*-->
         TM    EESCB_FLAGS_1,X'20'       SAVE
         BZ    SAVEOFF
         MVC   SAVSAV,MON
         B     SAVEEND
SAVEOFF  DS    0H
         MVC   SAVSAV,MOFF
SAVEEND  DS    0H
         APUT  SAVMSG,L'SAVMSG
*-->
         TM    EESCB_FLAGS_1,X'10'       CHKBROD
         BZ    CHKBOFF
         MVC   CBRCBR,MON
         B     CHKBEND
CHKBOFF  DS    0H
         MVC   CBRCBR,MOFF
CHKBEND  DS    0H
         APUT  CBRMSG,L'CBRMSG
*-->
         TM    EESCB_FLAGS_1,X'08'       USEBROD
         BZ    USBROFF
         MVC   UBRUBR,MON
         B     USBREND
USBROFF  DS    0H
         MVC   UBRUBR,MOFF
USBREND  DS    0H
         APUT  UBRMSG,L'UBRMSG
*-->
         TM    EESCB_FLAGS_1,X'04'       MSGPROTECT
         BZ    MSPROFF
         MVC   MPRMPR,MON
         B     MSPREND
MSPROFF  DS    0H
         MVC   MPRMPR,MOFF
MSPREND  DS    0H
         APUT  MPRMSG,L'MPRMSG
*-->
         TM    EESCB_FLAGS_1,X'02'       SYSPLEXSHR
         BZ    SPXSOFF
         MVC   SSHSSH,MON
         B     SPXSEND
SPXSOFF  DS    0H
         MVC   SSHSSH,MOFF
SPXSEND  DS    0H
         APUT  SSHMSG,L'SSHMSG
*-->
         TM    EESCB_FLAGS_1,X'01'       SYSPLEXSHR_XCF
         BZ    SPXCOFF
         MVC   SXCSXC,MON
         B     SPXCEND
SPXCOFF  DS    0H
         MVC   SXCSXC,MOFF
SPXCEND  DS    0H
         APUT  SXCMSG,L'SXCMSG
*-->
         TM    EESCB_FLAGS_1+1,X'80'     OPERSENDWAIT
         BZ    OSWTOFF
         MVC   OSWOSW,MON
         B     OSWTEND
OSWTOFF  DS    0H
         MVC   OSWOSW,MOFF
OSWTEND  DS    0H
         APUT  OSWMSG,L'OSWMSG
*-->
         TM    EESCB_FLAGS_1+1,X'40'     SYSPLEXSHR_INI
         BZ    SXSIOFF
         MVC   SXISXI,MON
         B     SXSIEND
SXSIOFF  DS    0H
         MVC   SXISXI,MOFF
SXSIEND  DS    0H
         APUT  SXIMSG,L'SXIMSG
*-->
         TM    EESCB_FLAGS_1+1,X'20'     LOGNAME SPECIFIED
         BZ    LSPCOFF
         MVC   LSPLSP,MON
         B     LSPCEND
LSPCOFF  DS    0H
         MVC   LSPLSP,MOFF
LSPCEND  DS    0H
         APUT  LSPMSG,L'LSPMSG
*-->
         BR    R9
         LTORG
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HELPFLG  DC    X'00'
MON      DC    CL3'On '
MOFF     DC    CL3'Off'
         DS    0F
BOPYPRMP DC    CL8'Prompt  '
BOPNPRMP DC    CL8'Noprompt'
BTMPTRN  DC    X'F0202020'          4 bytes of pattern                   03283
DWORD    DC    D'0'
FWORD    DC    F'0'
WKDISP   DC    CL12' '
SAVEESCB DC    F'0'
SAVETPVT DC    F'0'
TITLIT   DC    CL47'Current PARMLIB BRODCAST information - IKJEESCB'
TITUND   DC    CL47'------- ------- -------- -----------   --------'
NOLOGL01 DC    CL44'SYS1.BRODCAST'
NOLOGLIT DC    CL44'*     '
SAVE     DC    18F'0'              MY SAVE AREA
LITMSG   DS    0CL28
LITLIT   DC    CL8' '
         DC    CL11' Address : '
LITHEX   DC    CL9' '
LDSMSG   DS    0CL63
LDSLIT   DC    CL19'USERLOG  Dataset : '
LDSLDS   DC    CL44' '
LMBMSG   DS    0CL27
LMBLIT   DC    CL19'USERLOG  Member  : '
LMBLMB   DC    CL8' '
UPRMSG   DS    0CL33
UPRLIT   DC    CL19'USERLOG  Primary : '
UPRUPR   DC    CL4' '
UPRLIT2  DC    CL10'  Tracks  '
USEMSG   DS    0CL33
USELIT   DC    CL19'USERLOG  Secndary: '
USEUSE   DC    CL4' '
USELIT2  DC    CL10'  Tracks  '
UDRMSG   DS    0CL33
UDRLIT   DC    CL19'USERLOG  Directry: '
UDRUDR   DC    CL4' '
UDRLIT2  DC    CL10'  Blocks  '
DSNMSG   DS    0CL63
DSNLIT   DC    CL19'BRODCAST Dataset : '      LINE FOR MESSAGE
DSNDSN   DC    CL44' '
VOLMSG   DS    0CL25
VOLLIT   DC    CL19'BRODCAST Volser  : '
VOLVOL   DC    CL6' '
VERMSG   DS    0CL22
VERLIT   DC    CL19'IKJEESCB Version : '
VERVER   DC    CL3' '
FLGMSG   DS    0CL28
FLGLIT   DC    CL19'IKJEESCB Flags   : '
FLGFLG   DC    CL9' '
OPSMSG   DS    0CL22
OPSLIT   DC    CL19'IKJEESCB Opersend: '
OPSOPS   DC    CL3' '
USSMSG   DS    0CL22
USSLIT   DC    CL19'IKJEESCB Usersend: '
USSUSS   DC    CL3' '
SAVMSG   DS    0CL22
SAVLIT   DC    CL19'IKJEESCB Save    : '
SAVSAV   DC    CL3' '
UBRMSG   DS    0CL22
UBRLIT   DC    CL19'IKJEESCB Usebrod : '
UBRUBR   DC    CL3' '
CBRMSG   DS    0CL22
CBRLIT   DC    CL19'IKJEESCB Chkbrod : '
CBRCBR   DC    CL3' '
MPRMSG   DS    0CL22
MPRLIT   DC    CL19'IKJEESCB Msgprot : '
MPRMPR   DC    CL3' '
SSHMSG   DS    0CL22
SSHLIT   DC    CL19'IKJEESCB Sysplxshr '
SSHSSH   DC    CL3' '
SXCMSG   DS    0CL22
SXCLIT   DC    CL19'IKJEESCB Spxshrxcf '
SXCSXC   DC    CL3' '
SXIMSG   DS    0CL22
SXILIT   DC    CL19'IKJEESCB Spxshrini '
SXISXI   DC    CL3' '
LSPMSG   DS    0CL22
LSPLIT   DC    CL19'IKJEESCB Lognmspec '
LSPLSP   DC    CL3' '
OSWMSG   DS    0CL22
OSWLIT   DC    CL19'IKJEESCB Oprsewait '
OSWOSW   DC    CL3' '
BFLMSG   DS    0CL28
BFLLIT   DC    CL19'BRODCAST Flags   : '
BFLBFL   DC    CL9' '
UNTMSG   DS    0CL27
UNTLIT   DC    CL19'BRODCAST Unit Name '
UNTUNT   DC    CL8' '
BTMMSG   DS    0CL33
BTMLIT   DC    CL19'BRODCAST Timeout : '
BTMBTM   DC    CL4' '
BTMLIT2  DC    CL10'  Seconds '
BOPMSG   DS    0CL27
BOPLIT   DC    CL19'BRODCAST Operator: '
BOPBOP   DC    CL8' '
PAGMSG   DS    0CL27
PAGLIT   DC    CL19'PARMLIB  Activator '
PAGPAG   DC    CL8' '
PRMMSG   DS    0CL27
PRMLIT   DC    CL19'PARMLIB  Member  : '
PRMPRM   DC    CL8' '
PDSMSG   DS    0CL63
PDSLIT   DC    CL19'PARMLIB  Dataset : '
PDSPDS   DC    CL44' '
PVLMSG   DS    0CL25
PVLLIT   DC    CL19'PARMLIB  Volser  : '
PVLPVL   DC    CL6' '
PDTMSG   DS    0CL29
PDTLIT   DC    CL19'PARMLIB  Swt Date: '
PDTPDT   DC    CL10' '
PTMMSG   DS    0CL27
PTMLIT   DC    CL19'PARMLIB  Swt Time: '
PTMPTM   DC    CL8' '
PSYMSG   DS    0CL23
PSYLIT   DC    CL19'PARMLIB  System  : '
PSYPSY   DC    CL4' '
CPMMSG   DS    0CL23
CPMLIT   DC    CL19'PARMLIB  CPU Model '
CPMCPM   DC    CL4' '
         DC    C' '
CPIMSG   DS    0CL27
CPILIT   DC    CL19'PARMLIB  CPUID   : '
CPICPI   DC    CL8' '
         DC    CL4' '                    PADDING
NOLOGMSG DC    CL43'This system does not write to TSO Userlogs.'
BCNAMEDF DC    CL43'The BRODCAST dataset name is the default.  '
BCVOLDF  DS    0CL49
BCVOLDFL DC    CL41'BRODCAST Dataset volser not specified in '
BCVOLDFP DC    CL8' '
BCNAMESP DS    0CL47
BCNAMELT DC    CL39'BRODCAST Dataset name was specified in '
BCNAMEPM DC    CL8'        '
BCVOLSP  DS    0CL47
BCVOLLT  DC    CL39'BRODCAST volume  name was specified in '
BCVOLPM  DC    CL8' '
BCSETBY  DS    0CL53
BCSETLT  DC    CL33'BRODCAST Dataset name was set by '
BCSETWH  DC    CL20' '
BCSWREQ  DS    0CL39
BCSWRLT  DC    CL36'BRODCAST Dataset switch required?  '
BCSWRVR  DC    CL3' '
BCDSALI  DS    0CL39
BCDSLIT  DC    CL36'BRODCAST Dataset Name is an ALIAS? '
BCDSYNO  DC    CL3' '
SWYES    DC    CL3'Yes'
SWNO     DC    CL3'No '
DBIPL    DC    CL20'System IPL'
DBSET    DC    CL20'Operator SET command'
DBPARM   DC    CL20'PARMLIB TSO command'
MESSG000 DC    CL47'  ---------------------------------------------'
MESSG001 DC    CL47'  The EESCB TSO command displays information   '
MESSG002 DC    CL47'  concerning the TSO SEND and LISTBC command   '
MESSG003 DC    CL47'  options.  Information is obtained from the   '
MESSG004 DC    CL47'  IKJEESCB and TPVT TSO control blocks, which  '
MESSG005 DC    CL47'  are chained off the TSO Vector Table IKJTSVT.'
MESSG05A DC    CL47'  BROADCAST dataset switching is only available'
MESSG05B DC    CL47'  from IKJEESCB version 03 or later.           '
MESSG05C DC    CL47'  Parmlib member IKJTSOxx can be invoked:      '
MESSG05D DC    CL47'    A - At IPL Time                            '
MESSG05E DC    CL47'    B - Under TSO using PARMLIB UPDATE(xx)     '
MESSG05F DC    CL47'    C - Using Operator command SET IKJTSO=xx   '
MESSG006 DC    CL47'  Source of EESCB messages:                    '
MESSG007 DC    CL47'    IKJEESCB - General SEND and LISTBC defaults'
MESSG07A DC    CL47'               from the IKJEESCB control block.'
MESSG008 DC    CL47'    PARMLIB  - TPVT control block              '
MESSG009 DC    CL47'    BRODCAST - BRODCAST section of IKJEESCB    '
MESSG010 DC    CL47'               which is only present from      '
MESSG011 DC    CL47'               IKJEESCB version 03 or later.   '
         IKJEESCB
         IKJE2SCB
         IKJE1SCB
         IKJTPVT
         IKJCTLT
         END
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
