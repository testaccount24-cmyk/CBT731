*     TSO COMMAND PROCESSOR TO DISPLAY SOME TSO USERID INFORMATION.
* ------------------------------------------------------------------- *
*                                                                     *
*  FUNCTION :   DISPLAY TSO USERS' LOGON TIME AND POSSIBLY            *
*               ADDITIONAL INFORMATION                                *
*                                                                     *
*  OPERATION:   APF-AUTHORIZED                                        *
*                                                                     *
*  SYNTAX   :   TSUINFO                                               *
*                                                                     *
*  DATE WRITTEN:   JUNE 27, 2021                                      *
*                                                                     *
*  METHOD OF OPERATION:  GOES THROUGH ASVT.                           *
*                        DETERMINES IF ADDRESS SPACE IS ACTIVE.       *
*                        IF ACTIVE, IS IT A TSU?                      *
*                        IF A TSU, SRB TO THE ADDRESS SPACE,          *
*                         AND, GO EXTRACT SOME INFORMATION.           *
*                        DISPLAY THE INFORMATION EXTRACTED.           *
*                                                                     *
*  OUTPUT   :   PUTLINE INTERFACE                                     *
*                                                                     *
*  CHANGES  :   10/31/2021 - SHOW TERMINAL SIZE FOR EACH USER.    1.5 *
*                                                                     *
*               11/27/2023 - DISPLAY THE INSTALLED SECURITY SYSTEM    *
*                            INSTEAD OF ALWAYS CALLING IT "RACF". 1.6 *
*                                                                     *
*               01/22/2025 - BAD CRITERION FOR "STARTING". USE        *
*                            LWARNM AND LWARNM8 BOTH BEING ZERO.  1.7 *
*                                                                     *
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
*                                  MACROS
         YREGS
*
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    LA    1,&FROM
         LA    0,&LEN
         LA    15,&TO
         BAL   14,HEX
         MEND
* ------------------------------------------------------------------- *
*                    THIS IS THE MAINLINE CODE                        *
* ------------------------------------------------------------------- *
TESTSRB  CSECT
TESTSRB  RMODE 24
TESTSRB  AMODE 31
         USING *,R15
         B     PGMSTART
         DC    C'TSUINFO - Show active TSO userids. '
         DC    C' &SYSDATE &SYSTIME  Version 1.7 '
         DC    C' This program is in the public domain.'
PGMSTART DS    0H
         STM   R14,R12,12(R13)
         LR    R3,R15
         DROP  R15
         USING TESTSRB,R3
         LR    R14,R13
         LA    R13,SAVEAREA
         ST    R14,SAVEAREA+4
         STM   R15,R1,SAVE1401     Now save registers and test if APF
         XR    R15,R15                  authorized.
         TESTAUTH FCTN=1           Are we authorized?
         LTR   R15,R15             Test the return code.
         BNZ   NOTAUTH             Not zero, tell not authorized.
         MVI   FLAGX,X'00'         INITIALIZE FLAG
         MVI   FLAGY,X'00'         INITIALIZE FLAG
         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.
         L     R0,=V(TODCNVRT)     ENTRY PT OF TODCNVRT PROGRAM
         ST    R0,ENTRY            SAVE ITS ENTRY POINT
         STM   R15,R1,SAVE1401
         APUT  HEADERH,L'HEADERH   WRITE PROGRAM TITLE
         APUT  HEADERU,L'HEADERU
         APUT  TITLEH,L'TITLEH
         APUT  TITLEU,L'TITLEU
         LM    R15,R1,SAVE1401
*
         MODESET MODE=SUP,KEY=ZERO
         LA    R0,TSUEND
         STORAGE OBTAIN,                                               X
               LENGTH=(R0),                                            X
               ADDR=(R8),                                              X
               SP=228
         ST    R8,SRBPTR
*
         LR    R9,R0
         LA    R6,TSUINFO
         LR    R7,R0
         MVCL  R8,R6             MOVE SRB CODE TO CSA
* --------------------------------------------------------------- *
*     POINT TO ASVT - AND RUN THROUGH ALL THE ADDRESS SPACES      *
* --------------------------------------------------------------- *
         L     R9,CVTPTR         POINT TO CVT  - X'10'
         USING CVT,R9            MAP CVT
         L     R9,CVTASVT        POINT TO ASVT
         DROP  R9                TELL ASMBLR TO STOP USING R09 FOR CVT
         USING ASVT,R9           MAP ASVT
         LA    R5,ASVTENTY       POINT TO FIRST ENTRY IN TABLE
         L     R8,ASVTMAXU       LOAD NUMBER OF ASVT ENTRIES.
* --------------------------------------------------------------- *
ASVTLOOP DS    0H                LOOP THROUGH ALL THE ADDRESS SPACES.
         LR    R7,R5             SAVE ADDRESS IN R7 FOR LATER
*
         TM    0(R5),ASVTAVAL    IS THIS ASID BEING USED?
         BO    NEXTASCB          NO. GO TO THE NEXT ONE.
         L     R7,0(,R7)         YES. POINT AT ACTUAL ASCB.
         USING ASCB,R7
         CLC   ASCBTSB,=F'0'     DOES IT HAVE A TSB?
         BE    NEXTASCB          NO. IT IS NOT A TSU.
         L     R9,ASCBASSB       YES. POINT TO ASSB.
         USING ASSB,R9
         MVC   STOKEN,ASSBSTKN   GET THE TOKEN FOR SCHEDULE.
* ------------------------------------------------------------------- *
*         EXECUTE THE SRB CODE IN ACTIVE TSU ADDRESS SPACES           *
* ------------------------------------------------------------------- *
         IEAMSCHD EPADDR=SRBPTR,                                       X
               ENV=STOKEN,                                             X
               KEYVALUE=INVOKERKEY,                                    X
               TARGETSTOKEN=STOKEN,                                    X
               PRIORITY=GLOBAL,                                        X
               SYNCH=YES
* ------------------------------------------------------------------- *
*             AFTER EXECUTING THE SRB CODE, COME HERE.                *
* ------------------------------------------------------------------- *
SRBACTN  DS    0H
         MVC   OUTLINE,OUTLINE-1       INITIALIZE
         MVI   INITSP,X'40'               THE
         MVC   AREAS,AREAS-1                 OUTPUT
         MVC   ASID(2),=X'0000'                 AREAS
         MVI   STEPFLGX,X'00'
*                                      MOVE THE OUTPUT OF THE SRB
*                                       INTO OUR PROGRAM.
         L     R10,SRBPTR
         MVC   AREAOUT0(8),AREA0-TSUINFO(R10)
         MVC   AREAOUT1(8),AREA1-TSUINFO(R10)
         MVC   AREAOUT2(8),AREA2-TSUINFO(R10)
         MVC   ASID(2),ASIDN-TSUINFO(R10)
         MVC   TERMID(8),TERMIDN-TSUINFO(R10)
         MVC   STEPFLGX(1),STEPFLG-TSUINFO(R10)
         MVC   LOGPROC(8),LOGPROCN-TSUINFO(R10)
         MVC   FLAGY(1),FLAGX-TSUINFO(R10)
         MVC   ROWS(1),STORR-TSUINFO(R10)
         MVC   COLS(1),STORC-TSUINFO(R10)
* ------------------------------------------------------------------- *
*            MOVE THE INFORMATION INTO THE OUTPUT LINE.               *
* ------------------------------------------------------------------- *
         MVC   OUTLINE,OUTLINE-1       CLEAR OUTPUT LINE
         MVC   OUTLINE(8),AREAOUT0     MOVE JOBNAME TO OUTPUT LINE.
         CLC   =XL8'00',AREAOUT1       STARTING?
         BNE   TODFORMT                NO, FORMAT LOGON TIME.
         MVC   OUTLINE+16(15),BLANK25  YES. NO LOGON TIME TO FORMAT.
         B     RESTLINE                BYPASS FORMATTING.
* ------------------------------------------------------------------- *
*         PSCBLTIM IS THE TIME OF LAST LOGON IN STCK FORMAT.          *
*          (IMPOSSIBLE FOR NORMAL MORTALS TO FIGURE OUT.)             *
* ------------------------------------------------------------------- *
TODFORMT DS    0H                      CONVERT 8-BYTE LOGON TIME
*                                      TO SOMETHING READABLE.
         MVI   TIMEFMT-1,X'40'         BLANK OUTPUT LINE
         MVC   TIMEFMT,TIMEFMT-1
         MVC   CLOCK(8),=XL8'00'
         MVC   CLOCK(8),AREAOUT1
         L     R15,16                  CVT
         L     R15,X'130'(,R15)        TIME ZONE OFFSET - CVTTZ
         ST    R15,TIMEZONE            SAVE IT FOR TODCNVRT CALL
         SPACE
         MVI   ANSWER,C' '             CLEAR TODCNVRT ANSWER AREA
         MVC   ANSWER+1(L'ANSWER-1),ANSWER
*
         MVI   OPTION,1
*                  FIVE PARAMETERS  -  LOAD PARAM LIST FOR TODCNVRT
         LA    R1,PARAM                POINT TO PARAM LIST AND LOAD IT
         LA    R15,TIMEZONE
         ST    R15,0(,R1)              TIME ZONE
         LA    R15,CLOCK
         ST    R15,4(,R1)              STCK VALUE
         LA    R15,ANSWER
         ST    R15,8(,R1)              ANSWER PLACE
         LA    R15,=X'01'
         ST    R15,12(,R1)             OPTION
         LA    R15,WORKA
         ST    R15,16(,R1)             ADDRESS OF WORK AREA
*
         L     R15,ENTRY               LOAD TODCNVRT ENTRY POINT
         BALR  R14,R15                 CALL TODCNVRT AND THEN....
*                                      FORMAT THE ANSWER FOR DISPLAY
         MVC   TIMEFMT(4),ANSWER       FIX TIME SO IT IS READABLE
         MVI   TIMEFMT+4,C'.'
         MVC   TIMEFMT+5(3),ANSWER+4
         MVC   TIMEFMT+10(15),ANSWER+7
         MVI   TIMEFMT+12,C':'
         MVC   OUTLINE+16(15),TIMEFMT  THEN DISPLAY READABLE TIME.
* ------------------------------------------------------------------- *
*       FINISH MOVING THE REST OF THE STUFF TO THE OUTPUT LINE        *
* ------------------------------------------------------------------- *
RESTLINE DS    0H
         TM    FLAGY,X'01'             IS SESSION STARTING?
         BZ    RESTLIN1
         MVI   OUTLINE+57,C'S'
         B     RESTLIN3
RESTLIN1 DS    0H
         TM    FLAGY,X'80'             UADS DEFINED SESSION?
         BZ    RESTLIN2                NO. MARK AS "RACF"
         MVI   OUTLINE+57,C'U'         YES. MARK AS "UADS"
         B     RESTLIN3
RESTLIN2 DS    0H
         ST    R11,SAVER11A
         L     R11,16                  CVT
         L     R11,X'3E0'(,R11)        RCVT - SEE WHAT'S THERE
         CLC   0(4,R11),ZEROES
         BNE   TRYRACF
         MVI   OUTLINE+57,C'U'         MARK AS "NONE" ONLY UADS
TRYRACF  DS    0H
         CLC   0(4,R11),=C'RCVT'
         BNE   TRYACF2
         MVI   OUTLINE+57,C'R'         MARK AS "RACF"
TRYACF2  DS    0H
         CLC   0(4,R11),=C'ACF2'
         BNE   TRYTSS
         MVI   OUTLINE+57,C'A'         MARK AS "ACF2"
TRYTSS   DS    0H
         CLC   0(4,R11),=C'RTSS'
         BNE   TRYDBLT
         MVI   OUTLINE+57,C'T'         MARK AS "TSS"
TRYDBLT  DS    0H
         CLC   0(4,R11),=C'DBLT'
         BNE   TRYPIES
         MVI   OUTLINE+57,C'D'         MARK AS "DEADBOLT'
TRYPIES  DS    0H
         CLC   0(4,R11),=C'PIES'
         BNE   RESTLIN3
         MVI   OUTLINE+57,C'P'         MARK AS "PIES'
RESTLIN3 DS    0H
         L     R11,SAVER11A
         HEX   OUTLINE+53,1,STEPFLGX   FORMAT STEPLIB FLAGS
         MVC   OUTLINE+67(8),AREAOUT2
         HEX   OUTLINE+10,2,ASID       FORMAT ASID IN OUTPUT LINE
         MVC   OUTLINE+43(8),TERMID    MOVE TERMINAL ID TO OUTPUT.
         MVC   OUTLINE+33(8),LOGPROC   MOVE TERMINAL ID TO OUTPUT.
         XR    R0,R0
         XR    R1,R1
         IC    R0,ROWS                 STORE NUMBER OF ROWS
         IC    R1,COLS                 STORE NUMBER OF COLUMNS
         LR    R6,R0                   GET NUMBER OF ROWS
         CVD   R6,DWORK                CONVERT TO PACKED
         MVC   NUMROWS,MASK4A          EDIT MASK
         ED    NUMROWS,DWORK+6         DISPLAY NUMBER IN MESSAGE
         MVI   NUMROWS,C' '
         MVC   OUTLINE+58(4),NUMROWS   DISPLAY NUMBER
         LR    R6,R1                   GET NUMBER OF COLUMNS
         CVD   R6,DWORK                CONVERT TO PACKED
         MVC   NUMCOLS,MASK4A          EDIT MASK
         ED    NUMCOLS,DWORK+6         DISPLAY NUMBER IN MESSAGE
         MVI   NUMCOLS,C' '
         MVC   OUTLINE+62(4),NUMCOLS   DISPLAY NUMBER
         APUT  OUTLINE,80
         MVI   FLAGY,X'00'             CLEAR FLAG
*
NEXTASCB DS    0H
         LA    R5,4(,R5)               POINT TO NEXT ENTRY IN ASVT
         BCT   R8,ASVTLOOP             GO CHECK NEXT ASVT ENTRY
* ------------------------------------------------------------------- *
*                   FALL THROUGH TO END-OF JOB                        *
* ------------------------------------------------------------------- *
EOJ      DS    0H                      END OF PROGRAM.
         L     R7,SRBPTR
         STORAGE RELEASE,ADDR=(R7),LENGTH=TSUEND,SP=228
         MODESET MODE=PROB,KEY=NZERO
EOJE     DS    0H
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         BR    R14
NOTAUTH  DS    0H
         APUT  NOTAUTHM,L'NOTAUTHM
         B     EOJE
*---------------------------------------------------------------------*
*                  HEX NUMBER FORMATTING SUBROUTINE                   *
* ------------------------------------------------------------------- *
HEX      MVC   1(1,R15),0(R1)          MOVE BYTE
         UNPK  0(3,R15),1(2,R15)       UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)             INCREMENT OUTPUT PTR
         LA    R1,1(,R1)               INCREMENT INPUT PTR
         BCT   R0,HEX                  DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '             BLANK THE TRAILING BYTE
         BR    R14                     RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF'     TRANSLATE TABLE
* ------------------------------------------------------------------- *
*                    CONSTANTS FOR MAIN PROGRAM                       *
* ------------------------------------------------------------------- *
BLANK25  DC    CL25' '
ROWS     DC    CL1' '
COLS     DC    CL1' '
INITSP   DC    CL1' '
AREAS    DS    0CL34               KEEP THESE TOGETHER
AREAOUT0 DC    CL8' '
AREAOUT1 DC    CL8' '
AREAOUT2 DC    CL8' '
ASID     DC    XL2'00'
NUMROWS  DC    CL4' '
NUMCOLS  DC    CL4' '
TERMID   DC    CL8' '
LOGPROC  DC    CL8' '
         DC    X'40'
OUTLINE  DC    CL80' '
*
DWORK    DS    D
SRBPTR   DS    A
STOKEN   DS    XL8
SAVEAREA DS    18F
KEYZERO  DC    X'00'
FLAGY    DC    X'00'
ENTRY    DS    F
PARAM    DS    5F               2  PARAMETER LIST FOR TODCNVRT PROGRAM
CLOCK    DS    D                3  TARGET AREA OF STCK INSTRUCTION
TIMEZONE DS    F                4  FILLED IN FROM CVTTZ
ZEROES   DC    XL4'00'
SAVER11A DS    F
ANSWER   DS    CL64             5  ANSWER PLACE FOR TODCNVRT PROGRAM
         DS    C
TIMEFMT  DS    CL64                FORMAT FOR DATE AND TIME DISPLAY
OPTION   DS    C
WORKA    DS    10D
PARMSAVE DS    F
SAVE1401 DS    5F
STEPFLGX DC    XL1'00'
TSOUS    DC    PL4'0'
STRUS    DC    PL4'0'
MASK4A   DC    XL4'40212020'
NOTAUTHM DC    CL36'THIS PROGRAM MUST BE RUN AUTHORIZED.'
TITLEH DC CL66'USERID    ASID  LOGON DATE-TIME  PROCEDURE TERMID   STLBX
                T ROW COL'
TITLEU DC CL66'--------  ----  ---------------  --------- -------- ----X
                - --- ---'
HEADERH  DC    CL41'                   TSU INFORMATION - V1.7'
HEADERU  DC    CL41'                   ---------------   ----'
* ------------------------------------------------------------------- *
*                            SRB CODE                                 *
* ------------------------------------------------------------------- *
TSUINFO  DS    0D
         DROP  R3
         LR    R12,R15             LOAD ENTRY POINT INTO BASE REGISTER
         USING TSUINFO,R12         TELL THE ASSEMBLER R12 IS BASE
         MVI   AREASS-1,X'40'
         MVC   AREASS,AREASS-1     CLEAR AREAS BEFORE EACH RUN
         MVC   ASIDN,=XL2'00'      INITIALIZE ASID NUMBER
         MVI   FLAGX,X'00'         INITIALIZE FLAG
         MVI   STEPFLG,X'00'       INITIALIZE FLAG
RUNTSB   DS    0H                  THERE IS A TSB. GET INFO FROM IT.
         L     R3,X'224'           POINT TO ASCB
         L     R3,X'3C'(,R3)       POINT TO TSB
         LTR   R3,R3               IS THERE A TSB?
         BZ    RETURN              NO TSB - DOUBLE CHECK
DEALTSB  B     ONLYTID             ZAP HERE
         MVC   AREA2(8),X'58'(R3)  MOVE FIELD FROM TSB
ONLYTID  MVC   TERMIDN(8),X'68'(R3) MOVE IN TERMINAL ID
         CLC   =X'0000',X'66'(R3)  IS THE TERMSIZE BASIC?
         BNE   REALSIZ             NO. GET THE MODIFIED TERMSIZE
         MVC   STORR,X'64'(R3)     GET THE BASIC TERMSIZE
         MVC   STORC,X'65'(R3)
         B     RUNPSCB
REALSIZ  MVC   STORR,X'66'(R3)     RETRIEVE NUMBER OF ROWS
         MVC   STORC,X'67'(R3)     RETRIEVE NUMBER OF COLUMNS
RUNPSCB  DS    0H
         L     R3,X'224'           POINT TO ASCB
         MVC   ASIDN(2),X'24'(R3)  SAVE ASID NUMBER
*
         L     R4,X'B0'(,R3)       POINT TO ASCBJBNS
         LTR   R4,R4               ANY JBNS?
         BZ    GOTOTSBX            ZERO? PUT NAME IN FROM TSBX.
         MVC   AREA0(8),0(R4)      COPY JOBNAME TO AREA0
         B     JBNSOK
GOTOTSBX DS    0H
         OI    FLAGX,X'02'         FLAG THAT WE'RE HERE
         L     R1,X'224'           ASCB
         L     R1,X'3C'(,R1)       TSB
         L     R1,X'60'(,R1)       TSBX
         MVC   AREA0(8),X'18'(R1)  PLUG IN USERID FROM TSBX
JBNSOK   DS    0H
*
         TM    FLAGX,X'01'         IF "STARTING", THERE IS NO PSCB.
         BO    ZEROTIME            THEREFORE THERE IS NO LOGON TIME.
         TM    FLAGX,X'02'         INCOMPLETE PSCB
         BO    ZEROTIM             THEREFORE THERE IS NO LOGON TIME.
*
         L     R3,X'6C'(,R3)       POINT TO ASXB
         L     R3,X'F8'(,R3)       POINT TO ITCB.
         L     R3,X'B4'(,R3)       POINT TO JSCB.
         L     R3,X'108'(,R3)      POINT TO PSCB.
         LTR   R3,R3               IS THERE A PSCB (IS THIS A TSU?)
         BZ    RETURN              NO PSCB, NOT A TSU
         LA    R3,X'14'(,R3)       POINT TO LOGON TIME IN STCK FORMAT
         MVC   AREA1(8),0(R3)      MOVE LOGON TIME IN FROM PSCB
         B     DOLWA               NOW GET LWA INFORMATION
* -----  THE FOLLOWING ROUTINE IS ENTERED IF USERID IS STARTING --- *
ZEROTIME MVC   AREA0(8),=C'+startng'  MARK USERID AS "STARTING"
         MVC   AREA1(8),ZERO8         ZERO OUT THE TIME
         B     RETURN
* ----------------------------------------------------------------- *
ZEROTIM  MVC   AREA1(8),ZERO8         ZERO OUT THE TIME
DOLWA    DS    0H                  GET SOME INFO FROM THE LWA
         L     R3,X'224'           POINT TO ASCB
         L     R3,X'6C'(,R3)       POINT TO ASXB
         LR    R4,R3               SAVE ASXB ADDRESS
         L     R3,X'14'(,R3)       POINT TO LWA
         LTR   R3,R3               IS THERE ANY LWA?
         BZ    RETURN              NO. JUST GET OUT.
         CLC   X'49'(7,R3),ZERO8   IS THERE 7-CHAR USERID?
         BNE   NOSTART             IF 8-CHARS THEN THIS IS SPECIAL.
*              IF 8-CHAR ID, THEN LWARNM-1 IS X'0840404040404040'
*              WITH A LENGTH OF 8, BUT WITH 7 BLANKS FOR THE ID.
         CLC   X'1DC'(8,R3),ZERO8  CHECK IF LWARNM8 IS ZERO.
         BNE   NOSTART             BOTH USERID FIELDS ZERO?
         OI    FLAGX,X'01'         THEN WE MUST BE STARTING.
         B     ZEROTIME            MARK USERID AS STARTING
NOSTART  DS    0H                  PLACE TO JUMP TO, IF NOT STARTING
         L     R2,X'1B8'(,R3)      IS LWA PROC NAME ZEROED OUT?
         LTR   R2,R2               YES.  IT'S NOT THERE.
         BNZ   ALTPROC             IF IT IS, JUST GO ON.
*                                  IT'S NOT THERE, DO SOMETHING ELSE.
         OI    FLAGX,X'80'         SHOW IT IS A UADS-DEFINED SESSION.
         L     R4,X'F8'(,R4)       POINT TO ASXBITCB
         XR    R2,R2               CLEAR REGISTER
         ICM   R2,7,X'A5'(R4)      POINT TO TCTB (24-BIT)
         BZ    TRYCSCB             AIN'T THERE, TRY ANOTHER WAY.
         MVC   LOGPROCN(8),X'C8'(R2)   GET PROC NAME THIS WAY
         B     MOVSTEP                 THEN GET STEPLIB FLAGS.
TRYCSCB  DS    0H
         L     R2,X'224'           BACK TO ASCB
         L     R2,X'38'(,R2)       POINT TO ITS CSCB ENTRY (31-BIT)
         MVC   LOGPROCN(8),X'10'(R2)   GET THE PROCNAME THIS WAY
         B     MOVSTEP                 THEN GET STEPLIB FLAGS
ALTPROC  DS    0H
         MVC   LOGPROCN(8),X'1B8'(R3)   MOVE LOGON PROC NAME
MOVSTEP  MVC   STEPFLG(1),X'1E8'(R3)    MOVE STEPLIB FLAG BITS
ALTPROCE DS    0H
         L     R2,X'224'
         L     R2,X'6C'(,R2)       POINT TO ASXB
         L     R2,X'14'(,R2)       POINT TO LWA
         LA    R2,X'18C'(,R2)      POINT TO LWAWHOIF FULLWORD FIELD
         CLC   =X'00000014',0(R2)  If F'14' then session from UADS.
         BNE   RETURN
         OI    FLAGX,X'80'         SHOW IT IS A UADS-DEFINED SESSION.
*
RETURN   DS    0H
         BR    R14                 RETURN TO CALLER
* ------------------------------------------------------------------- *
SAVER14A DC    F'0'                CONSTANTS FOR THE SRB CODE
ZERO8    DC    XL8'00'
FLAGX    DC    X'00'
         DC    CL1' '
AREASS   DS    0CL42
AREA0    DC    CL8' '
AREA1    DC    CL8' '
AREA2    DC    CL8' '
ASIDN    DC    XL2'00'
TERMIDN  DC    CL8' '
LOGPROCN DC    CL8' '
STEPFLG  DC    XL1'00'
STORR    DS    X
STORC    DS    X
         LTORG
TSUEND   EQU   *-TSUINFO
* ------------------------------------------------------------------- *
*                          END OF SRB CODE                            *
* ------------------------------------------------------------------- *
         IHAASCB
         IHAASSB
         IHAASVT
         CVT  LIST=YES,DSECT=YES
         END
* ------------------------------------------------------------------- *
*                        END OF MAIN PROGRAM                          *
* ------------------------------------------------------------------- *
         TITLE '   T O D C N V R T  '
*---------------------------------------------------------------------*
*                                                                     *
*        'TODCNVRT'                                                   *
*                                                                     *
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.    *
*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.            *
*        DATE WRITTEN. DECEMBER 7 1976.                               *
*        DATE UPDATED. JANUARY 31 1977.                               *
*        ATTRIBUTES. RE-ENTRANT.                                      *
*                                                                     *
*        DESCRIPTION.                                                 *
*         THIS SUBPROGRAM CONVERTS THE RESULTS OF A                   *
*         'STORE CLOCK' INSTRUCTION TO EBCDIC. THE LOGIC              *
*         IS TAKEN STRAIGHT OUT OF MODULE 'AMDPRSEG' IN               *
*         AMDPRDMP (5752-SC113), VS2 RELEASE 3.0                      *
*         WITH A FEW MODIFICATIONS TO MAKE THE PASSING                *
*         OF PARAMETERS MORE CONVENTIONAL.                            *
*                                                                     *
*            INPUT - LIST OF 5 ADDRESSES POINTED TO BY REG 1          *
*                       1) PTR TO CVTTZ VALUE                         *
*                       2) PTR TO 8-BYTE TOD CLOCK VALUE              *
*                       3) PTR TO OUTPUT AREA                         *
*                       4) PTR TO OPTION BYTE X'01' OR X'02'          *
*                       5) PTR TO 80-BYTE WORKAREA                    *
*                    REG 15 = ENTRY ADDRESS  REG 14 = RETURN ADDRES   *
*                    REG 13 = 72 BYTE REGISTER SAVEAREA ADDRESS       *
*                                                                     *
*            OUTPUT - EBCDIC TIME IN OUTPUT AREA                      *
*                     REG 15 = 4 IF INPUT CLOCK TIME ALL ZEROES       *
*                     REG 15 = 0 ALL OTHER CASES.                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
TODCNVRT CSECT
         SAVE  (14,12),,&SYSDATE
         LR    R12,15
         USING TODCNVRT,R12
         L     R1,16(,R1)              SAVEPTR
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R14,R13
         LR    R13,R1
         L     R1,24(,R14)             RESTORE R1
         USING MYDSECT,R13
         USING PARAMS,R1
         SPACE 1
         L     R7,TODPTR
         MVC   CVRTAREA(8),0(R7)
         SPACE
*---------------------------------------------------------------------*
*        CHANGE TOD TO LOCAL TIME
*---------------------------------------------------------------------*
         SPACE
         L     R7,CVTTZPTR         GET ADDR OF TZ FIELD
         L     R7,0(,R7)           R7 = TZ VALUE
         L     R15,MINUS1
         CLR   R7,R15              IS TZ = MINUS 1?
         BNE   TZADD               NO - USE TZ FROM CALLER
         L     R7,16               YES - USE TZ FROM CVT
         L     R7,X'598'(,R7)      GET CVTTZ
TZADD    DS    0H
         AL    R7,CVRTAREA         ADD TZ TO FIRST WORD
         ST    R7,CVRTAREA
         SPACE
         LM    R4,R5,CVRTAREA
         SRDL  R4,12               REMOVE INSIGNIFICANT BITS
         D     R4,SIXTYMIL         DIVIDE BY 60,000,000
         SPACE
         L     R7,OPTION
         CLI   0(R7),2
         BE    RELTVTME
         B     FULLDATE
         SPACE
*---------------------------------------------------------------------*
*        RELATIVE TIME CONVERSION -- THIS ROUTINE CONVERTS THE TOD
*        VALUE TO RELATIVE SECONDS.MICROSECONDS FROM 0 A.M. OF THE
*        CURRENT DAY REFLECTED BY THE TOD VALUE. THE CONVERTED TIME
*        IS PLACED LEFT JUSTIFIED IN THE OUTPUT AREA IN THE FORM
*        SSSSS.MMMMMM (EBCDIC).   UPON ENTRY TO THIS ROUTINE THE TOD
*        VALUE HAS ALREADY BEEN CHANGED TO TOTAL MINUTES (IN R5) AND
*        NUMBER OF MICROSECONDS INTO CURRENT MINUTE (IN R4).
*---------------------------------------------------------------------*
         SPACE
RELTVTME DS    0H
         L     R7,TODPTR
         CLC   0(8,R7),=XL8'00'
         BNE   RNOTZERO
         L     R7,OUTAREA
         MVI   12(R7),C' '
         MVC   13(11,R7),12(R7)
         MVC   0(12,R7),=C'00000.000000'
         LA    R15,4
         B     EXIT
         SPACE
RNOTZERO DS    0H
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF SECONDS INTO CURRENT MINUTE
*---------------------------------------------------------------------*
         SPACE
         LR    R15,R4
         SLR   R14,R14
         D     R14,MILLION
         ST    R15,TIMELEFT
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF MICROSEC INTO CURRENT SECOND
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14              REMAINDER IN R4
         SPACE
         L     R2,OUTAREA
         LA    R2,6(,R2)           OUT LOC FOR MICROSEC
         SPACE
*---------------------------------------------------------------------*
*        CONVERT MICROSEC TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         CVD   R4,CVRTAREA
         UNPK  0(6,R2),CVRTAREA+4(4)
         OI    5(R2),X'F0'
         SPACE
         L     R7,OUTAREA
         MVI   5(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF SECONDS INTO CURRENT DAY
*        AND CONVERT TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         LR    R14,R5              R4=((R5//1440)*60)+SECONDS
         SRDA  R14,32
         D     R14,=F'1440'
         MH    R14,=H'60'
         LA    R15,TIMELEFT
         LA    R14,0(,R15)         ADD SECONDS
         LR    R4,R14
         SPACE
         LR    R2,R7               POINT TO OUTPUT AREA
         CVD   R4,CVRTAREA
         UNPK  0(5,R2),CVRTAREA+5(3)  UNPACK SECONDS
         OI    4(R2),X'F0'
         SPACE
         B     EXIT0
         SPACE
*---------------------------------------------------------------------*
*        FULL DATE AND TIME CONVERSION -- THIS ROUTINE
*        CONVERTS THE TOD VALUE TO YEAR, JULIAN DAY, HOURS
*        MINUTES, SECONDS, AND MICROSECONDS. THE CONVERTED
*        TIME IS PLACED LEFT-JUSTIFIED IN THE OUTPUT AREA
*        IN THE FORM YYYYDDDHH.MM.SS.MMMMMM (EBCDIC). UPON
*        ENTRY TO THIS ROUTINE, THE TOD VALUE HAS ALREADY
*        BEEN CHANGED TO TOTAL MINUTES SINCE EPOCH (IN R5)
*        AND NUMBER OF MICROSECS INTO CURRENT MINUTE (R4).
*---------------------------------------------------------------------*
         SPACE
FULLDATE DS    0H
         L     R7,TODPTR
         CLC   0(8,R7),=XL8'00'
         BNE   FNOTZERO
         L     R7,OUTAREA
         MVI   22(R7),C' '
         MVI   23(R7),C' '
         MVC   0(22,R7),=C'000000000.00.00.000000'
         LA    R15,4
         B     EXIT
         SPACE
FNOTZERO DS    0H
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NUMBER OF SECONDS (R4/1,000,000)
*---------------------------------------------------------------------*
         SPACE
         LA    R7,TIMELEFT
         LR    R15,R4
         SLR   R14,R14
         D     R14,MILLION
         ST    R15,0(,R7)
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF MICROSECONDS (R4//1,000,000)
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
*---------------------------------------------------------------------*
*        CONVERT MICROSEC TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         L     R7,OUTAREA
         LA    R2,16(,R7)
         SPACE
         CVD   R4,CVRTAREA
         UNPK  0(6,R2),CVRTAREA+4(4)
         OI    5(R2),X'F0'
         SPACE
         MVI   15(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CONVERT SECONDS TO EBCDIC
*---------------------------------------------------------------------*
         SPACE
         L     R4,TIMELEFT
         LA    R2,13(,R7)
         SPACE
         CVD   R4,CVRTAREA
         UNPK  0(2,R2),CVRTAREA+6(2)
         OI    1(R2),X'F0'
         SPACE
         MVI   12(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF MINUTES INTO CURRENT HOUR.
*        R5 CONTAINS TOTAL NO. OF MINUTES FROM THE EPOCH.
*---------------------------------------------------------------------*
         SPACE
         LR    R15,R5
         SLR   R14,R14
         D     R14,=F'60'
         ST    R15,TIMELEFT
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE MINUTES INTO CURRENT HOUR
*        R4 = R5//60
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
         LA    R2,10(,R7)
         CVD   R4,CVRTAREA
         UNPK  0(2,R2),CVRTAREA+6(2)
         OI    1(R2),X'F0'
         SPACE
         MVI   9(R7),C'.'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF HOURS INTO CURRENT DAY.
*        TIMELEFT CONTAINS TOTAL NO. OF HOURS SINCE EPOCH.
*---------------------------------------------------------------------*
         SPACE
         L     R5,TIMELEFT
         LR    R15,R5
         SLR   R14,R14
         D     R14,=F'24'
         ST    R15,TIMELEFT        TOTAL DAYS SINCE EPOCH
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE NO. OF HOURS INTO CURRENT DAY.
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
         LA    R2,7(,R7)
         CVD   R4,CVRTAREA
         UNPK  0(2,R2),CVRTAREA+6(2)
         OI    1(R2),X'F0'
         SPACE
*---------------------------------------------------------------------*
*        CALCULATE THE CURRENT YEAR AND JULIAN DAY
*        USING 'TIMELEFT' WHICH CONTAINS THE TOTAL NUMBER
*        OF ELAPSED DAYS SINCE 1900. FIRST CHECK WHETHER
*        THE TIME IS IN THE 1900 THRU 1903 ERA (I.E. LESS
*        THAN 1460 ELAPSED DAYS). IF SO, THE TIME MUST BE
*        HANDLED IN A SPECIAL WAY SINCE 1900 IS NOT A LEAP
*        YEAR AND EACH YEAR IN THAT 4 YEAR SPAN THUS CON-
*        TAINS 365 DAYS. IF THE ELAPSED TIME HOWEVER IS
*        GREATER THAN 1459 DAYS, THEN EVERY 4 YEARS CON-
*        TAIN 1461 DAYS RATHER THAN 1460 AND THE FIRST
*        YEAR OF EACH GROUP IS A LEAP YEAR. THESE FOUR
*        YEAR GROUPS ARE REFERRED TO AS LEAP YEAR GROUPS.
*        THE YEAR AND THE DAY WHEN THE ELAPSED TIME FALLS
*        INTO ONE OF THESE GROUPS MUST BE CALCULATED USING
*        STANDARD FORMULAS DIFFERENT FROM THE FORMULAS
*        USED WHEN THE TIME IS WITHIN 1900 TO 1903.
*---------------------------------------------------------------------*
         SPACE
         L     R7,TIMELEFT
         CH    R7,=H'1460'
         BNL   POST1903
         SPACE
NOLEAPYR DS    0H
         SPACE
*---------------------------------------------------------------------*
*        R3 = (TIMELEFT//365)+1   CURRENT DAY
*---------------------------------------------------------------------*
         SPACE
         LR    R14,R7
         SRDA  R14,32
         D     R14,=F'365'
         AH    R14,=H'1'
         LR    R3,R14
         SPACE
*---------------------------------------------------------------------*
*        R6 = (TIMELEFT/365)     CURRENT YEAR
*---------------------------------------------------------------------*
         SPACE
         AH    R15,=H'1900'
         LR    R6,R15
         B     DATECOM
         SPACE
*---------------------------------------------------------------------*
*        THE TIME ELAPSED IS 1460 OR MORE DAYS.
*        CALCULATE R5, THE RELATIVE LEAP YEAR GROUP SINCE
*        1904, AND R4, THE NUMBER OF DAYS ELAPSED IN THE
*        CURRENT LEAP YEAR GROUP. USE THESE VALUES IN THE
*        FORMULAS.  IN THE FORMULA USED TO CALCULATE THE
*        JULIAN DAY, THE EXPRESSION IN PARENTHESES IS THE
*        NUMBER OF WHOLE DAYS THAT HAVE PAST IN THE
*        CURRENT YEAR. BECAUSE THE CURRENT DAY HAS NOT YET
*        ELAPSED, IT IS NOT INCLUDED IN THE RESULT PRO-
*        DUCED BY THE EXPRESSION AND THEREFORE 1 MUST BE
*        ADDED TO GET THE ACTUAL JULIAN DAY.
*        WITHIN THE EXPRESSION THE FIRST TERM, R, MUST BE
*        ADJUSTED BY 1 (I.E, L/731) IF THE TOTAL DAYS INTO
*        THE LEAP YEAR GROUP IS GREATER THAN OR EQUAL TO
*        2 YEARS, AND AGAIN BY 1 (I.E, L/1096) IF THE
*        TOTAL DAYS IS EQUAL TO OR GREATER THAN 3 YEARS.
*        THE AFFECT OF THIS IS THAT THE 2ND AND 3RD YEARS
*        ARE FORCED TO 366 DAYS ONCE THE TOTAL DAYS INTO
*        THE GROUP EXCEEDS EACH OF THESE YEARS. THIS IS
*        NECESSARY BECAUSE A DIVISOR OF 366 IS USED.
*        THE SECOND TERM (W * 4) YIELDS THE RELATIVE
*        NUMBER OF YEARS SINCE 1904 UP TO AND INCLUDING
*        THE LEAP YEAR IN THE CURRENT GROUP. THE THIRD
*        TERM ( (L-1)/365 ) YIELDS THE RELATIVE YEAR
*        WITHIN THE CURRENT LEAP YEAR GROUP. THUS IF THE
*        CURRENT YEAR IS A LEAP YEAR THE RELATIVE YEAR IS
*        ZERO AND THE THIRD TERM WILL RESULT IN ZERO.
*---------------------------------------------------------------------*
         SPACE
POST1903 DS    0H
LEAPYR   DS    0H
         SPACE
*---------------------------------------------------------------------*
*        TIMELEFT=TIMELEFT-1460  1904 BASE
*---------------------------------------------------------------------*
         SPACE
         L     R7,TIMELEFT
         SH    R7,=H'1460'
         STH   R7,TIMELEFT
         SPACE
*---------------------------------------------------------------------*
*        R5 = TIMELEFT/1461
*---------------------------------------------------------------------*
         SPACE
         LR    R14,R7
         SRDA  R14,32
         D     R14,=F'1461'
         LR    R5,R15
         SPACE
*---------------------------------------------------------------------*
*        R4 = TIMELEFT//1461
*---------------------------------------------------------------------*
         SPACE
         LR    R4,R14
         SPACE
*---------------------------------------------------------------------*
*        R3 = ((L+L/731+L/1096)//336)+1  JULIAN DAY
*---------------------------------------------------------------------*
         SPACE
         LR    R15,R4
         SLR   R14,R14
         D     R14,=F'731'
         LR    R14,R15
         ALR   R14,R4
         LR    R3,R14
         LR    R15,R4
         SLR   R14,R14
         D     R14,=F'1096'
         LR    R14,R15
         ALR   R14,R3
         SRDA  R14,32
         D     R14,=F'366'
         AH    R14,=H'1'
         LR    R3,R14
         SPACE
*---------------------------------------------------------------------*
*        R6 = 1904+(W*4)+(L-1)/365       YEAR
*---------------------------------------------------------------------*
         SPACE
         LR    R6,R5
         SLA   R6,2
         AH    R6,=H'1904'
         LR    R14,R4
         BCTR  R14,0
         SRDA  R14,32
         D     R14,=F'365'
         ALR   R6,R15
         SPACE
DATECOM  DS    0H
         L     R7,OUTAREA
         LA    R2,4(,R7)
         CVD   R3,CVRTAREA
         UNPK  0(3,R2),CVRTAREA+6(2)
         OI    2(R2),X'F0'
         SPACE
         LA    R2,0(,R7)
         CVD   R6,CVRTAREA
         UNPK  0(4,R2),CVRTAREA+5(3)
         OI    3(R2),X'F0'
         SPACE
EXIT0    SR    15,15
EXIT     LR    1,13
         L     13,4(,13)
         ST    15,16(,13)
         LM    14,12,12(13)
         BR    14
         SPACE
*---------------------------------------------------------------------*
*        CONSTANTS
*---------------------------------------------------------------------*
         SPACE
MILLION  DC    F'1000000'
SIXTYMIL DC    F'60000000'
MINUS1   DC    F'-1'
         LTORG
         SPACE
*---------------------------------------------------------------------*
*        DSECTS
*---------------------------------------------------------------------*
         SPACE
MYDSECT  DSECT
TIMELEFT DS    0F                  1ST FULLWORD OF SAVEAREA
         DS    18F                 REGISTER SAVEAREA
CVRTAREA DS    D
MYDSECTL EQU   *-MYDSECT
         SPACE
PARAMS   DSECT
CVTTZPTR DS    A                   ADDR OF CVTTZ VALUE
TODPTR   DS    A                   ADDR OF TOD CLOCK VALUE
OUTAREA  DS    A                   ADDR OF OUTPUT AREA
OPTION   DS    A                   ADDR OF OPTION BYTE
SAVEPTR  DS    A                   ADDR OF SAVEAREA
         SPACE
         YREGS
         END
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*  CLEANED A BIT  . . . 08/17
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATER  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUMENTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFORE R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
R3       EQU   3                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
         DS    0D
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   R14,R12,12(R13)    SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES,SP=0       RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    R1,8(,R13)         OUR SAVE AREA POINTER
         ST    R13,4(,R1)         POINTER TO CALLER'S SAVE AREA
         LR    R13,R1             @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(,R13)        POINT TO CALLER'S RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 RC IF BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 RC IF BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(,RML)              MESSAGE LENGTH
         STH   R15,PUTLEN               PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(,R2)       @1ST PROBLEM PGM SAVE AREA
         L     R2,24(,R2)               REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    R2,R13                   @OUR SAVE AREA
         LR    R3,R15                   SAVE RETURN CODE
         L     R13,4(,R13)              @CALLER'S SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,R3                   RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLER'S REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
