UCBTYPE  TITLE 'UCBTYPE - DISPLAY DEFINED I/O DEVICES USING ULUT'
********************************************************************
*     'UCBTYPE - DISPLAY DEFINED DEVICES USING UCB LOOKUP TABLE    *
********************************************************************
*
*        WRITTEN BY.     Sam Golob
*
*        DATE WRITTEN.   March 12, 2014.
*
*        DATE UPDATED.   December 23, 2014  by John Hamlet and
*                                              Sam Golob
*
*                        January 19, 2015   remove z/OS level
*                                           dependency
*
*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.
*                                    --- --------------
*        PURPOSE.
*
*            This TSO command is a display of
*            the number of defined devices, by type,
*            also showing the number of devices online,
*            by type.
*
*        OUTPUT.
*
*            TSO output is via PUTLINE, so the output can
*            be trapped and displayed.
*
*        SYNTAX.
*
*            UCBTYPE        (no parameters currently supported)
*
*
*        DESCRIPTION.
*
*            This program reports on the "heading fields" of the
*            ULUT, and then it scans through the ULUT table entries
*            to re-count the individual UCB's and also figure out
*            which ones are online.  The result is similar to a
*            DCQ (Device Class Queue) display, but it is very
*            accurate, having come from "the horse's mouth", or
*            in other words, from the real source of the data.
*
*            The unique thing about this TSO command, is that
*            it does not acquire a copy of the UCB's but it
*            acquires "the real thing", and NOT a UCB copy,
*            without having to be authorized.  The way this was
*            done, was to use the ULUT, or UCB LookUp Table,
*            which is not really documented by IBM.  Since the
*            ULUT's structure can change, and it actually has
*            changed twice, using this method to look up UCB's
*            is not recommended by IBM.  But if you keep up
*            with the changes, you can keep this program
*            working.  The ULUT tells you which version it is.
*            Currently, they are called Type 1, or Type 2, or
*            Type 3.  Type 2 started with z/OS 1.7.  Type 3
*            started with z/OS 2.2, and was moved into 64-bit
*            storage.  Therefore the Type 3 ULUT has to be
*            accessed in 64-bit mode.
*
*        ATTRIBUTION.
*
*            Thanks to Gilbert Saint-flour, of blessed memory,
*            for doing the necessary research, calling IBM Level 2,
*            nosing out the facts, etc.  Gilbert exposed this
*            technique, and I decided to try and write programs
*            that use it.  You get real-time UCBs without needing
*            APF-authorization.
*
*            Inspiration:  Lee Conyers  CBT File 221.
*
*        FURTHER REFERENCE.
*
*            Please refer to the SHOWzOS code on CBT Tape File 492
*            to see how this is done.  Search for string "ULUT".
*
*        TESTED.    ESA 5.2.2 thru z/OS 2.2 .
*
*
*        LOG OF CHANGES.
*
*        2014/03/13 - V1.1 - Display UCB device type counts
*                      in hex and decimal.
*
*        2014/03/13 - V1.2 - Display addresses of control blocks
*                      needed to address the ULUT and also give
*                      an indication of how to get there, in
*                      "LOOK format" from CBT File 264, LOOK
*                      program.
*
*                      J10 is virtual address of CVT pointed to
*                           by address at HEX 10.
*                      J+7C is the CVTIXAVL pointed to at address
*                           X'7C' off the CVT.
*                      J+D0 is the IOVT address pointed to at X'D0'
*                           off the CVTIXAVL.
*                      J+8  is the ULUT address pointed to at X'08'
*                           off the IOVT.
*
*        2014/12/23 - V1.3 - z/OS 2.2 modifications for ULUT
*                            Type 3 which is in 64-bit storage.
*                            Display the 64-bit ULUT address.
*
*        2015/01/19 - V1.3 - PTF UY90741,0,2 retrofits the ULUT
*                            version 3 to z/OS 2.1 and 1.13.  Code
*                            modified not to check for z/OS level.
*                            Criterion is IOVT+8 having fullword 0,
*                            then IOVT+X'1B8' contains 64-bit ULUT
*                            address, and ULUT is dealt with in
*                            64-bit mode.  Otherwise ULUT is 31-bit.
*
********************************************************************
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
         MACRO
.*     --------------------------------------
.*     DISPLAY HEX VALUES IN CHARACTER FORMAT     31-bit mode only
.*     --------------------------------------
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R7,SAVER7A               Save area for BAL register
         STM   R15,R1,HEXSAVE           Save work registers
         LA    R1,&FROM                 Load from address
         LA    R0,&LEN                  Load number of chars to move
         LA    R15,&TO                  Load to address
         BAL   R7,HEX                   Go to routine - do the work
         LM    R15,R1,HEXSAVE           Restore work registers
         L     R7,SAVER7A               Restore BAL register
         MEND
* ------------------------------------------------------------------- *
         MACRO
         IOSDIOVT
IOVT     DSECT                         IOS Vector Table          ESA41
         DS    C'IOVT'
         DS    H'476'                  Length of IOVT            RS1106
         DS    XL2
IOVTULUT DS    V(ULUT)                 UCB LOOK-UP TABLE
         DS    3F
IOVTCDA  DS    V(CDA)                  Config Data Area
         DS    1F                      ???
         DS    A                       IASC ??
         DS    A                       IOS PIN QUEUE HEADERS
         DS    A                       IOS PIN QUEUE ELEMENTS
         DS    1F                      ???
         DS    A                       TQE
         DS    6F                      ???
         DS    A                       CSC
         DS    1F                      ???
         DS    A                       IOS 31 BIT DST ENTRIES
         DS    A                       IOS 24 BIT DST ENTRIES
         DS    1F                      ???
         DS    A                       IOS UCB SERVICES PC RTN
         DS    A                       IODE
         DS    3F                      ???
         DS    A                       IOS HASH
         DS    A                       IOS UCB HASH COLISIONS
         DS    1F                      ???
         DS    A                       DDT
         DS    A                       DDT
         DS    A                       DDT
         DS    4F                      ???
         DS    A                       CAPT
         DS    2F                      ???
         DS    A                       DDT
         DS    A                       DDT
         DS    1F                      ???
         DS    A                       DDT
         DS    A                       IOS CAPTURE UCB SERVICE
         DS    A                       TRCB
         DS    2F                      ???
         DS    1F                      ???
         DS    A                       MGFQ
         DS    A                       CMVT
         DS    A                       CPCT
         DS    1F                      ???
         DS    1F                      ???
         DS    A                       IXSD
         DS    CL8'SYSIOS01'
         DS    6F                      ???
         DS    A                       QDIO
         DS    1F                      ???
         DS    A                       SAUT
         DS    4F                      ???
         DS    A                       IOS PURGE WORK AREAS
IOVTFLG1 DS    X                       IOVT-Flag
IOVTMIDAW EQU   X'08'                  MIDAW ON?
         DS    XL3                     ???
         DS    A                       CCAP
         ORG   IOVT+440                0x1B8                     JH1214
IOVT3LUT DS    D                       UCB V3 look-up table      JH1214
         MEND
         EJECT
* ------------------------------------------------------------------- *
         MACRO
         IOSDULU3
ULU3     DSECT                         UCB Look-up Table
         DS    C'ULUT'
ULU3VERS DS    X                       version 3                 JH1214
         DS    AL1                     Subpool
         DS    XL2                     <filler>
         DS    F                       <filler>
         DS    F                       <filler>
ULU31ST  DS    D                       FIRST LOOK-UP ENTRY (V3)
         DS    XL2                     <filler>
         DS    XL2                     <filler>
ULU3UCBC DS    F                       Total number of LOOK-UP Entries
ULU3TAPE DS    F'064'                  number of TAPE LOOK-UP Entries
ULU3COMM DS    F'032'                  number of COMM LOOK-UP Entries
ULU3DASD DS    F'256'                  number of DASD LOOK-UP Entries
ULU3DISP DS    F'128'                  number of DISP LOOK-UP Entries
ULU3UREC DS    F'032'                  number of UREC LOOK-UP Entries
ULU3CHAR DS    F'008'                  number of CHAR LOOK-UP Entries
ULU3CTCA DS    F'016'                  number of CTCA LOOK-UP Entries
         ORG   ULU3+264
UL3ENTRY DSECT                         UCB LOOK-UP ENTRY
UL3EDEVN DS    X'000D'                 DEVICE NUMBER
UL3EFLGS DS    X'4000'                 Flags
UL3EDYN   EQU  X'40'                   Dynamic UCB
UL3ESEQN DS    XL2                     ?
         DS    XL2                     ?
UL3EUCBP DS    V(UCBOB)                UCB ADDRESS
UL3ELEN  EQU   *-UL3ENTRY
         MEND
         EJECT
* ------------------------------------------------------------------- *
         IOSDULUT
         IOSDULU2
         IOSDULU3
         CVT      DSECT=YES,LIST=YES
* ------------------------------------------------------------------- *
UCBTYPE  CSECT
UCBTYPE  RMODE ANY
UCBTYPE  AMODE 31
         USING *,R10,R11,R12
ENTRY0   B     BEGIN-*(,R15)            Eyecatcher.
         DC    AL1(7),CL7'UCBTYPE'
         DC    CL6' V1.3 '
         DC    CL16'ULUT DCQ LOOKUP'
         DC    CL16' &SYSDATE &SYSTIME '
WORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)
* ------------------------------------------------------------------- *
BEGIN    STM   R14,R12,12(R13)
         LR    R10,R15                Load base registers.
         LA    R11,4095(,R10)
         LA    R11,1(,R11)
         LA    R12,4095(,R11)
         LA    R12,1(,R12)
         LR    R2,R1                  Save register 1.
         L     R0,WORKSIZ             Get size to be GETMAINed.
         GETMAIN R,LV=(0)
         LR    R9,R1                  Address of GETMAINed area.
         USING WORK,R9
*        XC    0(WORKINIT,R1),0(R1)   Clear work area
         XC    0(WORKLEN-200,R1),0(R1)        Clear work area
         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)
         ST    R13,4(,R9)             Old address in new save area.
         ST    R9,8(,R13)             New address in old save area.
         LR    R13,R9                 Address of savearea/workarea.
         MVI   LINE-1,X'40'           Insert blank for clearing.
         MVC   LINE(100),LINE-1       Initial clear of output line.
         LA    R15,12
         ST    R15,RETCODE            Set initial return code to 12.
*
INITCON  DS    0H                     Zero counters
         XC    CNTTAPE,CNTTAPE
         XC    CNTCOMM,CNTCOMM
         XC    CNTDASD,CNTDASD
         XC    CNTDISP,CNTDISP
         XC    CNTUREC,CNTUREC
         XC    CNTCHAR,CNTCHAR
         XC    CNTCTCA,CNTCTCA
         XC    ONLTAPE,ONLTAPE
         XC    ONLCOMM,ONLCOMM
         XC    ONLDASD,ONLDASD
         XC    ONLDISP,ONLDISP
         XC    ONLUREC,ONLUREC
         XC    ONLCHAR,ONLCHAR
         XC    ONLCTCA,ONLCTCA
         XC    OSLVLSW6,OSLVLSW6      Clear image of CVTOSLV6 from CVT.
* ------------------------------------------------------------------ *
*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *
* ------------------------------------------------------------------ *
GETULUT  DS    0H                     Get the ULUT (UCB lookup table)
         L     R2,16                  CVT
         ST    R2,STORCVT             Store value for display later.
         USING CVTMAP,R2
         MVC   OSLVLSW6,CVTOSLV6      Copy relevant OS level switch
         DROP  R2
         L     R3,X'7C'(,R2)          CVTIXAVL - IOCOM
         ST    R3,STORIXAV            Store for display later.
         L     R3,X'D0'(,R3)          IOS Vector Table
         ST    R3,STORIOVT            Store for display later.
         L     R6,8(,R3)              Check 31-bit ULUT address
         LTR   R6,R6                  Is it zero?
         BNZ   GETULUN2               No. This is Type 2 or less
         B     GETULUY2               Yes. We have 64-bit ULUT.
GETULUY2 DS    0H
         OI    OSLVLSW6,X'40'         Indicate ULUT address is 64-bit
         LLGTR R3,R3                  Clear 64-bit hi-area
         LLGTR R4,R4
         LLGTR R7,R7                  <<<< ADDED >>>>
         LLGTR R9,R9                  <<<< ADDED >>>>
         LLGTR R10,R10                <<<< ADDED >>>>
         LLGTR R12,R12                <<<< ADDED >>>>
         LG    R4,X'1B8'(,R3)         Pick up ULUT V3 address
         SAM64
         LGR   R3,R4                  Reload R3 with ULUT address
         STG   R4,STORULUT            Doubleword address
         B     GETULUN3               Skip 31-bit stuff
GETULUN2 DS    0H                     31-bit mode code. Type <=2.
         L     R4,8(,R3)              UCB Lookup Table (ULUT)
         LR    R3,R4                  Point both regs to ULUT
         ST    R4,STORULUT
GETULUN3 DS    0H                     Get here in either address mode.
         CLC   =C'ULUT',0(R3)         Eyecatcher there?
         BNE   EXIT                   Nope. It ain't it. Out. Code 12.
* ------------------------------------------------------------------ *
         MVC   ULUTTYPE(1),4(R3)      Store the ULUT type.
         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)
         BE    ULUTTYP1               Go to beginning of table entries.
         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)
         BE    ULUTTYP2               Go to beginning of table entries.
         TM    OSLVLSW6,X'40'         64-bit ULUT here?
         BNO   GETULEX2               No. Exit.
         SAM64                        Need 64-bit mode for compare.
         MVC   ULUTTYPE(1),4(R3)      Save off the ULUT type field.
         CLI   4(R3),X'03'            Is it ULUT Type 3?
         BE    ULUTTYP3               Yes. Start table entry scan.
         SAM31                        Back to 31-bit mode.
GETULEX2 DS    0H
* ----------------------------------- Insert test for future types here
         B     EXIT
* ------------------------------------------------------------------ *
*     Get actual table entries - location varies by ULUT type....    *
*                                                                    *
*     (This seems to be why IBM doesn't document this interface.     *
*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *
*      wants to keep the user's interface standard.  But we don't    *
*      want to lose the convenience of getting a UCB scan of REAL    *
*      UCBs, in REAL TIME, without having to be APF-authorized.)     *
*                                                                    *
*     This practice appears to be relatively harmless if we only     *
*     DISPLAY the UCB and don't try to modify it.  Also, during a    *
*     configuration change, you might get a S0C4 from these          *
*     programs, but they will run fine a minute later.  They are     *
*     primarily for display only.                                    *
*                                                                    *
*     Actually, this program has been tested to work from ESA 5.2.2  *
*      through z/OS 2.2.  So it is really quite stable, so far,      *
*      as long as we code for all the current ULUT types.            *
*                                                                    *
*     Summary:                                                       *
*                                                                    *
*     The ULUT table has been changed twice by IBM, thus far:        *
*      Type 1:  ESA 4.x  thru z/OS 1.7                               *
*      Type 2:  z/OS 1.7 thru z/OS 2.1                               *
*      Type 3:  z/OS 2.2 ....    (table is now in 64-bit storage)    *
*               z/OS 2.1  with UA90741 applied                       *
*               z/OS 1.13 HBB7780 with UA90740 applied               *
*               z/OS 1.13 JBB778H with UA90742 and UA90740 applied   *
*                                                                    *
*     At the ULUT V.3 level the ULUT (UCB Lookup Table) has been     *
*      moved into 64-bit storage, so even to get to the beginning    *
*      of the table, in order to find out the table type, is now     *
*      different, but not too difficult.  In the (OCO) macro         *
*      IOSDIOVT, there are two pointer locations to the ULUT.        *
*      IOVT+8 is a fullword pointer.  IOVT+X'1B8' is a doubleword    *
*      pointer.  If IOVT+8 for a fullword, is zeroes, then this      *
*      shows that IOVT+X'1B8' is the valid pointer, it points to     *
*      a doubleword address, and you have to address the ULUT        *
*      in 64-bit mode.                                               *
*                                                                    *
*     One test is run.  If IOVT+8 for a fullword is zeroes, then     *
*      IOVT+X'1B8' is assumed to be valid, and flag OSLVLSW6, which  *
*      had previously been copied from CVTOSLV6 in the CVT, is       *
*      OR'ed to X'40', which would normally indicate the presence    *
*      of z/OS 2.2.  This indicates to the program that the ULUT     *
*      is in 64-bit mode, even at lower levels, with the application *
*      of PTFs UA90741, or UA90740 possibly with UA90742.            *
*                                                                    *
* ------------------------------------------------------------------ *
ULUTTYP1 DS    0H
         L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.
         L     R4,X'10'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
         ST    R3,SAVER3A      Save R3 for UCB scanning later
         B     DISPNUM1
ULUTTYP2 DS    0H
         L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.
         L     R4,X'18'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
         ST    R3,SAVER3A      Save R3 for UCB scanning later
         B     DISPNUM2
ULUTTYP3 DS    0H
         LG    R3,X'10'(,R3)   ULUT Type 3, Addr of first table entry.
         L     R4,X'1C'(,R4)   Total number of ULUT entries
         ST    R4,TOTCOUNT     Store this number away
         STG   R3,SAVER3A      Save R3 for UCB scanning later
         B     DISPNUM3
* --------------------------- Insert displacement for future types.  *
DISPNUM1 DS    0H              Format header fields from ULUT Type 1
         L     R3,STORULUT
         BAL   R7,PRTHEAD      Display all the header material.
         USING ULUT,R3
         MVC   LINE,LINE-1     Display ULUT header fields.
         HEX   LINE,4,ULUTUCBC
         HEX   LINE+9,4,ULUTTAPE
         HEX   LINE+18,4,ULUTCOMM
         HEX   LINE+27,4,ULUTDASD
         HEX   LINE+36,4,ULUTDISP
         HEX   LINE+45,4,ULUTUREC
         HEX   LINE+54,4,ULUTCHAR
         HEX   LINE+63,4,ULUTCTCA
         APUT  LINE,80
         MVC   LINE,LINE-1            Convert to Decimal
         L     R8,ULUTUCBC
         BAL   R7,DECCONV
         MVC   LINE(8),NUMOUT
         L     R8,ULUTTAPE
         BAL   R7,DECCONV
         MVC   LINE+9(8),NUMOUT
         L     R8,ULUTCOMM
         BAL   R7,DECCONV
         MVC   LINE+18(8),NUMOUT
         L     R8,ULUTDASD
         BAL   R7,DECCONV
         MVC   LINE+27(8),NUMOUT
         L     R8,ULUTDISP
         BAL   R7,DECCONV
         MVC   LINE+36(8),NUMOUT
         L     R8,ULUTUREC
         BAL   R7,DECCONV
         MVC   LINE+45(8),NUMOUT
         L     R8,ULUTCHAR
         BAL   R7,DECCONV
         MVC   LINE+54(8),NUMOUT
         L     R8,ULUTCTCA
         BAL   R7,DECCONV
         MVC   LINE+63(8),NUMOUT
         APUT  LINE,80
*        B     EXIT0
         B     LOOPSET
         DROP  R3
DISPNUM2 DS    0H              Format header fields from ULUT Type 2
         L     R3,STORULUT
         BAL   R7,PRTHEAD      Display all the header material
         USING ULU2,R3
         MVC   LINE,LINE-1     Display ULUT header fields.
         HEX   LINE,4,ULU2UCBC
         HEX   LINE+9,4,ULU2TAPE
         HEX   LINE+18,4,ULU2COMM
         HEX   LINE+27,4,ULU2DASD
         HEX   LINE+36,4,ULU2DISP
         HEX   LINE+45,4,ULU2UREC
         HEX   LINE+54,4,ULU2CHAR
         HEX   LINE+63,4,ULU2CTCA
         APUT  LINE,80
         MVC   LINE,LINE-1            Convert to Decimal
         L     R8,ULU2UCBC
         BAL   R7,DECCONV
         MVC   LINE(8),NUMOUT
         L     R8,ULU2TAPE
         BAL   R7,DECCONV
         MVC   LINE+9(8),NUMOUT
         L     R8,ULU2COMM
         BAL   R7,DECCONV
         MVC   LINE+18(8),NUMOUT
         L     R8,ULU2DASD
         BAL   R7,DECCONV
         MVC   LINE+27(8),NUMOUT
         L     R8,ULU2DISP
         BAL   R7,DECCONV
         MVC   LINE+36(8),NUMOUT
         L     R8,ULU2UREC
         BAL   R7,DECCONV
         MVC   LINE+45(8),NUMOUT
         L     R8,ULU2CHAR
         BAL   R7,DECCONV
         MVC   LINE+54(8),NUMOUT
         L     R8,ULU2CTCA
         BAL   R7,DECCONV
         MVC   LINE+63(8),NUMOUT
         APUT  LINE,80
*        B     EXIT0
         B     LOOPSET
         DROP  R3
DISPNUM3 DS    0H              Format header fields from ULUT Type 2
         TM    OSLVLSW6,X'40'         Is the o.s. z/OS 2.2 or above?
         BNO   NULUVER3               ULUT Type 2 or less, 31-bit mode.
         SAM64                        Need 64-bit mode
         LLGTR R3,R3
         LG    R3,STORULUT
         SAM31                        Need 31-bit mode for print.
         BAL   R7,PRTHEAD             Display all the header material.
         SAM64                        Need 64-bit mode.
         USING ULU3,R3
         MVC   ULV3UCBC,ULU3UCBC      In 64-bit mode, move
         MVC   ULV3TAPE,ULU3TAPE        quantities to areas
         MVC   ULV3COMM,ULU3COMM          that are in 31-bit
         MVC   ULV3DASD,ULU3DASD            mode.
         MVC   ULV3DISP,ULU3DISP
         MVC   ULV3UREC,ULU3UREC
         MVC   ULV3CHAR,ULU3CHAR
         MVC   ULV3CTCA,ULU3CTCA
         SAM31                        Go to 31-bit mode.
         MVC   LINE,LINE-1            Display ULUT header fields.
         HEX   LINE,4,ULV3UCBC
         HEX   LINE+9,4,ULV3TAPE
         HEX   LINE+18,4,ULV3COMM
         HEX   LINE+27,4,ULV3DASD
         HEX   LINE+36,4,ULV3DISP
         HEX   LINE+45,4,ULV3UREC
         HEX   LINE+54,4,ULV3CHAR
         HEX   LINE+63,4,ULV3CTCA
         APUT  LINE,80
         MVC   LINE,LINE-1            Convert to Decimal
         L     R8,ULV3UCBC
         BAL   R7,DECCONV
         MVC   LINE(8),NUMOUT
         L     R8,ULV3TAPE
         BAL   R7,DECCONV
         MVC   LINE+9(8),NUMOUT
         L     R8,ULV3COMM
         BAL   R7,DECCONV
         MVC   LINE+18(8),NUMOUT
         L     R8,ULV3DASD
         BAL   R7,DECCONV
         MVC   LINE+27(8),NUMOUT
         L     R8,ULV3DISP
         BAL   R7,DECCONV
         MVC   LINE+36(8),NUMOUT
         L     R8,ULV3UREC
         BAL   R7,DECCONV
         MVC   LINE+45(8),NUMOUT
         L     R8,ULV3CHAR
         BAL   R7,DECCONV
         MVC   LINE+54(8),NUMOUT
         L     R8,ULV3CTCA
         BAL   R7,DECCONV
         MVC   LINE+63(8),NUMOUT
         APUT  LINE,80
*        B     EXIT0
         B     LOOPSET
NULUVER3 DS    0H
         DROP  R3
LOOPSET  DS    0H              Set up loop thru all UCB's.
         TM    OSLVLSW6,X'40'  Is system ACTUALLY z/OS 2.2 or above?
         BNO   NLUPULU3               No.
         SAM64
         LLGTR R5,R5           Clear 64-bit hi-area
         LLGTR R3,R3           Clear 64-bit hi-area
         LG    R3,SAVER3A      Address of 1st table entry - 64bit
         B     LOOPUCB
NLUPULU3 DS    0H
         L     R3,SAVER3A      Address of 1st table entry - 31bit
* ------------------------------------------------------------------ *
*   ULUT table entries are 12 bytes in length. No change in format.  *
*                                                                    *
*     The first halfword is the unit number in hex.                  *
*     The second halfword consists of flags.                         *
*     The third halfword is a sequence counter number in the table.  *
*     The fourth halfword is probably unused for now.                *
*     The next fullword contains the real UCB address of the unit.   *
*                                                                    *
*     Example:                                                       *
*                                                                    *
*          0A80 4000 010D 0000 00F511D0                              *
*                                                                    *
*          unit flag coun-     real UCB                              *
*          addr      ter       address                               *
* ------------------------------------------------------------------ *
LOOPUCB  DS    0H            Loop thru table entries, covering
*                             all of the defined UCBs.
*                            Do this for the number of table entries.
         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.
* ------------------------------------------------------------------ *
*    We will scan the ULUT knowing the total number of entries       *
*    in the table, initially pointed to by R4, and decremented.      *
* ------------------------------------------------------------------ *
         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?
         BNO   NSAM64                 No.
         SAM64
NSAM64   DS    0H
         L     R5,8(,R3)              Get address of this unit's UCB.
         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?
         BNO   NSAM31                 No.
         SAM31                        For z/OS 2.2 and above, SAM31.
NSAM31   DS    0H
         ST    R5,UCBADDRS            Save the address for reporting.
         USING UCBOB,R5               Addressability to UCB.
         CLI   UCBTBYT3,X'80'         Is this UCB for TAPE?
         BE    LOOPTAPE               No. Look for the next one.
         CLI   UCBTBYT3,X'41'         Is this UCB for CTCA?
         BE    LOOPCTC                No. Look for the next one.
         CLI   UCBTBYT3,X'40'         Is this UCB for COMM?
         BE    LOOPCOMM               No. Look for the next one.
         CLI   UCBTBYT3,X'20'         Is this UCB for DASD?
         BE    LOOPDASD               No. Look for the next one.
         CLI   UCBTBYT3,X'10'         Is this UCB for DISP?
         BE    LOOPDISP               No. Look for the next one.
         CLI   UCBTBYT3,X'08'         Is this UCB for UREC?
         BE    LOOPUREC               No. Look for the next one.
         CLI   UCBTBYT3,X'04'         Is this UCB for CHAR?
         BE    LOOPCHAR               No. Look for the next one.
         B     LOOPJUMP
*   - - - - - - - - - - - - - - - -   Count UCB's.
LOOPTAPE DS    0H
         L     R6,CNTTAPE
         LA    R6,1(,R6)
         ST    R6,CNTTAPE
         TM    UCBSTAT,UCBONLI        Is this UCB online?
         BNO   LOOPJUMP               No. Look for the next one.
         L     R6,ONLTAPE
         LA    R6,1(,R6)
         ST    R6,ONLTAPE
         B     LOOPJUMP
*   - - - - - - - - - - - - - - - -
LOOPCTC  DS    0H
         L     R6,CNTCTCA
         LA    R6,1(,R6)
         ST    R6,CNTCTCA
         TM    UCBSTAT,UCBONLI        Is this UCB online?
         BNO   LOOPJUMP               No. Look for the next one.
         L     R6,ONLCTCA
         LA    R6,1(,R6)
         ST    R6,ONLCTCA
         B     LOOPJUMP
*   - - - - - - - - - - - - - - - -
LOOPCOMM DS    0H
         L     R6,CNTCOMM
         LA    R6,1(,R6)
         ST    R6,CNTCOMM
         TM    UCBSTAT,UCBONLI        Is this UCB online?
         BNO   LOOPJUMP               No. Look for the next one.
         L     R6,ONLCOMM
         LA    R6,1(,R6)
         ST    R6,ONLCOMM
         B     LOOPJUMP
*   - - - - - - - - - - - - - - - -
LOOPDASD DS    0H
         L     R6,CNTDASD
         LA    R6,1(,R6)
         ST    R6,CNTDASD
         TM    UCBSTAT,UCBONLI        Is this UCB online?
         BNO   LOOPJUMP               No. Look for the next one.
         L     R6,ONLDASD
         LA    R6,1(,R6)
         ST    R6,ONLDASD
         B     LOOPJUMP
*   - - - - - - - - - - - - - - - -
LOOPDISP DS    0H
         L     R6,CNTDISP
         LA    R6,1(,R6)
         ST    R6,CNTDISP
         TM    UCBSTAT,UCBONLI        Is this UCB online?
         BNO   LOOPJUMP               No. Look for the next one.
         L     R6,ONLDISP
         LA    R6,1(,R6)
         ST    R6,ONLDISP
         B     LOOPJUMP
*   - - - - - - - - - - - - - - - -
LOOPUREC DS    0H
         L     R6,CNTUREC
         LA    R6,1(,R6)
         ST    R6,CNTUREC
         TM    UCBSTAT,UCBONLI        Is this UCB online?
         BNO   LOOPJUMP               No. Look for the next one.
         L     R6,ONLUREC
         LA    R6,1(,R6)
         ST    R6,ONLUREC
         B     LOOPJUMP
*   - - - - - - - - - - - - - - - -
LOOPCHAR DS    0H
         L     R6,CNTCHAR
         LA    R6,1(,R6)
         ST    R6,CNTCHAR
         TM    UCBSTAT,UCBONLI        Is this UCB online?
         BNO   LOOPJUMP               No. Look for the next one.
         L     R6,ONLCHAR
         LA    R6,1(,R6)
         ST    R6,ONLCHAR
         B     LOOPJUMP
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
LOOPJUMP DS    0H
         TM    OSLVLSW6,X'40'             Run time test.
         BNO   NSAM31A
         SAM64
NSAM31A  DS    0H
         LA    R3,X'C'(,R3)           Go to next ULUT entry
         BCT   R4,LOOPUCB             And loop until we've scanned
*                                      all of the table entries.
*
* ---- At end of ULUT, fall thru to here.
*
         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?
         BNO   NSAM31B                No.
         SAM31                        For z/OS 2.2 and above, SAM31.
NSAM31B  DS    0H
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*   All UCB's have now been scanned using the ULUT table entries.   *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MVC   LINE,LINE-1            Insert a few blank lines.
         APUT  LINE,18
         MVC   LINE,LINE-1
         APUT  LINE,18
COUNDEFD DS    0H                     Display scanned values in Hex.
         MVC   LINE,LINE-1
         MVC   LINE(8),=C'Scanned:'
         HEX   LINE+9,4,CNTTAPE
         HEX   LINE+18,4,CNTCOMM
         HEX   LINE+27,4,CNTDASD
         HEX   LINE+36,4,CNTDISP
         HEX   LINE+45,4,CNTUREC
         HEX   LINE+54,4,CNTCHAR
         HEX   LINE+63,4,CNTCTCA
         APUT  LINE,80
         MVC   LINE,LINE-1            Convert to Decimal and display.
         MVC   LINE(8),=C'------- '
         L     R8,CNTTAPE
         BAL   R7,DECCONV
         MVC   LINE+9(8),NUMOUT
         L     R8,CNTCOMM
         BAL   R7,DECCONV
         MVC   LINE+18(8),NUMOUT
         L     R8,CNTDASD
         BAL   R7,DECCONV
         MVC   LINE+27(8),NUMOUT
         L     R8,CNTDISP
         BAL   R7,DECCONV
         MVC   LINE+36(8),NUMOUT
         L     R8,CNTUREC
         BAL   R7,DECCONV
         MVC   LINE+45(8),NUMOUT
         L     R8,CNTCHAR
         BAL   R7,DECCONV
         MVC   LINE+54(8),NUMOUT
         L     R8,CNTCTCA
         BAL   R7,DECCONV
         MVC   LINE+63(8),NUMOUT
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,18
COUNONLN DS    0H                     Display online values in Hex.
         MVC   LINE,LINE-1
         MVC   LINE(7),=C'Online:'
         HEX   LINE+9,4,ONLTAPE
         HEX   LINE+18,4,ONLCOMM
         HEX   LINE+27,4,ONLDASD
         HEX   LINE+36,4,ONLDISP
         HEX   LINE+45,4,ONLUREC
         HEX   LINE+54,4,ONLCHAR
         HEX   LINE+63,4,ONLCTCA
         APUT  LINE,80
         MVC   LINE,LINE-1            Convert to Decimal and display.
         MVC   LINE(7),=C'------ '
         L     R8,ONLTAPE
         BAL   R7,DECCONV
         MVC   LINE+9(8),NUMOUT
         L     R8,ONLCOMM
         BAL   R7,DECCONV
         MVC   LINE+18(8),NUMOUT
         L     R8,ONLDASD
         BAL   R7,DECCONV
         MVC   LINE+27(8),NUMOUT
         L     R8,ONLDISP
         BAL   R7,DECCONV
         MVC   LINE+36(8),NUMOUT
         L     R8,ONLUREC
         BAL   R7,DECCONV
         MVC   LINE+45(8),NUMOUT
         L     R8,ONLCHAR
         BAL   R7,DECCONV
         MVC   LINE+54(8),NUMOUT
         L     R8,ONLCTCA
         BAL   R7,DECCONV
         MVC   LINE+63(8),NUMOUT
         APUT  LINE,80
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    Now we're done with displaying all the totals. So exit.        *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         DROP  R5
EXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.
EXIT     L     R2,RETCODE
         LR    R1,R13                 Point to address to FREEMAIN.
         L     R0,WORKSIZ             Length to FREEMAIN.
         L     R13,4(,R13)            Restore original R13.
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2                 Load real return code.
         LM    R0,R12,20(R13)         Restore rest of registers.
         L     R14,12(,R13)
         BR    R14                    And get out of the program.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                     S U B R O U T I N E S                         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     Subroutine to display HEX values as character.                *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      MVC   1(1,R15),0(R1)         Move byte
         UNPK  0(3,R15),1(2,R15)      Unpack
         TR    0(2,R15),HEXTAB-240    Translate
         LA    R15,2(,R15)            Increment output pointer
         LA    R1,1(,R1)              Increment input pointer
         BCT   R0,HEX                 Decrement length, then loop
         MVI   0(R15),C' '            Blank the trailing byte
         BR    R7                     Return to caller
HEXTAB   DC    C'0123456789ABCDEF'    Translate table
*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     Subroutine to convert hex values to decimal.                  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
DECCONV  DS    0H                  Convert fullword hex to decimal.
*                                  R8 has the fullword to be converted
         ST    R7,SAVER7D
         CVD   R8,CVDAREA          Convert it to printable
         MVC   DECOUT,MASK10       Move in the mask
         ED    DECOUT,CVDAREA+3    Make it pretty
*        APUT  NUMOUT,9
         L     R7,SAVER7D
         BR    R7
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*     Subroutine to display top of the report.                      *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
PRTHEAD  DS    0H                     Display Report Header Info.
         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?
         BNO   ULADDR0                ULUT Type 2 or less, 31-bit mode.
         SAM31
ULADDR0  DS    0H
         ST    R7,SAVER7E
         APUT  MESSAGET,L'MESSAGET    Display Program Title.
         APUT  MESSAGEU,L'MESSAGEU
         MVC   LINE,LINE-1
         MVC   LINE+20(27),=C'* Hex and Decimal Display *'
         APUT  LINE,56
         MVC   LINE,LINE-1
         MVC   LINE(10),=C'ULUT Ver: '
         HEX   LINE+11,1,ULUTTYPE
         APUT  LINE,20
         MVC   LINE,LINE-1
         MVC   LINE(10),=C'CVT Addr: '
         HEX   LINE+11,4,STORCVT
         MVC   LINE+21(4),=C'J10 '
         APUT  LINE,30
         MVC   LINE,LINE-1
         MVC   LINE(10),=C'CVTIXAVL: '
         HEX   LINE+11,4,STORIXAV
         MVC   LINE+21(4),=C'J+7C'
         APUT  LINE,30
         MVC   LINE,LINE-1
         MVC   LINE(10),=C'IOVT Adr: '
         HEX   LINE+11,4,STORIOVT
         MVC   LINE+21(4),=C'J+D0'
         APUT  LINE,30
         MVC   LINE,LINE-1
         MVC   LINE(10),=C'ULUT Adr: '
         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?
         BNO   ULADDR1                ULUT Type 2 or less, 31-bit mode.
         HEX   LINE+11,4,STORULUT     Full 64-bit ULUT address
         HEX   LINE+20,4,STORULUT+4
         MVI   LINE+19,X'6D'          Underscore
         B     ULADDR1E
ULADDR1  DS    0H
         HEX   LINE+11,4,STORULUT
         MVC   LINE+21(4),=C'J+8 '
ULADDR1E DS    0H
         APUT  LINE,40
         MVC   LINE,LINE-1
         APUT  LINE,16
         MVC   LINE,LINE-1
         MVC   LINE(17),=C'From ULUT Header:'
         APUT  LINE,20
         MVC   LINE,LINE-1
         MVC   LINE(17),=C'---- ---- ------ '
         APUT  LINE,20
         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.
         APUT  MESSGSUU,L'MESSGSUU
         L     R7,SAVER7E
         BR    R7
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                       C O N S T A N T S                           *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LTORG
MESSAGET DC    C'              UCBTYPE - V1.3 - DEFINED DEVICE TOTALS'
MESSAGEU DC    C'              -------   ----   ------- ------ ------'
MESSGSUB DC    C'Total    TAPE     COMM     DASD     DISP     UREC     X
               CHAR     CTCA'
MESSGSUU DC    C'-----    ----     ----     ----     ----     ----     X
               ----     ----'
MASK7    DC    XL7'40202020202120'     Mask for no of cyls display
MASK9    DC    XL9'402020202020202120' Mask for no of cyls display
MASK10   DC    XL10'40202020202020202120'
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                       W O R K   A R E A                         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         DC    0D'0'                  Align for GETMAIN
WORK     DSECT
         DS    18F                    Save Area
CVDAREA  DS    D                      CVD work area
RETCODE  DS    F                      Return Code
UCBADDRS DS    F                      Copy UCB address here for display
DCEADDR  DS    F                      Saved address of DCE
HEXSAVE  DS    3F                     For HEX routine - save regs
IOSDCSAV DS    4F                     IOSDCXR register save area
SAVER3A  DS    D                      Save R3 doubleword
SAVER7A  DS    F                      Save R7 during BAL
SAVER7B  DS    F                      Save R7
SAVER7C  DS    F                      Save R7
SAVER7D  DS    F                      Save R7
SAVER7E  DS    F                      Save R7
SAVER8A  DS    F                      Save R8
SAVEDEVT DS    F                      Copy raw UCB device type value
TOTCOUNT DS    F                      Total number of ULUT entries
TESTCNT  DS    F                      Test this number as they decrease
CYLCNT   DS    PL4                    Saved cyliner count (not used)
OSLVLSW6 DS    X                      z/OS 2.2 or above?
HBB77A0  EQU   OSLVLSW6,64            X'40'
ULUTTYPE DS    X                      Stored ULUT type
STORCVT  DS    F
STORULUT DS    D                      64-bit location
STORIXAV DS    F
STORIOVT DS    F
         DS    C
DECOUT   DS    0CL10
         DS    CL2
NUMOUT   DS    CL8
CNTTAPE  DS    F                      UCB3TAPE EQU   X'80'
CNTCOMM  DS    F                      UCB3COMM EQU   X'40'
CNTDASD  DS    F                      UCB3DACC EQU   X'20'
CNTDISP  DS    F                      UCB3DISP EQU   X'10'
CNTUREC  DS    F                      UCB3UREC EQU   X'08'
CNTCHAR  DS    F                      UCB3CHAR EQU   X'04'
CNTCTCA  DS    F                      UCB3CTC  EQU   X'41'
ONLTAPE  DS    F                      UCB3TAPE EQU   X'80'
ONLCOMM  DS    F                      UCB3COMM EQU   X'40'
ONLDASD  DS    F                      UCB3DACC EQU   X'20'
ONLDISP  DS    F                      UCB3DISP EQU   X'10'
ONLUREC  DS    F                      UCB3UREC EQU   X'08'
ONLCHAR  DS    F                      UCB3CHAR EQU   X'04'
ONLCTCA  DS    F                      UCB3CTC  EQU   X'41'
ULV3UCBC DS    F
ULV3TAPE DS    F
ULV3COMM DS    F
ULV3DASD DS    F
ULV3DISP DS    F
ULV3UREC DS    F
ULV3CHAR DS    F
ULV3CTCA DS    F
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*   With the ULUT technique, you don't need to have a work area   *
*    for the UCBs to be copied into.                              *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         DS    X                      Put blank here to clear line
LINE     DS    CL100                  Display line
WORKINIT EQU   *-WORK
         DS    0D                     Align for GETMAIN
WORKLEN  EQU   *-WORK
*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
UCB      DSECT
         IEFUCBOB
         IECDIOCM
         IOSDIOVT
         YREGS
         END   ENTRY0
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         EJECT
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
